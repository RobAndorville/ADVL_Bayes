Public Class clsBayes
    'The Bayes class stores probability models and updates event probabilities after the occurrence of related events.

#Region " Variable Declarations - All the variables and class objects used in this class." '===================================================================================================

    'Probabilities ----------------------------------------------------------------------------------
    Public WithEvents ProbA As New Probability
    Public WithEvents ProbB As New Probability
    Public WithEvents ProbNotA As New Probability
    Public WithEvents ProbNotB As New Probability
    Public WithEvents ProbAandB As New Probability
    Public WithEvents ProbAandNotB As New Probability
    Public WithEvents ProbNotAandB As New Probability
    Public WithEvents ProbNotAandNotB As New Probability

    'Sample Counts -----------------------------------------------------------------------------------
    Public WithEvents SampsA As New SampleCount
    Public WithEvents SampsB As New SampleCount
    Public WithEvents SampsNotA As New SampleCount
    Public WithEvents SampsNotB As New SampleCount
    Public WithEvents SampsAandB As New SampleCount
    Public WithEvents SampsAandNotB As New SampleCount
    Public WithEvents SampsNotAandB As New SampleCount
    Public WithEvents SampsNotAandNotB As New SampleCount

    Public WithEvents Settings As New clsSettings

    Public Performance As New clsPerformance 'The Test performance measures.

#End Region 'Variable Declarations ------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Properties" '========================================================================================================================================================================

#Region " Bayes Model Information" '===========================================================================================================================================================
    'Bayes Model Properties:
    'Name
    'Label
    'Description
    'Notes
    'FileName
    'Modified

    Private _name As String = "Bayes Model" 'The name of the Bayes model
    Property Name As String
        Get
            Return _name
        End Get
        Set(value As String)
            _name = value
        End Set
    End Property

    Private _label As String = "Bayes Model" 'The Bayes model label. A shortened version of the name in display annotations and in settings file names.
    Property Label As String
        Get
            Return _label
        End Get
        Set(value As String)
            _label = value
            If AnnotTitle.Text = "" Then AnnotTitle.Text = _label 'If the Annotation Title is blank, use the Bayes model label as the title.
        End Set
    End Property

    Private _description As String = "" 'A description of the Bayes model.
    Property Description As String
        Get
            Return _description
        End Get
        Set(value As String)
            _description = value
            'If _annotDescrText = "" Then _annotDescrText = _description 'If the Annotation Description is blank, use the Bayes model description.
            If AnnotDescr.Text = "" Then AnnotDescr.Text = _description 'If the Annotation Description is blank, use the Bayes model description.
        End Set
    End Property

    Private _notes As String = "" 'Notes on the Bayes model.
    Property Notes As String
        Get
            Return _notes
        End Get
        Set(value As String)
            _notes = value
        End Set
    End Property

    Private _fileName As String = "" 'The name of the file used to store the Bayes model. The file extension will be .Bayes
    Property FileName As String
        Get
            Return _fileName
        End Get
        Set(value As String)
            _fileName = value
        End Set
    End Property

    Private _modified As Boolean = False 'If True, the model has been modified and the file should be updated.
    Property Modified As Boolean
        Get
            Return _modified
        End Get
        Set(value As Boolean)
            _modified = value
        End Set
    End Property


    'Private _inputInfoType As String = "P(A), P(B), P(B|A)" 'The input information type. (P(A), P(B), P(B|A)) or (P(A), P(B|A), P(B|NotA))
    Private _inputInfoType As String = "P(B|A), P(A), P(B)" 'The input information type. (P(B|A), P(A), P(B)) or (P(B|A), P(A), P(B|NotA))
    Property InputInfoType As String
        Get
            Return _inputInfoType
        End Get
        Set(value As String)
            _inputInfoType = value
            Select Case _inputInfoType
                Case "P(B|A), P(A), P(B)"
                    'Make ProbB.GivenA, ProbA and ProbB the top ranked values. All other values will be calculated from these.
                    IncrementRanksAbove(SampleSize.Rank)
                    SampleSize.Rank = 1
                    'IncrementRanksAbove(1)
                    IncrementRanksAbove(ProbB.GivenA.Rank)
                    ProbB.GivenA.Rank = 1
                    'IncrementRanks(2)
                    IncrementRanksAbove(ProbA.Rank)
                    'ProbA.Rank = 2
                    ProbA.Rank = 1
                    'IncrementRanks(3)
                    IncrementRanksAbove(ProbB.Rank)
                    'ProbB.Rank = 3
                    ProbB.Rank = 1

                Case "P(B|A), P(A), P(B|NotA)"
                    'Make ProbB.GivenA, ProbA and ProbB.GivenNotA the top ranked values. All other values will be calculated from these.
                    IncrementRanksAbove(SampleSize.Rank)
                    SampleSize.Rank = 1
                    IncrementRanksAbove(ProbB.GivenA.Rank)
                    ProbB.GivenA.Rank = 1
                    IncrementRanksAbove(ProbA.Rank)
                    ProbA.Rank = 1
                    IncrementRanksAbove(ProbB.GivenNotA.Rank)
                    ProbB.GivenNotA.Rank = 1

                Case "Sample Counts"
                    IncrementRanksAbove(SampsAandB.Rank)
                    SampsAandB.Rank = 1
                    SampsAandB.Status = "Defined"
                    IncrementRanksAbove(SampsNotAandB.Rank)
                    SampsNotAandB.Rank = 1
                    SampsNotAandB.Status = "Defined"
                    IncrementRanksAbove(SampsNotAandNotB.Rank)
                    SampsNotAandNotB.Rank = 1
                    SampsNotAandNotB.Status = "Defined"
                    IncrementRanksAbove(SampsAandNotB.Rank)
                    SampsAandNotB.Rank = 1
                    SampsAandNotB.Status = "Defined"

                    'SampleSize.Status = "Undefined"

                    'RaiseEvent Message("InputInfoType.Set(SampleCounts)" & vbCrLf)
                    'RaiseEvent Message("SampleSize.Rank = " & SampleSize.Rank & vbCrLf)
                    'RaiseEvent Message("SampleSize.Status = " & SampleSize.Status & vbCrLf)
                    'RaiseEvent Message("SampleSize.Value = " & SampleSize.Value & vbCrLf & vbCrLf)

                Case "Sample Size"
                    IncrementRanksAbove(SampleSize.Rank)
                    SampleSize.Rank = 1
                    SampleSize.Status = "Defined"

            End Select
        End Set
    End Property

    'NOTE: This is now stored in Settings
    'Private _probabilityMeasure As String = "Decimal" 'The probability measure used to display probability values. (Decimal or Percent.)
    'Property ProbabilityMeasure As String
    '    Get
    '        Return _probabilityMeasure
    '    End Get
    '    Set(value As String)
    '        _probabilityMeasure = value

    '        'ProbA.Measure = _probabilityMeasure
    '        'ProbNotA.Measure = _probabilityMeasure
    '        'ProbB.Measure = _probabilityMeasure
    '        'ProbNotB.Measure = _probabilityMeasure
    '        'ProbAandB.Measure = _probabilityMeasure
    '        'ProbAandNotB.Measure = _probabilityMeasure
    '        'ProbNotAandB.Measure = _probabilityMeasure
    '        'ProbNotAandNotB.Measure = _probabilityMeasure

    '        ProbA.UpdateLabels()
    '        ProbNotA.UpdateLabels()
    '        ProbB.UpdateLabels()
    '        ProbNotB.UpdateLabels()
    '        ProbAandB.UpdateLabels()
    '        ProbAandNotB.UpdateLabels()
    '        ProbNotAandB.UpdateLabels()
    '        ProbNotAandNotB.UpdateLabels()

    '        'The conditional Probability copies of the ProbabilityMeasure property are now updated when the unconditional version is changed.
    '        'ProbA.GivenA.Measure = _probabilityMeasure
    '        'ProbNotA.GivenA.Measure = _probabilityMeasure
    '        'ProbB.GivenA.Measure = _probabilityMeasure
    '        'ProbNotB.GivenA.Measure = _probabilityMeasure
    '        'ProbAandB.GivenA.Measure = _probabilityMeasure
    '        'ProbAandNotB.GivenA.Measure = _probabilityMeasure
    '        'ProbNotAandB.GivenA.Measure = _probabilityMeasure
    '        'ProbNotAandNotB.GivenA.Measure = _probabilityMeasure

    '        'ProbA.GivenNotA.Measure = _probabilityMeasure
    '        'ProbNotA.GivenNotA.Measure = _probabilityMeasure
    '        'ProbB.GivenNotA.Measure = _probabilityMeasure
    '        'ProbNotB.GivenNotA.Measure = _probabilityMeasure
    '        'ProbAandB.GivenNotA.Measure = _probabilityMeasure
    '        'ProbAandNotB.GivenNotA.Measure = _probabilityMeasure
    '        'ProbNotAandB.GivenNotA.Measure = _probabilityMeasure
    '        'ProbNotAandNotB.GivenNotA.Measure = _probabilityMeasure

    '        'ProbA.GivenB.Measure = _probabilityMeasure
    '        'ProbNotA.GivenB.Measure = _probabilityMeasure
    '        'ProbB.GivenB.Measure = _probabilityMeasure
    '        'ProbNotB.GivenB.Measure = _probabilityMeasure
    '        'ProbAandB.GivenB.Measure = _probabilityMeasure
    '        'ProbAandNotB.GivenB.Measure = _probabilityMeasure
    '        'ProbNotAandB.GivenB.Measure = _probabilityMeasure
    '        'ProbNotAandNotB.GivenB.Measure = _probabilityMeasure

    '        'ProbA.GivenNotB.Measure = _probabilityMeasure
    '        'ProbNotA.GivenNotB.Measure = _probabilityMeasure
    '        'ProbB.GivenNotB.Measure = _probabilityMeasure
    '        'ProbNotB.GivenNotB.Measure = _probabilityMeasure
    '        'ProbAandB.GivenNotB.Measure = _probabilityMeasure
    '        'ProbAandNotB.GivenNotB.Measure = _probabilityMeasure
    '        'ProbNotAandB.GivenNotB.Measure = _probabilityMeasure
    '        'ProbNotAandNotB.GivenNotB.Measure = _probabilityMeasure
    '    End Set
    'End Property

    'NOTE: This is now stored in Settings
    'Private _decimalFormat As String = "" 'The format code used to display decimal probabilities. (N4 - Number displayed with thousands separator and 4 decimal places, F4 - Number displayed with 4 decimal places.)
    'Property DecimalFormat As String
    '    Get
    '        Return _decimalFormat
    '    End Get
    '    Set(value As String)
    '        _decimalFormat = value

    '        'ProbA.DecimalFormat = _decimalFormat
    '        'ProbNotA.DecimalFormat = _decimalFormat
    '        'ProbB.DecimalFormat = _decimalFormat
    '        'ProbNotB.DecimalFormat = _decimalFormat
    '        'ProbAandB.DecimalFormat = _decimalFormat
    '        'ProbAandNotB.DecimalFormat = _decimalFormat
    '        'ProbNotAandB.DecimalFormat = _decimalFormat
    '        'ProbNotAandNotB.DecimalFormat = _decimalFormat

    '        ProbA.UpdateLabels()
    '        ProbNotA.UpdateLabels()
    '        ProbB.UpdateLabels()
    '        ProbNotB.UpdateLabels()
    '        ProbAandB.UpdateLabels()
    '        ProbAandNotB.UpdateLabels()
    '        ProbNotAandB.UpdateLabels()
    '        ProbNotAandNotB.UpdateLabels()

    '        'The conditional Probability copies of the DecimalFormat property are now updated when the unconditional version is changed.
    '        'ProbA.GivenA.DecimalFormat = _decimalFormat
    '        'ProbNotA.GivenA.DecimalFormat = _decimalFormat
    '        'ProbB.GivenA.DecimalFormat = _decimalFormat
    '        'ProbNotB.GivenA.DecimalFormat = _decimalFormat
    '        'ProbAandB.GivenA.DecimalFormat = _decimalFormat
    '        'ProbAandNotB.GivenA.DecimalFormat = _decimalFormat
    '        'ProbNotAandB.GivenA.DecimalFormat = _decimalFormat
    '        'ProbNotAandNotB.GivenA.DecimalFormat = _decimalFormat

    '        'ProbA.GivenNotA.DecimalFormat = _decimalFormat
    '        'ProbNotA.GivenNotA.DecimalFormat = _decimalFormat
    '        'ProbB.GivenNotA.DecimalFormat = _decimalFormat
    '        'ProbNotB.GivenNotA.DecimalFormat = _decimalFormat
    '        'ProbAandB.GivenNotA.DecimalFormat = _decimalFormat
    '        'ProbAandNotB.GivenNotA.DecimalFormat = _decimalFormat
    '        'ProbNotAandB.GivenNotA.DecimalFormat = _decimalFormat
    '        'ProbNotAandNotB.GivenNotA.DecimalFormat = _decimalFormat

    '        'ProbA.GivenB.DecimalFormat = _decimalFormat
    '        'ProbNotA.GivenB.DecimalFormat = _decimalFormat
    '        'ProbB.GivenB.DecimalFormat = _decimalFormat
    '        'ProbNotB.GivenB.DecimalFormat = _decimalFormat
    '        'ProbAandB.GivenB.DecimalFormat = _decimalFormat
    '        'ProbAandNotB.GivenB.DecimalFormat = _decimalFormat
    '        'ProbNotAandB.GivenB.DecimalFormat = _decimalFormat
    '        'ProbNotAandNotB.GivenB.DecimalFormat = _decimalFormat

    '        'ProbA.GivenNotB.DecimalFormat = _decimalFormat
    '        'ProbNotA.GivenNotB.DecimalFormat = _decimalFormat
    '        'ProbB.GivenNotB.DecimalFormat = _decimalFormat
    '        'ProbNotB.GivenNotB.DecimalFormat = _decimalFormat
    '        'ProbAandB.GivenNotB.DecimalFormat = _decimalFormat
    '        'ProbAandNotB.GivenNotB.DecimalFormat = _decimalFormat
    '        'ProbNotAandB.GivenNotB.DecimalFormat = _decimalFormat
    '        'ProbNotAandNotB.GivenNotB.DecimalFormat = _decimalFormat
    '    End Set
    'End Property

    'NOTE: This is now stored in Settings
    'Private _percentFormat As String = "" 'The format code used to display percent probabilities.
    'Property PercentFormat As String
    '    Get
    '        Return _percentFormat
    '    End Get
    '    Set(value As String)
    '        _percentFormat = value

    '        'ProbA.PercentFormat = _percentFormat
    '        'ProbNotA.PercentFormat = _percentFormat
    '        'ProbB.PercentFormat = _percentFormat
    '        'ProbNotB.PercentFormat = _percentFormat
    '        'ProbAandB.PercentFormat = _percentFormat
    '        'ProbAandNotB.PercentFormat = _percentFormat
    '        'ProbNotAandB.PercentFormat = _percentFormat
    '        'ProbNotAandNotB.PercentFormat = _percentFormat

    '        ProbA.UpdateLabels()
    '        ProbNotA.UpdateLabels()
    '        ProbB.UpdateLabels()
    '        ProbNotB.UpdateLabels()
    '        ProbAandB.UpdateLabels()
    '        ProbAandNotB.UpdateLabels()
    '        ProbNotAandB.UpdateLabels()
    '        ProbNotAandNotB.UpdateLabels()

    '        'The conditional Probability copies of the PercentFormat property are now updated when the unconditional version is changed.
    '        'ProbA.GivenA.PercentFormat = _percentFormat
    '        'ProbNotA.GivenA.PercentFormat = _percentFormat
    '        'ProbB.GivenA.PercentFormat = _percentFormat
    '        'ProbNotB.GivenA.PercentFormat = _percentFormat
    '        'ProbAandB.GivenA.PercentFormat = _percentFormat
    '        'ProbAandNotB.GivenA.PercentFormat = _percentFormat
    '        'ProbNotAandB.GivenA.PercentFormat = _percentFormat
    '        'ProbNotAandNotB.GivenA.PercentFormat = _percentFormat

    '        'ProbA.GivenNotA.PercentFormat = _percentFormat
    '        'ProbNotA.GivenNotA.PercentFormat = _percentFormat
    '        'ProbB.GivenNotA.PercentFormat = _percentFormat
    '        'ProbNotB.GivenNotA.PercentFormat = _percentFormat
    '        'ProbAandB.GivenNotA.PercentFormat = _percentFormat
    '        'ProbAandNotB.GivenNotA.PercentFormat = _percentFormat
    '        'ProbNotAandB.GivenNotA.PercentFormat = _percentFormat
    '        'ProbNotAandNotB.GivenNotA.PercentFormat = _percentFormat

    '        'ProbA.GivenB.PercentFormat = _percentFormat
    '        'ProbNotA.GivenB.PercentFormat = _percentFormat
    '        'ProbB.GivenB.PercentFormat = _percentFormat
    '        'ProbNotB.GivenB.PercentFormat = _percentFormat
    '        'ProbAandB.GivenB.PercentFormat = _percentFormat
    '        'ProbAandNotB.GivenB.PercentFormat = _percentFormat
    '        'ProbNotAandB.GivenB.PercentFormat = _percentFormat
    '        'ProbNotAandNotB.GivenB.PercentFormat = _percentFormat

    '        'ProbA.GivenNotB.PercentFormat = _percentFormat
    '        'ProbNotA.GivenNotB.PercentFormat = _percentFormat
    '        'ProbB.GivenNotB.PercentFormat = _percentFormat
    '        'ProbNotB.GivenNotB.PercentFormat = _percentFormat
    '        'ProbAandB.GivenNotB.PercentFormat = _percentFormat
    '        'ProbAandNotB.GivenNotB.PercentFormat = _percentFormat
    '        'ProbNotAandB.GivenNotB.PercentFormat = _percentFormat
    '        'ProbNotAandNotB.GivenNotB.PercentFormat = _percentFormat
    '    End Set
    'End Property

    'NOTE: This is now stored in Settings
    'Private _samplesFormat As String = "" 'The format code used to display the number of samples.
    'Property SamplesFormat As String
    '    Get
    '        Return _samplesFormat
    '    End Get
    '    Set(value As String)
    '        _samplesFormat = value

    '        SampsA.CountFormat = _samplesFormat
    '        SampsNotA.CountFormat = _samplesFormat
    '        SampsB.CountFormat = _samplesFormat
    '        SampsNotB.CountFormat = _samplesFormat
    '        SampsAandB.CountFormat = _samplesFormat
    '        SampsAandNotB.CountFormat = _samplesFormat
    '        SampsNotAandB.CountFormat = _samplesFormat
    '        SampsNotAandNotB.CountFormat = _samplesFormat

    '        'The conditional Probability copies of the SamplesFormat property are now updated when the unconditional version is changed.
    '        'SampsA.GivenA.CountFormat = _samplesFormat
    '        'SampsNotA.GivenA.CountFormat = _samplesFormat
    '        'SampsB.GivenA.CountFormat = _samplesFormat
    '        'SampsNotB.GivenA.CountFormat = _samplesFormat
    '        'SampsAandB.GivenA.CountFormat = _samplesFormat
    '        'SampsAandNotB.GivenA.CountFormat = _samplesFormat
    '        'SampsNotAandB.GivenA.CountFormat = _samplesFormat
    '        'SampsNotAandNotB.GivenA.CountFormat = _samplesFormat

    '        'SampsA.GivenNotA.CountFormat = _samplesFormat
    '        'SampsNotA.GivenNotA.CountFormat = _samplesFormat
    '        'SampsB.GivenNotA.CountFormat = _samplesFormat
    '        'SampsNotB.GivenNotA.CountFormat = _samplesFormat
    '        'SampsAandB.GivenNotA.CountFormat = _samplesFormat
    '        'SampsAandNotB.GivenNotA.CountFormat = _samplesFormat
    '        'SampsNotAandB.GivenNotA.CountFormat = _samplesFormat
    '        'SampsNotAandNotB.GivenNotA.CountFormat = _samplesFormat

    '        'SampsA.GivenB.CountFormat = _samplesFormat
    '        'SampsNotA.GivenB.CountFormat = _samplesFormat
    '        'SampsB.GivenB.CountFormat = _samplesFormat
    '        'SampsNotB.GivenB.CountFormat = _samplesFormat
    '        'SampsAandB.GivenB.CountFormat = _samplesFormat
    '        'SampsAandNotB.GivenB.CountFormat = _samplesFormat
    '        'SampsNotAandB.GivenB.CountFormat = _samplesFormat
    '        'SampsNotAandNotB.GivenB.CountFormat = _samplesFormat

    '        'SampsA.GivenNotB.CountFormat = _samplesFormat
    '        'SampsNotA.GivenNotB.CountFormat = _samplesFormat
    '        'SampsB.GivenNotB.CountFormat = _samplesFormat
    '        'SampsNotB.GivenNotB.CountFormat = _samplesFormat
    '        'SampsAandB.GivenNotB.CountFormat = _samplesFormat
    '        'SampsAandNotB.GivenNotB.CountFormat = _samplesFormat
    '        'SampsNotAandB.GivenNotB.CountFormat = _samplesFormat
    '        'SampsNotAandNotB.GivenNotB.CountFormat = _samplesFormat
    '    End Set
    'End Property

    'NOTE: The properties below have been replaced by SampleSize.
    'Private _sampleSizePrefix As String = "Sample Size = " 'The survey sample size for measuring probability as the number of samples.
    'Property SampleSizePrefix As String
    '    Get
    '        Return _sampleSizePrefix
    '    End Get
    '    Set(value As String)
    '        _sampleSizePrefix = value
    '        AnnotSampleSize.Text = _sampleSizePrefix & SampString(_sampleSize)
    '    End Set
    'End Property

    'Private _sampleSize As Integer = 10000 'The survey sample size for measuring probability as the number of samples.
    'Property SampleSize As Integer
    '    Get
    '        Return _sampleSize
    '    End Get
    '    Set(value As Integer)
    '        _sampleSize = value
    '        AnnotSampleSize.Text = _sampleSizePrefix & SampString(_sampleSize)
    '    End Set
    'End Property


    Public WithEvents SampleSize As New SampleCount

    Private _conditionalSampleSize As Double = 10000 'The sample size corresponding to the specified condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse). 
    'The type is double as the given event probabilities may have been rounded, resulting in a calculated non-integer conditional sample size.
    Property ConditionalSampleSize As Double
        Get
            Return _conditionalSampleSize
        End Get
        Set(value As Double)
            _conditionalSampleSize = value
            'AnnotConditionalSampleSize.Text = "Conditional Sample Size: " & Format(_conditionalSampleSize, SamplesFormat)
            AnnotConditionalSampleSize.Text = "Conditional Sample Size: " & Format(_conditionalSampleSize, Settings.SamplesFormat)
        End Set
    End Property


    Private _showProbabilities As Boolean = True 'If True, the probabilies are shown on the probability diagram.
    Property ShowProbabilities As Boolean
        Get
            Return _showProbabilities
        End Get
        Set(value As Boolean)
            _showProbabilities = value
        End Set
    End Property

    Private _showSampleCounts As Boolean = True 'If True, the sample count probability measure is shown on the probability diagram.
    Property ShowSampleCounts As Boolean
        Get
            Return _showSampleCounts
        End Get
        Set(value As Boolean)
            _showSampleCounts = value
        End Set
    End Property

    Public WithEvents EventA As New EventInfo 'Event A information
    Public WithEvents EventB As New EventInfo   'Event B information 

#End Region 'Bayes Model Information ----------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Bayes Diagram Properties" '================================================================================================================================================================

    Public Diagram As New clsDiagram


    'Event A and B information ------------------------------------------------------------------------------

    'Private _eventAandBFillColor As Color = Color.Lavender 'The fill color of the Venn diagram shape representing Event A and Event B.
    'Private _eventAandBFillColor As Color = Color.Plum 'The fill color of the Venn diagram shape representing Event A and Event B.
    'Private _eventAandBFillColor As Color = Color.Violet 'The fill color of the Venn diagram shape representing Event A and Event B.
    Private _eventAandBFillColor As Color = Color.Thistle 'The fill color of the Venn diagram shape representing Event A and Event B.
    Property EventAandBFillColor As Color
        Get
            Return _eventAandBFillColor
        End Get
        Set(value As Color)
            _eventAandBFillColor = value
        End Set
    End Property

    Public HighlightRegion As New clsRegion 'Highlight Regions
    Public ZeroProbRegion As New clsRegion 'Zero Probability Regions

#End Region 'Bayes Diagram Properties ---------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Annotation Properties" '=============================================================================================================================================================

    Dim myFontStyleBold As FontStyle = FontStyle.Regular Or FontStyle.Bold

    Public AnnotTitle As New clsLabel 'Bayes Diagram Title
    Public AnnotDescr As New clsLabel 'Bayes Diagram Description

    Public AnnotEventA As New clsLabel 'Bayes Diagram Event A Label, This stores different versions of the label for Unscaled, ScaleA, ScaleB and ScaleAB scaling of the Bayes diagram
    Public AnnotEventB As New clsLabel 'Bayes Diagram Event B Label. This stored different versions of the label for Unscaled, ScaleA, ScaleB and ScaleAB scaling of the Bayes diagram

    Public AnnotSampleSize As New clsLabel 'The sample size.
    Public AnnotConditionalSampleSize As New clsLabel 'The conditional sample size.


    'Condition label:
    'NOTE: This is now stored in Settings
    'Private _condition As String = "None" 'Condition used to display Probability Diagram catagories. (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    'Property Condition As String
    '    Get
    '        Return _condition
    '    End Get
    '    Set(value As String)
    '        _condition = value
    '        AnnotCondition.Condition = _condition 'AnnotCondition needs the Condition value to determine which version of the text and coordinates to return.
    '        CalcConditionalSampleSize() 'Recalculate the conditional sample size.

    '        'Thye Probabilites need the Condition value to determine which version of the text and coordinates to return.
    '        ProbA.Condition = _condition
    '        ProbNotA.Condition = _condition
    '        ProbB.Condition = _condition
    '        ProbNotB.Condition = _condition
    '        ProbAandB.Condition = _condition
    '        ProbAandNotB.Condition = _condition
    '        ProbNotAandB.Condition = _condition
    '        ProbNotAandNotB.Condition = _condition

    '        'The SampleCounts need the Condition value to determine which version of the text and coordinates to return.
    '        SampsA.Condition = _condition
    '        SampsNotA.Condition = _condition
    '        SampsB.Condition = _condition
    '        SampsNotB.Condition = _condition
    '        SampsAandB.Condition = _condition
    '        SampsAandNotB.Condition = _condition
    '        SampsNotAandB.Condition = _condition
    '        SampsNotAandNotB.Condition = _condition
    '    End Set
    'End Property

    Public WithEvents AnnotCondition As New clsAnnotCondition 'Stores the labels used to describe each condition.

    'NOTE: This is now stored in Settings
    'Private _scaling As String = "Unscaled" 'The scaling used to display the Bayes model (Unscaled, ScaleA, ScaleB, ScaleAB)
    ''Unscaled: Diagrammatic figure - not to scale.
    ''ScaleA: The Event A shape area is scaled relative to the Event B shape area.
    ''ScaleB: The Event B shape is scaled relative to the Event A shape area.
    ''ScaleAB: The Event A and Event B shape areas are scaled relative the their probabilities, where the total area of the diagram represents the probability of 1.
    'Property Scaling As String
    '    Get
    '        Return _scaling
    '    End Get
    '    Set(value As String)
    '        _scaling = value
    '        ProbA.Scaling = _scaling
    '        ProbB.Scaling = _scaling
    '        ProbNotA.Scaling = _scaling
    '        ProbNotB.Scaling = _scaling
    '        ProbAandB.Scaling = _scaling
    '        ProbAandNotB.Scaling = _scaling
    '        ProbNotAandB.Scaling = _scaling
    '        ProbNotAandNotB.Scaling = _scaling

    '        'The conditional Probability copies of the Scaling property are now updated when the unconditional version is changed.
    '        'ProbA.GivenA.Scaling = _scaling
    '        'ProbB.GivenA.Scaling = _scaling
    '        'ProbNotA.GivenA.Scaling = _scaling
    '        'ProbNotB.GivenA.Scaling = _scaling
    '        'ProbAandB.GivenA.Scaling = _scaling
    '        'ProbAandNotB.GivenA.Scaling = _scaling
    '        'ProbNotAandB.GivenA.Scaling = _scaling
    '        'ProbNotAandNotB.GivenA.Scaling = _scaling

    '        'ProbA.GivenNotA.Scaling = _scaling
    '        'ProbB.GivenNotA.Scaling = _scaling
    '        'ProbNotA.GivenNotA.Scaling = _scaling
    '        'ProbNotB.GivenNotA.Scaling = _scaling
    '        'ProbAandB.GivenNotA.Scaling = _scaling
    '        'ProbAandNotB.GivenNotA.Scaling = _scaling
    '        'ProbNotAandB.GivenNotA.Scaling = _scaling
    '        'ProbNotAandNotB.GivenNotA.Scaling = _scaling

    '        'ProbA.GivenB.Scaling = _scaling
    '        'ProbB.GivenB.Scaling = _scaling
    '        'ProbNotA.GivenB.Scaling = _scaling
    '        'ProbNotB.GivenB.Scaling = _scaling
    '        'ProbAandB.GivenB.Scaling = _scaling
    '        'ProbAandNotB.GivenB.Scaling = _scaling
    '        'ProbNotAandB.GivenB.Scaling = _scaling
    '        'ProbNotAandNotB.GivenB.Scaling = _scaling

    '        'ProbA.GivenNotB.Scaling = _scaling
    '        'ProbB.GivenNotB.Scaling = _scaling
    '        'ProbNotA.GivenNotB.Scaling = _scaling
    '        'ProbNotB.GivenNotB.Scaling = _scaling
    '        'ProbAandB.GivenNotB.Scaling = _scaling
    '        'ProbAandNotB.GivenNotB.Scaling = _scaling
    '        'ProbNotAandB.GivenNotB.Scaling = _scaling
    '        'ProbNotAandNotB.GivenNotB.Scaling = _scaling

    '        SampsA.Scaling = _scaling
    '        SampsB.Scaling = _scaling
    '        SampsNotA.Scaling = _scaling
    '        SampsNotB.Scaling = _scaling
    '        SampsAandB.Scaling = _scaling
    '        SampsAandNotB.Scaling = _scaling
    '        SampsNotAandB.Scaling = _scaling
    '        SampsNotAandNotB.Scaling = _scaling

    '        'The conditional SampleCount copies of the Scaling property are now updated when the unconditional version is changed.
    '        'SampsA.GivenA.Scaling = _scaling
    '        'SampsB.GivenA.Scaling = _scaling
    '        'SampsNotA.GivenA.Scaling = _scaling
    '        'SampsNotB.GivenA.Scaling = _scaling
    '        'SampsAandB.GivenA.Scaling = _scaling
    '        'SampsAandNotB.GivenA.Scaling = _scaling
    '        'SampsNotAandB.GivenA.Scaling = _scaling
    '        'SampsNotAandNotB.GivenA.Scaling = _scaling

    '        'SampsA.GivenNotA.Scaling = _scaling
    '        'SampsB.GivenNotA.Scaling = _scaling
    '        'SampsNotA.GivenNotA.Scaling = _scaling
    '        'SampsNotB.GivenNotA.Scaling = _scaling
    '        'SampsAandB.GivenNotA.Scaling = _scaling
    '        'SampsAandNotB.GivenNotA.Scaling = _scaling
    '        'SampsNotAandB.GivenNotA.Scaling = _scaling
    '        'SampsNotAandNotB.GivenNotA.Scaling = _scaling

    '        'SampsA.GivenB.Scaling = _scaling
    '        'SampsB.GivenB.Scaling = _scaling
    '        'SampsNotA.GivenB.Scaling = _scaling
    '        'SampsNotB.GivenB.Scaling = _scaling
    '        'SampsAandB.GivenB.Scaling = _scaling
    '        'SampsAandNotB.GivenB.Scaling = _scaling
    '        'SampsNotAandB.GivenB.Scaling = _scaling
    '        'SampsNotAandNotB.GivenB.Scaling = _scaling

    '        'SampsA.GivenNotB.Scaling = _scaling
    '        'SampsB.GivenNotB.Scaling = _scaling
    '        'SampsNotA.GivenNotB.Scaling = _scaling
    '        'SampsNotB.GivenNotB.Scaling = _scaling
    '        'SampsAandB.GivenNotB.Scaling = _scaling
    '        'SampsAandNotB.GivenNotB.Scaling = _scaling
    '        'SampsNotAandB.GivenNotB.Scaling = _scaling
    '        'SampsNotAandNotB.GivenNotB.Scaling = _scaling

    '    End Set
    'End Property

#End Region 'Annotation Properties ------------------------------------------------------------------------------------------------------------------------------------------------------------


#End Region 'Properties -----------------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Methods" '===========================================================================================================================================================================

    Public Sub New()
        'This method is run when an object based on this class is created.

        ''Assign the references the clsBayes:
        'ProbA.Bayes = Me
        'ProbB.Bayes = Me
        'ProbNotA.Bayes = Me
        'ProbNotB.Bayes = Me
        'ProbAandB.Bayes = Me
        'ProbAandNotB.Bayes = Me
        'ProbNotAandB.Bayes = Me
        'ProbNotAandNotB.Bayes = Me

        'SampsA.Bayes = Me
        'SampsB.Bayes = Me
        'SampsNotA.Bayes = Me
        'SampsNotB.Bayes = Me
        'SampsAandB.Bayes = Me
        'SampsAandNotB.Bayes = Me
        'SampsNotAandB.Bayes = Me
        'SampsNotAandNotB.Bayes = Me

        'ProbA.Value = 0.1
        'ProbB.Value = 0.11
        'ProbAandB.Value = 0.05
        'SampleSize.Value = 10000


        'Assign the references to the Settings:

        AnnotTitle.Settings = Settings
        AnnotDescr.Settings = Settings
        AnnotEventA.Settings = Settings
        AnnotEventB.Settings = Settings
        AnnotSampleSize.Settings = Settings
        AnnotConditionalSampleSize.Settings = Settings

        EventA.Settings = Settings
        EventB.Settings = Settings

        ProbA.Settings = Settings
        ProbA.ApplySettings()
        ProbNotA.Settings = Settings
        ProbNotA.ApplySettings()
        ProbB.Settings = Settings
        ProbB.ApplySettings()
        ProbNotB.Settings = Settings
        ProbNotB.ApplySettings()
        ProbAandB.Settings = Settings
        ProbAandB.ApplySettings()
        ProbAandNotB.Settings = Settings
        ProbAandNotB.ApplySettings()
        ProbNotAandB.Settings = Settings
        ProbNotAandB.ApplySettings()
        ProbNotAandNotB.Settings = Settings
        ProbNotAandNotB.ApplySettings()

        SampsA.Settings = Settings
        SampsA.ApplySettings()
        SampsB.Settings = Settings
        SampsB.ApplySettings()
        SampsNotA.Settings = Settings
        SampsNotA.ApplySettings()
        SampsNotB.Settings = Settings
        SampsNotB.ApplySettings()
        SampsAandB.Settings = Settings
        SampsAandB.ApplySettings()
        SampsAandNotB.Settings = Settings
        SampsAandNotB.ApplySettings()
        SampsNotAandB.Settings = Settings
        SampsNotAandB.ApplySettings()
        SampsNotAandNotB.Settings = Settings
        SampsNotAandNotB.ApplySettings()

        SampleSize.Settings = Settings
        SampleSize.ApplySettings()

        Performance.Settings = Settings

        ProbA.Value = 0.1
        IncrementRanksAbove(ProbA.Rank)
        ProbA.Rank = 1

        ProbB.Value = 0.11
        IncrementRanksAbove(ProbB.Rank)
        ProbB.Rank = 1

        ProbAandB.Value = 0.05
        IncrementRanksAbove(ProbAandB.Rank)
        ProbAandB.Rank = 1

        SampleSize.Value = 10000
        IncrementRanksAbove(SampleSize.Rank)
        SampleSize.Rank = 1

        Clear()
        DefaultProbPrefixes()  'Set the default probability prefixes.
        DefaultSamplePrefixes() 'Set the default sample count prefixes.
        DefaultAnnotColors()

        'EventAName = "Event A"
        'AnnotEventA.Unscaled.Color = Color.Red
        'AnnotEventA.ScaleA.Color = Color.Red
        'AnnotEventA.ScaleB.Color = Color.Red
        'AnnotEventA.ScaleAB.Color = Color.Red

        'EventBName = "Event B"
        'AnnotEventB.Unscaled.Color = Color.Blue
        'AnnotEventB.ScaleA.Color = Color.Blue
        'AnnotEventB.ScaleB.Color = Color.Blue
        'AnnotEventB.ScaleAB.Color = Color.Blue

        Label = "Bayes Model"

        'ProbA.Value = 0.1
        'ProbB.Value = 0.11
        'ProbAandB.Value = 0.05

        DefaultProbAnnotPosn()
        'SetCountFormat("N2") 'Thousands separator and 2 decimal places.
        Settings.SamplesFormat = "N2"
        'SetDecimalFormat("F3") '3 decimal places.
        'DecimalFormat = "F3"
        Settings.DecimalFormat = "F3"
        'SetPercentFormat("F2") '2 decimal places.
        'PercentFormat = "F2"
        Settings.PercentFormat = "F2"

        'Condition = "None"
        Settings.Condition = "None"
        AnnotCondition.Prefix = "Condition: "
        AnnotCondition.None.Text = "None"
        AnnotCondition.EventATrue.Text = "Event A True"
        AnnotCondition.EventAFalse.Text = "Event A False"
        AnnotCondition.EventBTrue.Text = "Event B True"
        AnnotCondition.EventBFalse.Text = "Event B False"

        HighlightRegion.Color = Color.LightGreen
        ZeroProbRegion.Color = Color.White

    End Sub

    'Public Function BayesToXDoc() As System.Xml.Linq.XDocument
    '    'Return an XDocument containing the Bayes model.

    '    Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '               <!---->
    '               <!--Bayes Model File-->
    '               <BayesModel>
    '                   <Name><%= Name %></Name>
    '                   <Label><%= Label %></Label>
    '                   <Description><%= Description %></Description>
    '                   <AllOutcomesColor><%= AllOutcomesColor.ToArgb.ToString %></AllOutcomesColor>
    '                   <InputInfoType><%= InputInfoType %></InputInfoType>
    '                   <ProbabilityMeasure><%= ProbabilityMeasure %></ProbabilityMeasure>
    '                   <DecimalFormat><%= DecimalFormat %></DecimalFormat>
    '                   <PercentFormat><%= PercentFormat %></PercentFormat>
    '                   <SamplesFormat><%= SamplesFormat %></SamplesFormat>
    '                   <SampleSize><%= SampleSize %></SampleSize>
    '                   <ShowProbabilies><%= ShowProbabilities %></ShowProbabilies>
    '                   <ShowSampleCount><%= ShowSampleCount %></ShowSampleCount>
    '                   <EventA>
    '                       <Name><%= EventAName %></Name>
    '                       <Description><%= EventADescr %></Description>
    '                       <Probability><%= EventAProb %></Probability>
    '                       <Color><%= EventAColor.ToArgb.ToString %></Color>
    '                       <Shape><%= EventAShape %></Shape>
    '                   </EventA>
    '                   <EventB>
    '                       <Name><%= EventBName %></Name>
    '                       <Description><%= EventBDescr %></Description>
    '                       <Probability><%= EventBProb %></Probability>
    '                       <Color><%= EventBColor.ToArgb.ToString %></Color>
    '                       <Shape><%= EventBShape %></Shape>
    '                   </EventB>
    '                   <Probability>
    '                       <AandB><%= ProbAandB %></AandB>
    '                       <BgivenA><%= ProbBgivenA %></BgivenA>
    '                       <BgivenNotA><%= ProbBgivenNotA %></BgivenNotA>
    '                       <AgivenB><%= ProbAgivenB %></AgivenB>
    '                   </Probability>
    '               </BayesModel>

    '    '              <ShowDecimalProbability><%= ShowDecimalProbability %></ShowDecimalProbability>
    '    '              <ShowPercentProbability><%= ShowPercentProbability %></ShowPercentProbability>
    '    Return XDoc
    'End Function

    Private Sub ShowModelInfo()
        'Show the Bayes model information.

        RaiseEvent Message("Bayes model information: -------------------------------------" & vbCrLf)
        RaiseEvent Message("Model name: " & Name & vbCrLf)
        RaiseEvent Message("Label: " & Label & vbCrLf)
        RaiseEvent Message("Description: " & Description & vbCrLf)
        RaiseEvent Message("Notes: " & Notes & vbCrLf)
        RaiseEvent Message("File name: " & FileName & vbCrLf)
        RaiseEvent Message("Modified: " & Modified & vbCrLf)

    End Sub

    'Public Function BayesToXDoc() As System.Xml.Linq.XDocument
    '    'Return an XDocument containing the Bayes model.

    '    Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '               <!---->
    '               <!--Bayes Model File-->
    '               <BayesModel>
    '                   <Name><%= Name %></Name>
    '                   <Label><%= Label %></Label>
    '                   <Description><%= Description %></Description>
    '                   <Notes><%= Notes %></Notes>
    '                   <InputInfoType><%= InputInfoType %></InputInfoType>
    '                   <ProbabilityMeasure><%= ProbabilityMeasure %></ProbabilityMeasure>
    '                   <DecimalFormat><%= DecimalFormat %></DecimalFormat>
    '                   <PercentFormat><%= PercentFormat %></PercentFormat>
    '                   <SamplesFormat><%= SamplesFormat %></SamplesFormat>
    '                   <SampleSize><%= SampleSize %></SampleSize>
    '                   <ShowProbabilities><%= ShowProbabilities %></ShowProbabilities>
    '                   <ShowSampleCounts><%= ShowSampleCounts %></ShowSampleCounts>
    '                   <EventA>
    '                       <Name><%= EventAName %></Name>
    '                       <Description><%= EventADescr %></Description>
    '                       <NotName><%= EventNotAName %></NotName>
    '                   </EventA>
    '                   <EventB>
    '                       <Name><%= EventBName %></Name>
    '                       <Description><%= EventBDescr %></Description>
    '                       <NotName><%= EventNotBName %></NotName>
    '                   </EventB>
    '                   <Probability>
    '                       <AValue><%= ProbA.Value %></AValue>
    '                       <AStatus><%= ProbA.Status %></AStatus>
    '                       <ARank><%= ProbA.Rank %></ARank>
    '                       <NotAValue><%= ProbNotA.Value %></NotAValue>
    '                       <NotAStatus><%= ProbNotA.Status %></NotAStatus>
    '                       <NotARank><%= ProbNotA.Rank %></NotARank>
    '                       <BValue><%= ProbB.Value %></BValue>
    '                       <BStatus><%= ProbB.Status %></BStatus>
    '                       <BRank><%= ProbB.Rank %></BRank>
    '                       <NotBValue><%= ProbNotB.Value %></NotBValue>
    '                       <NotBStatus><%= ProbNotB.Status %></NotBStatus>
    '                       <NotBRank><%= ProbNotB.Rank %></NotBRank>
    '                       <AandBValue><%= ProbAandB.Value %></AandBValue>
    '                       <AandBStatus><%= ProbAandB.Status %></AandBStatus>
    '                       <AandBRank><%= ProbAandB.Rank %></AandBRank>
    '                       <AandNotBValue><%= ProbAandNotB.Value %></AandNotBValue>
    '                       <AandNotBStatus><%= ProbAandNotB.Status %></AandNotBStatus>
    '                       <AandNotBRank><%= ProbAandNotB.Rank %></AandNotBRank>
    '                       <NotAandBValue><%= ProbNotAandB.Value %></NotAandBValue>
    '                       <NotAandBStatus><%= ProbNotAandB.Status %></NotAandBStatus>
    '                       <NotAandBRank><%= ProbNotAandB.Rank %></NotAandBRank>
    '                       <NotAandNotBValue><%= ProbNotAandNotB.Value %></NotAandNotBValue>
    '                       <NotAandNotBStatus><%= ProbNotAandNotB.Status %></NotAandNotBStatus>
    '                       <NotAandNotBRank><%= ProbNotAandNotB.Rank %></NotAandNotBRank>
    '                       <GivenA>
    '                           <AValue><%= ProbA.GivenA.Value %></AValue>
    '                           <AStatus><%= ProbA.GivenA.Status %></AStatus>
    '                           <ARank><%= ProbA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= ProbNotA.GivenA.Value %></NotAValue>
    '                           <NotAStatus><%= ProbNotA.GivenA.Status %></NotAStatus>
    '                           <NotARank><%= ProbNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= ProbB.GivenA.Value %></BValue>
    '                           <BStatus><%= ProbB.GivenA.Status %></BStatus>
    '                           <BRank><%= ProbB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= ProbNotB.GivenA.Value %></NotBValue>
    '                           <NotBStatus><%= ProbNotB.GivenA.Status %></NotBStatus>
    '                           <NotBRank><%= ProbNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= ProbAandB.GivenA.Value %></AandBValue>
    '                           <AandBStatus><%= ProbAandB.GivenA.Status %></AandBStatus>
    '                           <AandBRank><%= ProbAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= ProbAandNotB.GivenA.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= ProbAandNotB.GivenA.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= ProbAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= ProbNotAandB.GivenA.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= ProbNotAandB.GivenA.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= ProbNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= ProbNotAandNotB.GivenA.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= ProbNotAandNotB.GivenA.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= ProbNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenA>
    '                       <GivenNotA>
    '                           <AValue><%= ProbA.GivenNotA.Value %></AValue>
    '                           <AStatus><%= ProbA.GivenNotA.Status %></AStatus>
    '                           <ARank><%= ProbA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= ProbNotA.GivenNotA.Value %></NotAValue>
    '                           <NotAStatus><%= ProbNotA.GivenNotA.Status %></NotAStatus>
    '                           <NotARank><%= ProbNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= ProbB.GivenNotA.Value %></BValue>
    '                           <BStatus><%= ProbB.GivenNotA.Status %></BStatus>
    '                           <BRank><%= ProbB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= ProbNotB.GivenNotA.Value %></NotBValue>
    '                           <NotBStatus><%= ProbNotB.GivenNotA.Status %></NotBStatus>
    '                           <NotBRank><%= ProbNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= ProbAandB.GivenNotA.Value %></AandBValue>
    '                           <AandBStatus><%= ProbAandB.GivenNotA.Status %></AandBStatus>
    '                           <AandBRank><%= ProbAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= ProbAandNotB.GivenNotA.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= ProbAandNotB.GivenNotA.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= ProbAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= ProbNotAandB.GivenNotA.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= ProbNotAandB.GivenNotA.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= ProbNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= ProbNotAandNotB.GivenNotA.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= ProbNotAandNotB.GivenNotA.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= ProbNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenNotA>
    '                       <GivenB>
    '                           <AValue><%= ProbA.GivenB.Value %></AValue>
    '                           <AStatus><%= ProbA.GivenB.Status %></AStatus>
    '                           <ARank><%= ProbA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= ProbNotA.GivenB.Value %></NotAValue>
    '                           <NotAStatus><%= ProbNotA.GivenB.Status %></NotAStatus>
    '                           <NotARank><%= ProbNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= ProbB.GivenB.Value %></BValue>
    '                           <BStatus><%= ProbB.GivenB.Status %></BStatus>
    '                           <BRank><%= ProbB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= ProbNotB.GivenB.Value %></NotBValue>
    '                           <NotBStatus><%= ProbNotB.GivenB.Status %></NotBStatus>
    '                           <NotBRank><%= ProbNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= ProbAandB.GivenB.Value %></AandBValue>
    '                           <AandBStatus><%= ProbAandB.GivenB.Status %></AandBStatus>
    '                           <AandBRank><%= ProbAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= ProbAandNotB.GivenB.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= ProbAandNotB.GivenB.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= ProbAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= ProbNotAandB.GivenB.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= ProbNotAandB.GivenB.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= ProbNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= ProbNotAandNotB.GivenB.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= ProbNotAandNotB.GivenB.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= ProbNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenB>
    '                       <GivenNotB>
    '                           <AValue><%= ProbA.GivenNotB.Value %></AValue>
    '                           <AStatus><%= ProbA.GivenNotB.Status %></AStatus>
    '                           <ARank><%= ProbA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= ProbNotA.GivenNotB.Value %></NotAValue>
    '                           <NotAStatus><%= ProbNotA.GivenNotB.Status %></NotAStatus>
    '                           <NotARank><%= ProbNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= ProbB.GivenNotB.Value %></BValue>
    '                           <BStatus><%= ProbB.GivenNotB.Status %></BStatus>
    '                           <BRank><%= ProbB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= ProbNotB.GivenNotB.Value %></NotBValue>
    '                           <NotBStatus><%= ProbNotB.GivenNotB.Status %></NotBStatus>
    '                           <NotBRank><%= ProbNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= ProbAandB.GivenNotB.Value %></AandBValue>
    '                           <AandBStatus><%= ProbAandB.GivenNotB.Status %></AandBStatus>
    '                           <AandBRank><%= ProbAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= ProbAandNotB.GivenNotB.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= ProbAandNotB.GivenNotB.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= ProbAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= ProbNotAandB.GivenNotB.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= ProbNotAandB.GivenNotB.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= ProbNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= ProbNotAandNotB.GivenNotB.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= ProbNotAandNotB.GivenNotB.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= ProbNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenNotB>
    '                   </Probability>
    '                   <SampleCount>
    '                       <AValue><%= SampsA.Value %></AValue>
    '                       <AStatus><%= SampsA.Status %></AStatus>
    '                       <ARank><%= SampsA.Rank %></ARank>
    '                       <NotAValue><%= SampsNotA.Value %></NotAValue>
    '                       <NotAStatus><%= SampsNotA.Status %></NotAStatus>
    '                       <NotARank><%= SampsNotA.Rank %></NotARank>
    '                       <BValue><%= SampsB.Value %></BValue>
    '                       <BStatus><%= SampsB.Status %></BStatus>
    '                       <BRank><%= SampsB.Rank %></BRank>
    '                       <NotBValue><%= SampsNotB.Value %></NotBValue>
    '                       <NotBStatus><%= SampsNotB.Status %></NotBStatus>
    '                       <NotBRank><%= SampsNotB.Rank %></NotBRank>
    '                       <AandBValue><%= SampsAandB.Value %></AandBValue>
    '                       <AandBStatus><%= SampsAandB.Status %></AandBStatus>
    '                       <AandBRank><%= SampsAandB.Rank %></AandBRank>
    '                       <AandNotBValue><%= SampsAandNotB.Value %></AandNotBValue>
    '                       <AandNotBStatus><%= SampsAandNotB.Status %></AandNotBStatus>
    '                       <AandNotBRank><%= SampsAandNotB.Rank %></AandNotBRank>
    '                       <NotAandBValue><%= SampsNotAandB.Value %></NotAandBValue>
    '                       <NotAandBStatus><%= SampsNotAandB.Status %></NotAandBStatus>
    '                       <NotAandBRank><%= SampsNotAandB.Rank %></NotAandBRank>
    '                       <NotAandNotBValue><%= SampsNotAandNotB.Value %></NotAandNotBValue>
    '                       <NotAandNotBStatus><%= SampsNotAandNotB.Status %></NotAandNotBStatus>
    '                       <NotAandNotBRank><%= SampsNotAandNotB.Rank %></NotAandNotBRank>
    '                       <GivenA>
    '                           <AValue><%= SampsA.GivenA.Value %></AValue>
    '                           <AStatus><%= SampsA.GivenA.Status %></AStatus>
    '                           <ARank><%= SampsA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= SampsNotA.GivenA.Value %></NotAValue>
    '                           <NotAStatus><%= SampsNotA.GivenA.Status %></NotAStatus>
    '                           <NotARank><%= SampsNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= SampsB.GivenA.Value %></BValue>
    '                           <BStatus><%= SampsB.GivenA.Status %></BStatus>
    '                           <BRank><%= SampsB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= SampsNotB.GivenA.Value %></NotBValue>
    '                           <NotBStatus><%= SampsNotB.GivenA.Status %></NotBStatus>
    '                           <NotBRank><%= SampsNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= SampsAandB.GivenA.Value %></AandBValue>
    '                           <AandBStatus><%= SampsAandB.GivenA.Status %></AandBStatus>
    '                           <AandBRank><%= SampsAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= SampsAandNotB.GivenA.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= SampsAandNotB.GivenA.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= SampsAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= SampsNotAandB.GivenA.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= SampsNotAandB.GivenA.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= SampsNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= SampsNotAandNotB.GivenA.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= SampsNotAandNotB.GivenA.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= SampsNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenA>
    '                       <GivenNotA>
    '                           <AValue><%= SampsA.GivenNotA.Value %></AValue>
    '                           <AStatus><%= SampsA.GivenNotA.Status %></AStatus>
    '                           <ARank><%= SampsA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= SampsNotA.GivenNotA.Value %></NotAValue>
    '                           <NotAStatus><%= SampsNotA.GivenNotA.Status %></NotAStatus>
    '                           <NotARank><%= SampsNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= SampsB.GivenNotA.Value %></BValue>
    '                           <BStatus><%= SampsB.GivenNotA.Status %></BStatus>
    '                           <BRank><%= SampsB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= SampsNotB.GivenNotA.Value %></NotBValue>
    '                           <NotBStatus><%= SampsNotB.GivenNotA.Status %></NotBStatus>
    '                           <NotBRank><%= SampsNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= SampsAandB.GivenNotA.Value %></AandBValue>
    '                           <AandBStatus><%= SampsAandB.GivenNotA.Status %></AandBStatus>
    '                           <AandBRank><%= SampsAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= SampsAandNotB.GivenNotA.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= SampsAandNotB.GivenNotA.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= SampsAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= SampsNotAandB.GivenNotA.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= SampsNotAandB.GivenNotA.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= SampsNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= SampsNotAandNotB.GivenNotA.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= SampsNotAandNotB.GivenNotA.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= SampsNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenNotA>
    '                       <GivenB>
    '                           <AValue><%= SampsA.GivenB.Value %></AValue>
    '                           <AStatus><%= SampsA.GivenB.Status %></AStatus>
    '                           <ARank><%= SampsA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= SampsNotA.GivenB.Value %></NotAValue>
    '                           <NotAStatus><%= SampsNotA.GivenB.Status %></NotAStatus>
    '                           <NotARank><%= SampsNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= SampsB.GivenB.Value %></BValue>
    '                           <BStatus><%= SampsB.GivenB.Status %></BStatus>
    '                           <BRank><%= SampsB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= SampsNotB.GivenB.Value %></NotBValue>
    '                           <NotBStatus><%= SampsNotB.GivenB.Status %></NotBStatus>
    '                           <NotBRank><%= SampsNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= SampsAandB.GivenB.Value %></AandBValue>
    '                           <AandBStatus><%= SampsAandB.GivenB.Status %></AandBStatus>
    '                           <AandBRank><%= SampsAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= SampsAandNotB.GivenB.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= SampsAandNotB.GivenB.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= SampsAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= SampsNotAandB.GivenB.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= SampsNotAandB.GivenB.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= SampsNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= SampsNotAandNotB.GivenB.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= SampsNotAandNotB.GivenB.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= SampsNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenB>
    '                       <GivenNotB>
    '                           <AValue><%= SampsA.GivenNotB.Value %></AValue>
    '                           <AStatus><%= SampsA.GivenNotB.Status %></AStatus>
    '                           <ARank><%= SampsA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= SampsNotA.GivenNotB.Value %></NotAValue>
    '                           <NotAStatus><%= SampsNotA.GivenNotB.Status %></NotAStatus>
    '                           <NotARank><%= SampsNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= SampsB.GivenNotB.Value %></BValue>
    '                           <BStatus><%= SampsB.GivenNotB.Status %></BStatus>
    '                           <BRank><%= SampsB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= SampsNotB.GivenNotB.Value %></NotBValue>
    '                           <NotBStatus><%= SampsNotB.GivenNotB.Status %></NotBStatus>
    '                           <NotBRank><%= SampsNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= SampsAandB.GivenNotB.Value %></AandBValue>
    '                           <AandBStatus><%= SampsAandB.GivenNotB.Status %></AandBStatus>
    '                           <AandBRank><%= SampsAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= SampsAandNotB.GivenNotB.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= SampsAandNotB.GivenNotB.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= SampsAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= SampsNotAandB.GivenNotB.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= SampsNotAandB.GivenNotB.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= SampsNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= SampsNotAandNotB.GivenNotB.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= SampsNotAandNotB.GivenNotB.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= SampsNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenNotB>
    '                   </SampleCount>
    '                   <Diagram>
    '                       <LineColor><%= LineColor.ToArgb.ToString %></LineColor>
    '                       <LineThickness><%= LineThickness %></LineThickness>
    '                       <BoldLineThickness><%= BoldLineThickness %></BoldLineThickness>
    '                       <BoldLine><%= BoldLine %></BoldLine>
    '                       <FillColor><%= FillColor.ToArgb.ToString %></FillColor>
    '                       <Height><%= Height %></Height>
    '                       <Width><%= Width %></Width>
    '                       <EventA>
    '                           <LineColor><%= EventALineColor.ToArgb.ToString %></LineColor>
    '                           <FillColor><%= EventAFillColor.ToArgb.ToString %></FillColor>
    '                           <Shape><%= EventAShape %></Shape>
    '                           <LineThickness><%= EventALineThickness %></LineThickness>
    '                           <BoldLineThickness><%= EventABoldLineThickness %></BoldLineThickness>
    '                           <BoldLine><%= EventABoldLine %></BoldLine>
    '                           <XMin><%= EventAXMin %></XMin>
    '                           <XMax><%= EventAXMax %></XMax>
    '                           <YMin><%= EventAYMin %></YMin>
    '                           <YMax><%= EventAYMax %></YMax>
    '                       </EventA>
    '                       <EventB>
    '                           <LineColor><%= EventBLineColor.ToArgb.ToString %></LineColor>
    '                           <FillColor><%= EventBFillColor.ToArgb.ToString %></FillColor>
    '                           <Shape><%= EventBShape %></Shape>
    '                           <LineThickness><%= EventBLineThickness %></LineThickness>
    '                           <BoldLineThickness><%= EventBBoldLineThickness %></BoldLineThickness>
    '                           <BoldLine><%= EventBBoldLine %></BoldLine>
    '                           <XMin><%= EventBXMin %></XMin>
    '                           <XMax><%= EventBXMax %></XMax>
    '                           <YMin><%= EventBYMin %></YMin>
    '                           <YMax><%= EventBYMax %></YMax>
    '                       </EventB>
    '                       <EventAandBFillColor><%= EventAandBFillColor.ToArgb.ToString %></EventAandBFillColor>
    '                       <HighLight>
    '                           <RegionColor><%= HighlightRegionColor.ToArgb.ToString %></RegionColor>
    '                           <A><%= HighlightA %></A>
    '                           <NotA><%= HighlightNotA %></NotA>
    '                           <B><%= HighlightB %></B>
    '                           <NotB><%= HighlightNotB %></NotB>
    '                           <AandB><%= HighlightAandB %></AandB>
    '                           <AandNotB><%= HighlightAandNotB %></AandNotB>
    '                           <NotAandB><%= HighlightNotAandB %></NotAandB>
    '                           <NotAandNotB><%= HighlightNotAandNotB %></NotAandNotB>
    '                       </HighLight>
    '                       <ZeroProbability>
    '                           <RegionColor><%= ZeroProbRegionColor.ToArgb.ToString %></RegionColor>
    '                           <A><%= ZeroProbA %></A>
    '                           <NotA><%= ZeroProbNotA %></NotA>
    '                           <B><%= ZeroProbB %></B>
    '                           <NotB><%= ZeroProbNotB %></NotB>
    '                           <AandB><%= ZeroProbAandB %></AandB>
    '                           <AandNotB><%= ZeroProbAandNotB %></AandNotB>
    '                           <NotAandB><%= ZeroProbNotAandB %></NotAandB>
    '                           <NotAandNotB><%= ZeroProbNotAandNotB %></NotAandNotB>
    '                       </ZeroProbability>
    '                       <Annotation>
    '                           <Title>
    '                               <Text><%= AnnotTitle.Text %></Text>
    '                               <Font>
    '                                   <Name><%= AnnotTitle.Font.Name %></Name>
    '                                   <Size><%= AnnotTitle.Font.Size %></Size>
    '                                   <Bold><%= AnnotTitle.Font.Bold %></Bold>
    '                                   <Italic><%= AnnotTitle.Font.Italic %></Italic>
    '                                   <Underline><%= AnnotTitle.Font.Underline %></Underline>
    '                                   <Strikeout><%= AnnotTitle.Font.Strikeout %></Strikeout>
    '                               </Font>
    '                               <Color><%= AnnotTitle.Color.ToArgb.ToString %></Color>
    '                               <X><%= AnnotTitle.X %></X>
    '                               <Y><%= AnnotTitle.Y %></Y>
    '                           </Title>
    '                           <Description>
    '                               <Text><%= AnnotDescr.Text %></Text>
    '                               <Font>
    '                                   <Name><%= AnnotDescr.Font.Name %></Name>
    '                                   <Size><%= AnnotDescr.Font.Size %></Size>
    '                                   <Bold><%= AnnotDescr.Font.Bold %></Bold>
    '                                   <Italic><%= AnnotDescr.Font.Italic %></Italic>
    '                                   <Underline><%= AnnotDescr.Font.Underline %></Underline>
    '                                   <Strikeout><%= AnnotDescr.Font.Strikeout %></Strikeout>
    '                               </Font>
    '                               <Color><%= AnnotDescr.Color.ToArgb.ToString %></Color>
    '                               <X><%= AnnotDescr.X %></X>
    '                               <Y><%= AnnotDescr.Y %></Y>
    '                           </Description>
    '                           <EventA>
    '                               <Unscaled>
    '                                   <Text><%= AnnotEventA.Unscaled.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotEventA.Unscaled.Font.Name %></Name>
    '                                       <Size><%= AnnotEventA.Unscaled.Font.Size %></Size>
    '                                       <Bold><%= AnnotEventA.Unscaled.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotEventA.Unscaled.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotEventA.Unscaled.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotEventA.Unscaled.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotEventA.Unscaled.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotEventA.Unscaled.X %></X>
    '                                   <Y><%= AnnotEventA.Unscaled.Y %></Y>
    '                               </Unscaled>
    '                               <ScaleA>
    '                                   <Text><%= AnnotEventA.ScaleA.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotEventA.ScaleA.Font.Name %></Name>
    '                                       <Size><%= AnnotEventA.ScaleA.Font.Size %></Size>
    '                                       <Bold><%= AnnotEventA.ScaleA.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotEventA.ScaleA.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotEventA.ScaleA.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotEventA.ScaleA.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotEventA.ScaleA.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotEventA.ScaleA.X %></X>
    '                                   <Y><%= AnnotEventA.ScaleA.Y %></Y>
    '                               </ScaleA>
    '                               <ScaleB>
    '                                   <Text><%= AnnotEventA.ScaleB.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotEventA.ScaleB.Font.Name %></Name>
    '                                       <Size><%= AnnotEventA.ScaleB.Font.Size %></Size>
    '                                       <Bold><%= AnnotEventA.ScaleB.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotEventA.ScaleB.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotEventA.ScaleB.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotEventA.ScaleB.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotEventA.ScaleB.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotEventA.ScaleB.X %></X>
    '                                   <Y><%= AnnotEventA.ScaleB.Y %></Y>
    '                               </ScaleB>
    '                               <ScaleAB>
    '                                   <Text><%= AnnotEventA.ScaleAB.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotEventA.ScaleAB.Font.Name %></Name>
    '                                       <Size><%= AnnotEventA.ScaleAB.Font.Size %></Size>
    '                                       <Bold><%= AnnotEventA.ScaleAB.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotEventA.ScaleAB.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotEventA.ScaleAB.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotEventA.ScaleAB.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotEventA.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotEventA.ScaleAB.X %></X>
    '                                   <Y><%= AnnotEventA.ScaleAB.Y %></Y>
    '                               </ScaleAB>
    '                           </EventA>
    '                           <EventB>
    '                               <Unscaled>
    '                                   <Text><%= AnnotEventB.Unscaled.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotEventB.Unscaled.Font.Name %></Name>
    '                                       <Size><%= AnnotEventB.Unscaled.Font.Size %></Size>
    '                                       <Bold><%= AnnotEventB.Unscaled.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotEventB.Unscaled.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotEventB.Unscaled.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotEventB.Unscaled.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotEventB.Unscaled.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotEventB.Unscaled.X %></X>
    '                                   <Y><%= AnnotEventB.Unscaled.Y %></Y>
    '                               </Unscaled>
    '                               <ScaleA>
    '                                   <Text><%= AnnotEventB.ScaleA.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotEventB.ScaleA.Font.Name %></Name>
    '                                       <Size><%= AnnotEventB.ScaleA.Font.Size %></Size>
    '                                       <Bold><%= AnnotEventB.ScaleA.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotEventB.ScaleA.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotEventB.ScaleA.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotEventB.ScaleA.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotEventB.ScaleA.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotEventB.ScaleA.X %></X>
    '                                   <Y><%= AnnotEventB.ScaleA.Y %></Y>
    '                               </ScaleA>
    '                               <ScaleB>
    '                                   <Text><%= AnnotEventB.ScaleB.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotEventB.ScaleB.Font.Name %></Name>
    '                                       <Size><%= AnnotEventB.ScaleB.Font.Size %></Size>
    '                                       <Bold><%= AnnotEventB.ScaleB.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotEventB.ScaleB.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotEventB.ScaleB.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotEventB.ScaleB.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotEventB.ScaleB.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotEventB.ScaleB.X %></X>
    '                                   <Y><%= AnnotEventB.ScaleB.Y %></Y>
    '                               </ScaleB>
    '                               <ScaleAB>
    '                                   <Text><%= AnnotEventB.ScaleAB.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotEventB.ScaleAB.Font.Name %></Name>
    '                                       <Size><%= AnnotEventB.ScaleAB.Font.Size %></Size>
    '                                       <Bold><%= AnnotEventB.ScaleAB.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotEventB.ScaleAB.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotEventB.ScaleAB.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotEventB.ScaleAB.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotEventB.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotEventB.ScaleAB.X %></X>
    '                                   <Y><%= AnnotEventB.ScaleAB.Y %></Y>
    '                               </ScaleAB>
    '                           </EventB>
    '                           <Probability>
    '                               <A>
    '                                   <Unscaled>
    '                                       <Text><%= ProbA.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbA.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= ProbA.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= ProbA.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= ProbA.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= ProbA.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbA.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbA.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbA.Label.Unscaled.X %></X>
    '                                       <Y><%= ProbA.Label.Unscaled.Y %></Y>
    '                                       <Show><%= ProbA.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= ProbA.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbA.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= ProbA.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= ProbA.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= ProbA.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= ProbA.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbA.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbA.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbA.Label.ScaleA.X %></X>
    '                                       <Y><%= ProbA.Label.ScaleA.Y %></Y>
    '                                       <Show><%= ProbA.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= ProbA.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbA.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= ProbA.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= ProbA.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbA.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbA.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbA.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbA.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbA.Label.ScaleB.X %></X>
    '                                       <Y><%= ProbA.Label.ScaleB.Y %></Y>
    '                                       <Show><%= ProbA.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= ProbA.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbA.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= ProbA.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= ProbA.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbA.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbA.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbA.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbA.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbA.Label.ScaleAB.X %></X>
    '                                       <Y><%= ProbA.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= ProbA.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </A>
    '                               <NotA>
    '                                   <Unscaled>
    '                                       <Text><%= ProbNotA.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotA.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= ProbNotA.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= ProbNotA.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotA.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotA.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotA.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotA.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotA.Label.Unscaled.X %></X>
    '                                       <Y><%= ProbNotA.Label.Unscaled.Y %></Y>
    '                                       <Show><%= ProbNotA.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= ProbNotA.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotA.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= ProbNotA.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= ProbNotA.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotA.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotA.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotA.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotA.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotA.Label.ScaleA.X %></X>
    '                                       <Y><%= ProbNotA.Label.ScaleA.Y %></Y>
    '                                       <Show><%= ProbNotA.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= ProbNotA.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotA.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= ProbNotA.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= ProbNotA.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotA.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotA.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotA.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotA.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotA.Label.ScaleB.X %></X>
    '                                       <Y><%= ProbNotA.Label.ScaleB.Y %></Y>
    '                                       <Show><%= ProbNotA.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= ProbNotA.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotA.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= ProbNotA.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= ProbNotA.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotA.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotA.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotA.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotA.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotA.Label.ScaleAB.X %></X>
    '                                       <Y><%= ProbNotA.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= ProbNotA.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </NotA>
    '                               <B>
    '                                   <Unscaled>
    '                                       <Text><%= ProbB.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbB.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= ProbB.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= ProbB.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= ProbB.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= ProbB.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbB.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbB.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbB.Label.Unscaled.X %></X>
    '                                       <Y><%= ProbB.Label.Unscaled.Y %></Y>
    '                                       <Show><%= ProbB.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= ProbB.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbB.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= ProbB.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= ProbB.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= ProbB.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= ProbB.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbB.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbB.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbB.Label.ScaleA.X %></X>
    '                                       <Y><%= ProbB.Label.ScaleA.Y %></Y>
    '                                       <Show><%= ProbB.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= ProbB.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbB.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= ProbB.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= ProbB.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbB.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbB.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbB.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbB.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbB.Label.ScaleB.X %></X>
    '                                       <Y><%= ProbB.Label.ScaleB.Y %></Y>
    '                                       <Show><%= ProbB.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= ProbB.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbB.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= ProbB.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= ProbB.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbB.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbB.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbB.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbB.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbB.Label.ScaleAB.X %></X>
    '                                       <Y><%= ProbB.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= ProbB.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </B>
    '                               <NotB>
    '                                   <Unscaled>
    '                                       <Text><%= ProbNotB.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotB.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= ProbNotB.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= ProbNotB.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotB.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotB.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotB.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotB.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotB.Label.Unscaled.X %></X>
    '                                       <Y><%= ProbNotB.Label.Unscaled.Y %></Y>
    '                                       <Show><%= ProbNotB.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= ProbNotB.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotB.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= ProbNotB.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= ProbNotB.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotB.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotB.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotB.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotB.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotB.Label.ScaleA.X %></X>
    '                                       <Y><%= ProbNotB.Label.ScaleA.Y %></Y>
    '                                       <Show><%= ProbNotB.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= ProbNotB.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotB.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= ProbNotB.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= ProbNotB.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotB.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotB.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotB.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotB.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotB.Label.ScaleB.X %></X>
    '                                       <Y><%= ProbNotB.Label.ScaleB.Y %></Y>
    '                                       <Show><%= ProbNotB.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= ProbNotB.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotB.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= ProbNotB.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= ProbNotB.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotB.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotB.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotB.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotB.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotB.Label.ScaleAB.X %></X>
    '                                       <Y><%= ProbNotB.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= ProbNotB.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </NotB>
    '                               <AandB>
    '                                   <Unscaled>
    '                                       <Text><%= ProbAandB.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbAandB.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= ProbAandB.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= ProbAandB.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= ProbAandB.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= ProbAandB.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbAandB.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbAandB.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbAandB.Label.Unscaled.X %></X>
    '                                       <Y><%= ProbAandB.Label.Unscaled.Y %></Y>
    '                                       <Show><%= ProbAandB.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= ProbAandB.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbAandB.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= ProbAandB.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= ProbAandB.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= ProbAandB.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= ProbAandB.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbAandB.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbAandB.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbAandB.Label.ScaleA.X %></X>
    '                                       <Y><%= ProbAandB.Label.ScaleA.Y %></Y>
    '                                       <Show><%= ProbAandB.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= ProbAandB.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbAandB.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= ProbAandB.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= ProbAandB.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbAandB.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbAandB.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbAandB.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbAandB.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbAandB.Label.ScaleB.X %></X>
    '                                       <Y><%= ProbAandB.Label.ScaleB.Y %></Y>
    '                                       <Show><%= ProbAandB.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= ProbAandB.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbAandB.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= ProbAandB.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= ProbAandB.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbAandB.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbAandB.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbAandB.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbAandB.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbAandB.Label.ScaleAB.X %></X>
    '                                       <Y><%= ProbAandB.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= ProbAandB.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </AandB>
    '                               <AandNotB>
    '                                   <Unscaled>
    '                                       <Text><%= ProbAandNotB.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbAandNotB.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= ProbAandNotB.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= ProbAandNotB.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= ProbAandNotB.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= ProbAandNotB.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbAandNotB.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbAandNotB.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbAandNotB.Label.Unscaled.X %></X>
    '                                       <Y><%= ProbAandNotB.Label.Unscaled.Y %></Y>
    '                                       <Show><%= ProbAandNotB.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= ProbAandNotB.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbAandNotB.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= ProbAandNotB.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= ProbAandNotB.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= ProbAandNotB.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= ProbAandNotB.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbAandNotB.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbAandNotB.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbAandNotB.Label.ScaleA.X %></X>
    '                                       <Y><%= ProbAandNotB.Label.ScaleA.Y %></Y>
    '                                       <Show><%= ProbAandNotB.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= ProbAandNotB.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbAandNotB.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= ProbAandNotB.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= ProbAandNotB.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbAandNotB.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbAandNotB.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbAandNotB.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbAandNotB.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbAandNotB.Label.ScaleB.X %></X>
    '                                       <Y><%= ProbAandNotB.Label.ScaleB.Y %></Y>
    '                                       <Show><%= ProbAandNotB.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= ProbAandNotB.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbAandNotB.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= ProbAandNotB.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= ProbAandNotB.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbAandNotB.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbAandNotB.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbAandNotB.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbAandNotB.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbAandNotB.Label.ScaleAB.X %></X>
    '                                       <Y><%= ProbAandNotB.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= ProbAandNotB.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </AandNotB>
    '                               <NotAandB>
    '                                   <Unscaled>
    '                                       <Text><%= ProbNotAandB.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotAandB.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= ProbNotAandB.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= ProbNotAandB.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotAandB.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotAandB.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotAandB.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotAandB.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotAandB.Label.Unscaled.X %></X>
    '                                       <Y><%= ProbNotAandB.Label.Unscaled.Y %></Y>
    '                                       <Show><%= ProbNotAandB.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= ProbNotAandB.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotAandB.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= ProbNotAandB.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= ProbNotAandB.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotAandB.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotAandB.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotAandB.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotAandB.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotAandB.Label.ScaleA.X %></X>
    '                                       <Y><%= ProbNotAandB.Label.ScaleA.Y %></Y>
    '                                       <Show><%= ProbNotAandB.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= ProbNotAandB.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotAandB.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= ProbNotAandB.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= ProbNotAandB.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotAandB.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotAandB.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotAandB.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotAandB.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotAandB.Label.ScaleB.X %></X>
    '                                       <Y><%= ProbNotAandB.Label.ScaleB.Y %></Y>
    '                                       <Show><%= ProbNotAandB.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= ProbNotAandB.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotAandB.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= ProbNotAandB.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= ProbNotAandB.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotAandB.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotAandB.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotAandB.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotAandB.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotAandB.Label.ScaleAB.X %></X>
    '                                       <Y><%= ProbNotAandB.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= ProbNotAandB.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </NotAandB>
    '                               <NotAandNotB>
    '                                   <Unscaled>
    '                                       <Text><%= ProbNotAandNotB.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotAandNotB.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= ProbNotAandNotB.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= ProbNotAandNotB.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotAandNotB.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotAandNotB.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotAandNotB.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotAandNotB.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotAandNotB.Label.Unscaled.X %></X>
    '                                       <Y><%= ProbNotAandNotB.Label.Unscaled.Y %></Y>
    '                                       <Show><%= ProbNotAandNotB.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= ProbNotAandNotB.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotAandNotB.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= ProbNotAandNotB.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= ProbNotAandNotB.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotAandNotB.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotAandNotB.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotAandNotB.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotAandNotB.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotAandNotB.Label.ScaleA.X %></X>
    '                                       <Y><%= ProbNotAandNotB.Label.ScaleA.Y %></Y>
    '                                       <Show><%= ProbNotAandNotB.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= ProbNotAandNotB.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotAandNotB.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= ProbNotAandNotB.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= ProbNotAandNotB.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotAandNotB.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotAandNotB.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotAandNotB.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotAandNotB.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotAandNotB.Label.ScaleB.X %></X>
    '                                       <Y><%= ProbNotAandNotB.Label.ScaleB.Y %></Y>
    '                                       <Show><%= ProbNotAandNotB.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= ProbNotAandNotB.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= ProbNotAandNotB.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= ProbNotAandNotB.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= ProbNotAandNotB.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= ProbNotAandNotB.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= ProbNotAandNotB.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= ProbNotAandNotB.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= ProbNotAandNotB.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= ProbNotAandNotB.Label.ScaleAB.X %></X>
    '                                       <Y><%= ProbNotAandNotB.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= ProbNotAandNotB.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </NotAandNotB>
    '                           </Probability>
    '                           <Samples>
    '                               <A>
    '                                   <Unscaled>
    '                                       <Text><%= SampsA.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsA.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= SampsA.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= SampsA.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= SampsA.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= SampsA.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsA.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsA.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsA.Label.Unscaled.X %></X>
    '                                       <Y><%= SampsA.Label.Unscaled.Y %></Y>
    '                                       <Show><%= SampsA.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= SampsA.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsA.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= SampsA.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= SampsA.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= SampsA.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= SampsA.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsA.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsA.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsA.Label.ScaleA.X %></X>
    '                                       <Y><%= SampsA.Label.ScaleA.Y %></Y>
    '                                       <Show><%= SampsA.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= SampsA.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsA.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= SampsA.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= SampsA.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsA.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsA.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsA.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsA.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsA.Label.ScaleB.X %></X>
    '                                       <Y><%= SampsA.Label.ScaleB.Y %></Y>
    '                                       <Show><%= SampsA.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= SampsA.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsA.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= SampsA.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= SampsA.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsA.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsA.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsA.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsA.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsA.Label.ScaleAB.X %></X>
    '                                       <Y><%= SampsA.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= SampsA.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </A>
    '                               <NotA>
    '                                   <Unscaled>
    '                                       <Text><%= SampsNotA.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotA.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= SampsNotA.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= SampsNotA.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotA.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotA.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotA.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotA.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotA.Label.Unscaled.X %></X>
    '                                       <Y><%= SampsNotA.Label.Unscaled.Y %></Y>
    '                                       <Show><%= SampsNotA.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= SampsNotA.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotA.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= SampsNotA.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= SampsNotA.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotA.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotA.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotA.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotA.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotA.Label.ScaleA.X %></X>
    '                                       <Y><%= SampsNotA.Label.ScaleA.Y %></Y>
    '                                       <Show><%= SampsNotA.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= SampsNotA.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotA.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= SampsNotA.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= SampsNotA.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotA.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotA.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotA.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotA.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotA.Label.ScaleB.X %></X>
    '                                       <Y><%= SampsNotA.Label.ScaleB.Y %></Y>
    '                                       <Show><%= SampsNotA.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= SampsNotA.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotA.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= SampsNotA.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= SampsNotA.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotA.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotA.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotA.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotA.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotA.Label.ScaleAB.X %></X>
    '                                       <Y><%= SampsNotA.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= SampsNotA.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </NotA>
    '                               <B>
    '                                   <Unscaled>
    '                                       <Text><%= SampsB.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsB.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= SampsB.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= SampsB.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= SampsB.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= SampsB.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsB.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsB.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsB.Label.Unscaled.X %></X>
    '                                       <Y><%= SampsB.Label.Unscaled.Y %></Y>
    '                                       <Show><%= SampsB.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= SampsB.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsB.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= SampsB.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= SampsB.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= SampsB.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= SampsB.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsB.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsB.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsB.Label.ScaleA.X %></X>
    '                                       <Y><%= SampsB.Label.ScaleA.Y %></Y>
    '                                       <Show><%= SampsB.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= SampsB.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsB.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= SampsB.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= SampsB.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsB.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsB.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsB.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsB.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsB.Label.ScaleB.X %></X>
    '                                       <Y><%= SampsB.Label.ScaleB.Y %></Y>
    '                                       <Show><%= SampsB.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= SampsB.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsB.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= SampsB.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= SampsB.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsB.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsB.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsB.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsB.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsB.Label.ScaleAB.X %></X>
    '                                       <Y><%= SampsB.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= SampsB.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </B>
    '                               <NotB>
    '                                   <Unscaled>
    '                                       <Text><%= SampsNotB.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotB.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= SampsNotB.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= SampsNotB.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotB.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotB.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotB.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotB.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotB.Label.Unscaled.X %></X>
    '                                       <Y><%= SampsNotB.Label.Unscaled.Y %></Y>
    '                                       <Show><%= SampsNotB.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= SampsNotB.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotB.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= SampsNotB.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= SampsNotB.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotB.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotB.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotB.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotB.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotB.Label.ScaleA.X %></X>
    '                                       <Y><%= SampsNotB.Label.ScaleA.Y %></Y>
    '                                       <Show><%= SampsNotB.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= SampsNotB.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotB.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= SampsNotB.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= SampsNotB.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotB.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotB.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotB.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotB.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotB.Label.ScaleB.X %></X>
    '                                       <Y><%= SampsNotB.Label.ScaleB.Y %></Y>
    '                                       <Show><%= SampsNotB.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= SampsNotB.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotB.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= SampsNotB.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= SampsNotB.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotB.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotB.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotB.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotB.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotB.Label.ScaleAB.X %></X>
    '                                       <Y><%= SampsNotB.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= SampsNotB.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </NotB>
    '                               <AandB>
    '                                   <Unscaled>
    '                                       <Text><%= SampsAandB.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsAandB.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= SampsAandB.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= SampsAandB.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= SampsAandB.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= SampsAandB.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsAandB.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsAandB.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsAandB.Label.Unscaled.X %></X>
    '                                       <Y><%= SampsAandB.Label.Unscaled.Y %></Y>
    '                                       <Show><%= SampsAandB.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= SampsAandB.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsAandB.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= SampsAandB.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= SampsAandB.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= SampsAandB.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= SampsAandB.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsAandB.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsAandB.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsAandB.Label.ScaleA.X %></X>
    '                                       <Y><%= SampsAandB.Label.ScaleA.Y %></Y>
    '                                       <Show><%= SampsAandB.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= SampsAandB.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsAandB.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= SampsAandB.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= SampsAandB.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsAandB.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsAandB.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsAandB.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsAandB.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsAandB.Label.ScaleB.X %></X>
    '                                       <Y><%= SampsAandB.Label.ScaleB.Y %></Y>
    '                                       <Show><%= SampsAandB.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= SampsAandB.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsAandB.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= SampsAandB.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= SampsAandB.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsAandB.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsAandB.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsAandB.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsAandB.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsAandB.Label.ScaleAB.X %></X>
    '                                       <Y><%= SampsAandB.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= SampsAandB.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </AandB>
    '                               <AandNotB>
    '                                   <Unscaled>
    '                                       <Text><%= SampsAandNotB.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsAandNotB.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= SampsAandNotB.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= SampsAandNotB.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= SampsAandNotB.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= SampsAandNotB.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsAandNotB.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsAandNotB.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsAandNotB.Label.Unscaled.X %></X>
    '                                       <Y><%= SampsAandNotB.Label.Unscaled.Y %></Y>
    '                                       <Show><%= SampsAandNotB.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= SampsAandNotB.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsAandNotB.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= SampsAandNotB.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= SampsAandNotB.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= SampsAandNotB.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= SampsAandNotB.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsAandNotB.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsAandNotB.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsAandNotB.Label.ScaleA.X %></X>
    '                                       <Y><%= SampsAandNotB.Label.ScaleA.Y %></Y>
    '                                       <Show><%= SampsAandNotB.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= SampsAandNotB.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsAandNotB.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= SampsAandNotB.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= SampsAandNotB.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsAandNotB.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsAandNotB.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsAandNotB.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsAandNotB.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsAandNotB.Label.ScaleB.X %></X>
    '                                       <Y><%= SampsAandNotB.Label.ScaleB.Y %></Y>
    '                                       <Show><%= SampsAandNotB.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= SampsAandNotB.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsAandNotB.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= SampsAandNotB.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= SampsAandNotB.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsAandNotB.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsAandNotB.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsAandNotB.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsAandNotB.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsAandNotB.Label.ScaleAB.X %></X>
    '                                       <Y><%= SampsAandNotB.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= SampsAandNotB.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </AandNotB>
    '                               <NotAandB>
    '                                   <Unscaled>
    '                                       <Text><%= SampsNotAandB.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotAandB.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= SampsNotAandB.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= SampsNotAandB.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotAandB.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotAandB.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotAandB.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotAandB.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotAandB.Label.Unscaled.X %></X>
    '                                       <Y><%= SampsNotAandB.Label.Unscaled.Y %></Y>
    '                                       <Show><%= SampsNotAandB.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= SampsNotAandB.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotAandB.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= SampsNotAandB.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= SampsNotAandB.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotAandB.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotAandB.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotAandB.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotAandB.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotAandB.Label.ScaleA.X %></X>
    '                                       <Y><%= SampsNotAandB.Label.ScaleA.Y %></Y>
    '                                       <Show><%= SampsNotAandB.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= SampsNotAandB.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotAandB.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= SampsNotAandB.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= SampsNotAandB.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotAandB.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotAandB.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotAandB.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotAandB.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotAandB.Label.ScaleB.X %></X>
    '                                       <Y><%= SampsNotAandB.Label.ScaleB.Y %></Y>
    '                                       <Show><%= SampsNotAandB.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= SampsNotAandB.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotAandB.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= SampsNotAandB.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= SampsNotAandB.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotAandB.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotAandB.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotAandB.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotAandB.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotAandB.Label.ScaleAB.X %></X>
    '                                       <Y><%= SampsNotAandB.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= SampsNotAandB.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </NotAandB>
    '                               <NotAandNotB>
    '                                   <Unscaled>
    '                                       <Text><%= SampsNotAandNotB.Label.Unscaled.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotAandNotB.Label.Unscaled.Font.Name %></Name>
    '                                           <Size><%= SampsNotAandNotB.Label.Unscaled.Font.Size %></Size>
    '                                           <Bold><%= SampsNotAandNotB.Label.Unscaled.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotAandNotB.Label.Unscaled.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotAandNotB.Label.Unscaled.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotAandNotB.Label.Unscaled.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotAandNotB.Label.Unscaled.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotAandNotB.Label.Unscaled.X %></X>
    '                                       <Y><%= SampsNotAandNotB.Label.Unscaled.Y %></Y>
    '                                       <Show><%= SampsNotAandNotB.Label.Unscaled.Show %></Show>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <Text><%= SampsNotAandNotB.Label.ScaleA.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotAandNotB.Label.ScaleA.Font.Name %></Name>
    '                                           <Size><%= SampsNotAandNotB.Label.ScaleA.Font.Size %></Size>
    '                                           <Bold><%= SampsNotAandNotB.Label.ScaleA.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotAandNotB.Label.ScaleA.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotAandNotB.Label.ScaleA.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotAandNotB.Label.ScaleA.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotAandNotB.Label.ScaleA.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotAandNotB.Label.ScaleA.X %></X>
    '                                       <Y><%= SampsNotAandNotB.Label.ScaleA.Y %></Y>
    '                                       <Show><%= SampsNotAandNotB.Label.ScaleA.Show %></Show>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <Text><%= SampsNotAandNotB.Label.ScaleB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotAandNotB.Label.ScaleB.Font.Name %></Name>
    '                                           <Size><%= SampsNotAandNotB.Label.ScaleB.Font.Size %></Size>
    '                                           <Bold><%= SampsNotAandNotB.Label.ScaleB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotAandNotB.Label.ScaleB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotAandNotB.Label.ScaleB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotAandNotB.Label.ScaleB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotAandNotB.Label.ScaleB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotAandNotB.Label.ScaleB.X %></X>
    '                                       <Y><%= SampsNotAandNotB.Label.ScaleB.Y %></Y>
    '                                       <Show><%= SampsNotAandNotB.Label.ScaleB.Show %></Show>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <Text><%= SampsNotAandNotB.Label.ScaleAB.Text %></Text>
    '                                       <Font>
    '                                           <Name><%= SampsNotAandNotB.Label.ScaleAB.Font.Name %></Name>
    '                                           <Size><%= SampsNotAandNotB.Label.ScaleAB.Font.Size %></Size>
    '                                           <Bold><%= SampsNotAandNotB.Label.ScaleAB.Font.Bold %></Bold>
    '                                           <Italic><%= SampsNotAandNotB.Label.ScaleAB.Font.Italic %></Italic>
    '                                           <Underline><%= SampsNotAandNotB.Label.ScaleAB.Font.Underline %></Underline>
    '                                           <Strikeout><%= SampsNotAandNotB.Label.ScaleAB.Font.Strikeout %></Strikeout>
    '                                       </Font>
    '                                       <Color><%= SampsNotAandNotB.Label.ScaleAB.Color.ToArgb.ToString %></Color>
    '                                       <X><%= SampsNotAandNotB.Label.ScaleAB.X %></X>
    '                                       <Y><%= SampsNotAandNotB.Label.ScaleAB.Y %></Y>
    '                                       <Show><%= SampsNotAandNotB.Label.ScaleAB.Show %></Show>
    '                                   </ScaleAB>
    '                               </NotAandNotB>
    '                               <SampleSize>
    '                                   <Text><%= AnnotSampleSize.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotSampleSize.Font.Name %></Name>
    '                                       <Size><%= AnnotSampleSize.Font.Size %></Size>
    '                                       <Bold><%= AnnotSampleSize.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotSampleSize.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotSampleSize.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotSampleSize.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotSampleSize.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotSampleSize.X %></X>
    '                                   <Y><%= AnnotSampleSize.Y %></Y>
    '                                   <Show><%= AnnotSampleSize.Show %></Show>
    '                               </SampleSize>
    '                           </Samples>
    '                           <Condition>
    '                               <Name><%= Condition %></Name>
    '                               <Text><%= AnnotCondition.Text %></Text>
    '                               <Font>
    '                                   <Name><%= AnnotCondition.Font.Name %></Name>
    '                                   <Size><%= AnnotCondition.Font.Size %></Size>
    '                                   <Bold><%= AnnotCondition.Font.Bold %></Bold>
    '                                   <Italic><%= AnnotCondition.Font.Italic %></Italic>
    '                                   <Underline><%= AnnotCondition.Font.Underline %></Underline>
    '                                   <Strikeout><%= AnnotCondition.Font.Strikeout %></Strikeout>
    '                               </Font>
    '                               <Color><%= AnnotCondition.Color.ToArgb.ToString %></Color>
    '                               <X><%= AnnotCondition.X %></X>
    '                               <Y><%= AnnotCondition.Y %></Y>
    '                               <Show><%= AnnotCondition.Show %></Show>
    '                               <GivenA>
    '                                   <Text><%= AnnotCondition.GivenA.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotCondition.GivenA.Font.Name %></Name>
    '                                       <Size><%= AnnotCondition.GivenA.Font.Size %></Size>
    '                                       <Bold><%= AnnotCondition.GivenA.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotCondition.GivenA.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotCondition.GivenA.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotCondition.GivenA.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotCondition.GivenA.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotCondition.GivenA.X %></X>
    '                                   <Y><%= AnnotCondition.GivenA.Y %></Y>
    '                                   <Show><%= AnnotCondition.GivenA.Show %></Show>
    '                               </GivenA>
    '                               <GivenNotA>
    '                                   <Text><%= AnnotCondition.GivenNotA.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotCondition.GivenNotA.Font.Name %></Name>
    '                                       <Size><%= AnnotCondition.GivenNotA.Font.Size %></Size>
    '                                       <Bold><%= AnnotCondition.GivenNotA.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotCondition.GivenNotA.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotCondition.GivenNotA.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotCondition.GivenNotA.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotCondition.GivenNotA.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotCondition.GivenNotA.X %></X>
    '                                   <Y><%= AnnotCondition.GivenNotA.Y %></Y>
    '                                   <Show><%= AnnotCondition.GivenNotA.Show %></Show>
    '                               </GivenNotA>
    '                               <GivenB>
    '                                   <Text><%= AnnotCondition.GivenB.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotCondition.GivenB.Font.Name %></Name>
    '                                       <Size><%= AnnotCondition.GivenB.Font.Size %></Size>
    '                                       <Bold><%= AnnotCondition.GivenB.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotCondition.GivenB.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotCondition.GivenB.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotCondition.GivenB.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotCondition.GivenB.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotCondition.GivenB.X %></X>
    '                                   <Y><%= AnnotCondition.GivenB.Y %></Y>
    '                                   <Show><%= AnnotCondition.GivenB.Show %></Show>
    '                               </GivenB>
    '                               <GivenNotB>
    '                                   <Text><%= AnnotCondition.GivenNotB.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotCondition.GivenNotB.Font.Name %></Name>
    '                                       <Size><%= AnnotCondition.GivenNotB.Font.Size %></Size>
    '                                       <Bold><%= AnnotCondition.GivenNotB.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotCondition.GivenNotB.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotCondition.GivenNotB.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotCondition.GivenNotB.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotCondition.GivenNotB.Color.ToArgb.ToString %></Color>
    '                                   <X><%= AnnotCondition.GivenNotB.X %></X>
    '                                   <Y><%= AnnotCondition.GivenNotB.Y %></Y>
    '                                   <Show><%= AnnotCondition.GivenNotB.Show %></Show>
    '                               </GivenNotB>
    '                           </Condition>
    '                       </Annotation>
    '                   </Diagram>
    '               </BayesModel>

    '    '<Probability><%= ProbA.Value %></Probability>
    '    '    </EventA>

    '    '<Probability><%= ProbB.Value %></Probability>
    '    '    </EventB>

    '    '<BgivenA><%= ProbB.GivenA.Value %></BgivenA>
    '    '<BgivenNotA><%= ProbB.GivenNotA.Value %></BgivenNotA>
    '    '<AgivenB><%= ProbA.GivenB.Value %></AgivenB>

    '    '<Probability>
    '    '    <AandB><%= ProbAandB %></AandB>
    '    '    <BgivenA><%= ProbBgivenA %></BgivenA>
    '    '    <BgivenNotA><%= ProbBgivenNotA %></BgivenNotA>
    '    '    <AgivenB><%= ProbAgivenB %></AgivenB>
    '    '</Probability>

    '    '<Condition>
    '    '    <Name><%= Condition %></Name>
    '    '    <Show><%= AnnotConditionShow %></Show>
    '    '    <EventATrueLabel><%= AnnotConditionLabelATrue %></EventATrueLabel>
    '    '    <EventAFalseLabel><%= AnnotConditionLabelAFalse %></EventAFalseLabel>
    '    '    <EventBTrueLabel><%= AnnotConditionLabelBTrue %></EventBTrueLabel>
    '    '    <EventBFalseLabel><%= AnnotConditionLabelBFalse %></EventBFalseLabel>
    '    '</Condition>


    '    Return XDoc
    'End Function

    'Public Function BayesToXDoc() As System.Xml.Linq.XDocument
    '    'Return an XDocument containing the Bayes model.

    '    Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
    '               <!---->
    '               <!--Bayes Model File-->
    '               <BayesModel>
    '                   <Name><%= Name %></Name>
    '                   <Label><%= Label %></Label>
    '                   <Description><%= Description %></Description>
    '                   <Notes><%= Notes %></Notes>
    '                   <InputInfoType><%= InputInfoType %></InputInfoType>
    '                   <ProbabilityMeasure><%= Settings.ProbabilityMeasure %></ProbabilityMeasure>
    '                   <DecimalFormat><%= Settings.DecimalFormat %></DecimalFormat>
    '                   <PercentFormat><%= Settings.PercentFormat %></PercentFormat>
    '                   <SamplesFormat><%= Settings.SamplesFormat %></SamplesFormat>
    '                   <SampleSize><%= SampleSize.Value %></SampleSize>
    '                   <ShowProbabilities><%= ShowProbabilities %></ShowProbabilities>
    '                   <ShowSampleCounts><%= ShowSampleCounts %></ShowSampleCounts>
    '                   <PerformanceDisplayFormat><%= Performance.DisplayFormat %></PerformanceDisplayFormat>
    '                   <EventA>
    '                       <Name><%= EventA.Name %></Name>
    '                       <Description><%= EventA.Description %></Description>
    '                       <NotName><%= EventA.NotName %></NotName>
    '                   </EventA>
    '                   <EventB>
    '                       <Name><%= EventB.Name %></Name>
    '                       <Description><%= EventB.Description %></Description>
    '                       <NotName><%= EventB.NotName %></NotName>
    '                   </EventB>
    '                   <Probability>
    '                       <AValue><%= ProbA.Value %></AValue>
    '                       <AStatus><%= ProbA.Status %></AStatus>
    '                       <ARank><%= ProbA.Rank %></ARank>
    '                       <NotAValue><%= ProbNotA.Value %></NotAValue>
    '                       <NotAStatus><%= ProbNotA.Status %></NotAStatus>
    '                       <NotARank><%= ProbNotA.Rank %></NotARank>
    '                       <BValue><%= ProbB.Value %></BValue>
    '                       <BStatus><%= ProbB.Status %></BStatus>
    '                       <BRank><%= ProbB.Rank %></BRank>
    '                       <NotBValue><%= ProbNotB.Value %></NotBValue>
    '                       <NotBStatus><%= ProbNotB.Status %></NotBStatus>
    '                       <NotBRank><%= ProbNotB.Rank %></NotBRank>
    '                       <AandBValue><%= ProbAandB.Value %></AandBValue>
    '                       <AandBStatus><%= ProbAandB.Status %></AandBStatus>
    '                       <AandBRank><%= ProbAandB.Rank %></AandBRank>
    '                       <AandNotBValue><%= ProbAandNotB.Value %></AandNotBValue>
    '                       <AandNotBStatus><%= ProbAandNotB.Status %></AandNotBStatus>
    '                       <AandNotBRank><%= ProbAandNotB.Rank %></AandNotBRank>
    '                       <NotAandBValue><%= ProbNotAandB.Value %></NotAandBValue>
    '                       <NotAandBStatus><%= ProbNotAandB.Status %></NotAandBStatus>
    '                       <NotAandBRank><%= ProbNotAandB.Rank %></NotAandBRank>
    '                       <NotAandNotBValue><%= ProbNotAandNotB.Value %></NotAandNotBValue>
    '                       <NotAandNotBStatus><%= ProbNotAandNotB.Status %></NotAandNotBStatus>
    '                       <NotAandNotBRank><%= ProbNotAandNotB.Rank %></NotAandNotBRank>
    '                       <GivenA>
    '                           <AValue><%= ProbA.GivenA.Value %></AValue>
    '                           <AStatus><%= ProbA.GivenA.Status %></AStatus>
    '                           <ARank><%= ProbA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= ProbNotA.GivenA.Value %></NotAValue>
    '                           <NotAStatus><%= ProbNotA.GivenA.Status %></NotAStatus>
    '                           <NotARank><%= ProbNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= ProbB.GivenA.Value %></BValue>
    '                           <BStatus><%= ProbB.GivenA.Status %></BStatus>
    '                           <BRank><%= ProbB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= ProbNotB.GivenA.Value %></NotBValue>
    '                           <NotBStatus><%= ProbNotB.GivenA.Status %></NotBStatus>
    '                           <NotBRank><%= ProbNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= ProbAandB.GivenA.Value %></AandBValue>
    '                           <AandBStatus><%= ProbAandB.GivenA.Status %></AandBStatus>
    '                           <AandBRank><%= ProbAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= ProbAandNotB.GivenA.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= ProbAandNotB.GivenA.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= ProbAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= ProbNotAandB.GivenA.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= ProbNotAandB.GivenA.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= ProbNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= ProbNotAandNotB.GivenA.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= ProbNotAandNotB.GivenA.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= ProbNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenA>
    '                       <GivenNotA>
    '                           <AValue><%= ProbA.GivenNotA.Value %></AValue>
    '                           <AStatus><%= ProbA.GivenNotA.Status %></AStatus>
    '                           <ARank><%= ProbA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= ProbNotA.GivenNotA.Value %></NotAValue>
    '                           <NotAStatus><%= ProbNotA.GivenNotA.Status %></NotAStatus>
    '                           <NotARank><%= ProbNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= ProbB.GivenNotA.Value %></BValue>
    '                           <BStatus><%= ProbB.GivenNotA.Status %></BStatus>
    '                           <BRank><%= ProbB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= ProbNotB.GivenNotA.Value %></NotBValue>
    '                           <NotBStatus><%= ProbNotB.GivenNotA.Status %></NotBStatus>
    '                           <NotBRank><%= ProbNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= ProbAandB.GivenNotA.Value %></AandBValue>
    '                           <AandBStatus><%= ProbAandB.GivenNotA.Status %></AandBStatus>
    '                           <AandBRank><%= ProbAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= ProbAandNotB.GivenNotA.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= ProbAandNotB.GivenNotA.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= ProbAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= ProbNotAandB.GivenNotA.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= ProbNotAandB.GivenNotA.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= ProbNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= ProbNotAandNotB.GivenNotA.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= ProbNotAandNotB.GivenNotA.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= ProbNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenNotA>
    '                       <GivenB>
    '                           <AValue><%= ProbA.GivenB.Value %></AValue>
    '                           <AStatus><%= ProbA.GivenB.Status %></AStatus>
    '                           <ARank><%= ProbA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= ProbNotA.GivenB.Value %></NotAValue>
    '                           <NotAStatus><%= ProbNotA.GivenB.Status %></NotAStatus>
    '                           <NotARank><%= ProbNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= ProbB.GivenB.Value %></BValue>
    '                           <BStatus><%= ProbB.GivenB.Status %></BStatus>
    '                           <BRank><%= ProbB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= ProbNotB.GivenB.Value %></NotBValue>
    '                           <NotBStatus><%= ProbNotB.GivenB.Status %></NotBStatus>
    '                           <NotBRank><%= ProbNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= ProbAandB.GivenB.Value %></AandBValue>
    '                           <AandBStatus><%= ProbAandB.GivenB.Status %></AandBStatus>
    '                           <AandBRank><%= ProbAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= ProbAandNotB.GivenB.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= ProbAandNotB.GivenB.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= ProbAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= ProbNotAandB.GivenB.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= ProbNotAandB.GivenB.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= ProbNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= ProbNotAandNotB.GivenB.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= ProbNotAandNotB.GivenB.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= ProbNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenB>
    '                       <GivenNotB>
    '                           <AValue><%= ProbA.GivenNotB.Value %></AValue>
    '                           <AStatus><%= ProbA.GivenNotB.Status %></AStatus>
    '                           <ARank><%= ProbA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= ProbNotA.GivenNotB.Value %></NotAValue>
    '                           <NotAStatus><%= ProbNotA.GivenNotB.Status %></NotAStatus>
    '                           <NotARank><%= ProbNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= ProbB.GivenNotB.Value %></BValue>
    '                           <BStatus><%= ProbB.GivenNotB.Status %></BStatus>
    '                           <BRank><%= ProbB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= ProbNotB.GivenNotB.Value %></NotBValue>
    '                           <NotBStatus><%= ProbNotB.GivenNotB.Status %></NotBStatus>
    '                           <NotBRank><%= ProbNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= ProbAandB.GivenNotB.Value %></AandBValue>
    '                           <AandBStatus><%= ProbAandB.GivenNotB.Status %></AandBStatus>
    '                           <AandBRank><%= ProbAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= ProbAandNotB.GivenNotB.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= ProbAandNotB.GivenNotB.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= ProbAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= ProbNotAandB.GivenNotB.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= ProbNotAandB.GivenNotB.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= ProbNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= ProbNotAandNotB.GivenNotB.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= ProbNotAandNotB.GivenNotB.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= ProbNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenNotB>
    '                   </Probability>
    '                   <SampleCount>
    '                       <AValue><%= SampsA.Value %></AValue>
    '                       <AStatus><%= SampsA.Status %></AStatus>
    '                       <ARank><%= SampsA.Rank %></ARank>
    '                       <NotAValue><%= SampsNotA.Value %></NotAValue>
    '                       <NotAStatus><%= SampsNotA.Status %></NotAStatus>
    '                       <NotARank><%= SampsNotA.Rank %></NotARank>
    '                       <BValue><%= SampsB.Value %></BValue>
    '                       <BStatus><%= SampsB.Status %></BStatus>
    '                       <BRank><%= SampsB.Rank %></BRank>
    '                       <NotBValue><%= SampsNotB.Value %></NotBValue>
    '                       <NotBStatus><%= SampsNotB.Status %></NotBStatus>
    '                       <NotBRank><%= SampsNotB.Rank %></NotBRank>
    '                       <AandBValue><%= SampsAandB.Value %></AandBValue>
    '                       <AandBStatus><%= SampsAandB.Status %></AandBStatus>
    '                       <AandBRank><%= SampsAandB.Rank %></AandBRank>
    '                       <AandNotBValue><%= SampsAandNotB.Value %></AandNotBValue>
    '                       <AandNotBStatus><%= SampsAandNotB.Status %></AandNotBStatus>
    '                       <AandNotBRank><%= SampsAandNotB.Rank %></AandNotBRank>
    '                       <NotAandBValue><%= SampsNotAandB.Value %></NotAandBValue>
    '                       <NotAandBStatus><%= SampsNotAandB.Status %></NotAandBStatus>
    '                       <NotAandBRank><%= SampsNotAandB.Rank %></NotAandBRank>
    '                       <NotAandNotBValue><%= SampsNotAandNotB.Value %></NotAandNotBValue>
    '                       <NotAandNotBStatus><%= SampsNotAandNotB.Status %></NotAandNotBStatus>
    '                       <NotAandNotBRank><%= SampsNotAandNotB.Rank %></NotAandNotBRank>
    '                       <GivenA>
    '                           <AValue><%= SampsA.GivenA.Value %></AValue>
    '                           <AStatus><%= SampsA.GivenA.Status %></AStatus>
    '                           <ARank><%= SampsA.GivenA.Rank %></ARank>
    '                           <NotAValue><%= SampsNotA.GivenA.Value %></NotAValue>
    '                           <NotAStatus><%= SampsNotA.GivenA.Status %></NotAStatus>
    '                           <NotARank><%= SampsNotA.GivenA.Rank %></NotARank>
    '                           <BValue><%= SampsB.GivenA.Value %></BValue>
    '                           <BStatus><%= SampsB.GivenA.Status %></BStatus>
    '                           <BRank><%= SampsB.GivenA.Rank %></BRank>
    '                           <NotBValue><%= SampsNotB.GivenA.Value %></NotBValue>
    '                           <NotBStatus><%= SampsNotB.GivenA.Status %></NotBStatus>
    '                           <NotBRank><%= SampsNotB.GivenA.Rank %></NotBRank>
    '                           <AandBValue><%= SampsAandB.GivenA.Value %></AandBValue>
    '                           <AandBStatus><%= SampsAandB.GivenA.Status %></AandBStatus>
    '                           <AandBRank><%= SampsAandB.GivenA.Rank %></AandBRank>
    '                           <AandNotBValue><%= SampsAandNotB.GivenA.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= SampsAandNotB.GivenA.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= SampsAandNotB.GivenA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= SampsNotAandB.GivenA.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= SampsNotAandB.GivenA.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= SampsNotAandB.GivenA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= SampsNotAandNotB.GivenA.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= SampsNotAandNotB.GivenA.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= SampsNotAandNotB.GivenA.Rank %></NotAandNotBRank>
    '                       </GivenA>
    '                       <GivenNotA>
    '                           <AValue><%= SampsA.GivenNotA.Value %></AValue>
    '                           <AStatus><%= SampsA.GivenNotA.Status %></AStatus>
    '                           <ARank><%= SampsA.GivenNotA.Rank %></ARank>
    '                           <NotAValue><%= SampsNotA.GivenNotA.Value %></NotAValue>
    '                           <NotAStatus><%= SampsNotA.GivenNotA.Status %></NotAStatus>
    '                           <NotARank><%= SampsNotA.GivenNotA.Rank %></NotARank>
    '                           <BValue><%= SampsB.GivenNotA.Value %></BValue>
    '                           <BStatus><%= SampsB.GivenNotA.Status %></BStatus>
    '                           <BRank><%= SampsB.GivenNotA.Rank %></BRank>
    '                           <NotBValue><%= SampsNotB.GivenNotA.Value %></NotBValue>
    '                           <NotBStatus><%= SampsNotB.GivenNotA.Status %></NotBStatus>
    '                           <NotBRank><%= SampsNotB.GivenNotA.Rank %></NotBRank>
    '                           <AandBValue><%= SampsAandB.GivenNotA.Value %></AandBValue>
    '                           <AandBStatus><%= SampsAandB.GivenNotA.Status %></AandBStatus>
    '                           <AandBRank><%= SampsAandB.GivenNotA.Rank %></AandBRank>
    '                           <AandNotBValue><%= SampsAandNotB.GivenNotA.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= SampsAandNotB.GivenNotA.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= SampsAandNotB.GivenNotA.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= SampsNotAandB.GivenNotA.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= SampsNotAandB.GivenNotA.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= SampsNotAandB.GivenNotA.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= SampsNotAandNotB.GivenNotA.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= SampsNotAandNotB.GivenNotA.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= SampsNotAandNotB.GivenNotA.Rank %></NotAandNotBRank>
    '                       </GivenNotA>
    '                       <GivenB>
    '                           <AValue><%= SampsA.GivenB.Value %></AValue>
    '                           <AStatus><%= SampsA.GivenB.Status %></AStatus>
    '                           <ARank><%= SampsA.GivenB.Rank %></ARank>
    '                           <NotAValue><%= SampsNotA.GivenB.Value %></NotAValue>
    '                           <NotAStatus><%= SampsNotA.GivenB.Status %></NotAStatus>
    '                           <NotARank><%= SampsNotA.GivenB.Rank %></NotARank>
    '                           <BValue><%= SampsB.GivenB.Value %></BValue>
    '                           <BStatus><%= SampsB.GivenB.Status %></BStatus>
    '                           <BRank><%= SampsB.GivenB.Rank %></BRank>
    '                           <NotBValue><%= SampsNotB.GivenB.Value %></NotBValue>
    '                           <NotBStatus><%= SampsNotB.GivenB.Status %></NotBStatus>
    '                           <NotBRank><%= SampsNotB.GivenB.Rank %></NotBRank>
    '                           <AandBValue><%= SampsAandB.GivenB.Value %></AandBValue>
    '                           <AandBStatus><%= SampsAandB.GivenB.Status %></AandBStatus>
    '                           <AandBRank><%= SampsAandB.GivenB.Rank %></AandBRank>
    '                           <AandNotBValue><%= SampsAandNotB.GivenB.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= SampsAandNotB.GivenB.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= SampsAandNotB.GivenB.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= SampsNotAandB.GivenB.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= SampsNotAandB.GivenB.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= SampsNotAandB.GivenB.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= SampsNotAandNotB.GivenB.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= SampsNotAandNotB.GivenB.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= SampsNotAandNotB.GivenB.Rank %></NotAandNotBRank>
    '                       </GivenB>
    '                       <GivenNotB>
    '                           <AValue><%= SampsA.GivenNotB.Value %></AValue>
    '                           <AStatus><%= SampsA.GivenNotB.Status %></AStatus>
    '                           <ARank><%= SampsA.GivenNotB.Rank %></ARank>
    '                           <NotAValue><%= SampsNotA.GivenNotB.Value %></NotAValue>
    '                           <NotAStatus><%= SampsNotA.GivenNotB.Status %></NotAStatus>
    '                           <NotARank><%= SampsNotA.GivenNotB.Rank %></NotARank>
    '                           <BValue><%= SampsB.GivenNotB.Value %></BValue>
    '                           <BStatus><%= SampsB.GivenNotB.Status %></BStatus>
    '                           <BRank><%= SampsB.GivenNotB.Rank %></BRank>
    '                           <NotBValue><%= SampsNotB.GivenNotB.Value %></NotBValue>
    '                           <NotBStatus><%= SampsNotB.GivenNotB.Status %></NotBStatus>
    '                           <NotBRank><%= SampsNotB.GivenNotB.Rank %></NotBRank>
    '                           <AandBValue><%= SampsAandB.GivenNotB.Value %></AandBValue>
    '                           <AandBStatus><%= SampsAandB.GivenNotB.Status %></AandBStatus>
    '                           <AandBRank><%= SampsAandB.GivenNotB.Rank %></AandBRank>
    '                           <AandNotBValue><%= SampsAandNotB.GivenNotB.Value %></AandNotBValue>
    '                           <AandNotBStatus><%= SampsAandNotB.GivenNotB.Status %></AandNotBStatus>
    '                           <AandNotBRank><%= SampsAandNotB.GivenNotB.Rank %></AandNotBRank>
    '                           <NotAandBValue><%= SampsNotAandB.GivenNotB.Value %></NotAandBValue>
    '                           <NotAandBStatus><%= SampsNotAandB.GivenNotB.Status %></NotAandBStatus>
    '                           <NotAandBRank><%= SampsNotAandB.GivenNotB.Rank %></NotAandBRank>
    '                           <NotAandNotBValue><%= SampsNotAandNotB.GivenNotB.Value %></NotAandNotBValue>
    '                           <NotAandNotBStatus><%= SampsNotAandNotB.GivenNotB.Status %></NotAandNotBStatus>
    '                           <NotAandNotBRank><%= SampsNotAandNotB.GivenNotB.Rank %></NotAandNotBRank>
    '                       </GivenNotB>
    '                   </SampleCount>
    '                   <Diagram>
    '                       <LineColor><%= Diagram.LineColor.ToArgb.ToString %></LineColor>
    '                       <LineThickness><%= Diagram.LineThickness %></LineThickness>
    '                       <BoldLineThickness><%= Diagram.BoldLineThickness %></BoldLineThickness>
    '                       <BoldLine><%= Diagram.BoldLine %></BoldLine>
    '                       <FillColor><%= Diagram.FillColor.ToArgb.ToString %></FillColor>
    '                       <Height><%= Diagram.Height %></Height>
    '                       <Width><%= Diagram.Width %></Width>
    '                       <EventA>
    '                           <LineColor><%= EventA.LineColor.ToArgb.ToString %></LineColor>
    '                           <FillColor><%= EventA.FillColor.ToArgb.ToString %></FillColor>
    '                           <Shape><%= EventA.Shape %></Shape>
    '                           <LineThickness><%= EventA.LineThickness %></LineThickness>
    '                           <BoldLineThickness><%= EventA.BoldLineThickness %></BoldLineThickness>
    '                           <BoldLine><%= EventA.BoldLine %></BoldLine>
    '                           <Unscaled>
    '                               <XMin><%= EventA.Unscaled.XMin %></XMin>
    '                               <XMax><%= EventA.Unscaled.XMax %></XMax>
    '                               <YMin><%= EventA.Unscaled.YMin %></YMin>
    '                               <YMax><%= EventA.Unscaled.YMax %></YMax>
    '                           </Unscaled>
    '                           <ScaleA>
    '                               <XMin><%= EventA.ScaleA.XMin %></XMin>
    '                               <XMax><%= EventA.ScaleA.XMax %></XMax>
    '                               <YMin><%= EventA.ScaleA.YMin %></YMin>
    '                               <YMax><%= EventA.ScaleA.YMax %></YMax>
    '                           </ScaleA>
    '                           <ScaleB>
    '                               <XMin><%= EventA.ScaleB.XMin %></XMin>
    '                               <XMax><%= EventA.ScaleB.XMax %></XMax>
    '                               <YMin><%= EventA.ScaleB.YMin %></YMin>
    '                               <YMax><%= EventA.ScaleB.YMax %></YMax>
    '                           </ScaleB>
    '                           <ScaleAB>
    '                               <XMin><%= EventA.ScaleAB.XMin %></XMin>
    '                               <XMax><%= EventA.ScaleAB.XMax %></XMax>
    '                               <YMin><%= EventA.ScaleAB.YMin %></YMin>
    '                               <YMax><%= EventA.ScaleAB.YMax %></YMax>
    '                           </ScaleAB>
    '                       </EventA>
    '                       <EventB>
    '                           <LineColor><%= EventB.LineColor.ToArgb.ToString %></LineColor>
    '                           <FillColor><%= EventB.FillColor.ToArgb.ToString %></FillColor>
    '                           <Shape><%= EventB.Shape %></Shape>
    '                           <LineThickness><%= EventB.LineThickness %></LineThickness>
    '                           <BoldLineThickness><%= EventB.BoldLineThickness %></BoldLineThickness>
    '                           <BoldLine><%= EventB.BoldLine %></BoldLine>
    '                           <Unscaled>
    '                               <XMin><%= EventB.Unscaled.XMin %></XMin>
    '                               <XMax><%= EventB.Unscaled.XMax %></XMax>
    '                               <YMin><%= EventB.Unscaled.YMin %></YMin>
    '                               <YMax><%= EventB.Unscaled.YMax %></YMax>
    '                           </Unscaled>
    '                           <ScaleA>
    '                               <XMin><%= EventB.ScaleA.XMin %></XMin>
    '                               <XMax><%= EventB.ScaleA.XMax %></XMax>
    '                               <YMin><%= EventB.ScaleA.YMin %></YMin>
    '                               <YMax><%= EventB.ScaleA.YMax %></YMax>
    '                           </ScaleA>
    '                           <ScaleB>
    '                               <XMin><%= EventB.ScaleB.XMin %></XMin>
    '                               <XMax><%= EventB.ScaleB.XMax %></XMax>
    '                               <YMin><%= EventB.ScaleB.YMin %></YMin>
    '                               <YMax><%= EventB.ScaleB.YMax %></YMax>
    '                           </ScaleB>
    '                           <ScaleAB>
    '                               <XMin><%= EventB.ScaleAB.XMin %></XMin>
    '                               <XMax><%= EventB.ScaleAB.XMax %></XMax>
    '                               <YMin><%= EventB.ScaleAB.YMin %></YMin>
    '                               <YMax><%= EventB.ScaleAB.YMax %></YMax>
    '                           </ScaleAB>
    '                       </EventB>
    '                       <EventAandBFillColor><%= EventAandBFillColor.ToArgb.ToString %></EventAandBFillColor>
    '                       <HighLight>
    '                           <RegionColor><%= HighlightRegion.Color.ToArgb.ToString %></RegionColor>
    '                           <A><%= HighlightRegion.A %></A>
    '                           <NotA><%= HighlightRegion.NotA %></NotA>
    '                           <B><%= HighlightRegion.B %></B>
    '                           <NotB><%= HighlightRegion.NotB %></NotB>
    '                           <AandB><%= HighlightRegion.AandB %></AandB>
    '                           <AandNotB><%= HighlightRegion.AandNotB %></AandNotB>
    '                           <NotAandB><%= HighlightRegion.NotAandB %></NotAandB>
    '                           <NotAandNotB><%= HighlightRegion.NotAandNotB %></NotAandNotB>
    '                       </HighLight>
    '                       <ZeroProbability>
    '                           <RegionColor><%= ZeroProbRegion.Color.ToArgb.ToString %></RegionColor>
    '                           <A><%= ZeroProbRegion.A %></A>
    '                           <NotA><%= ZeroProbRegion.NotA %></NotA>
    '                           <B><%= ZeroProbRegion.B %></B>
    '                           <NotB><%= ZeroProbRegion.NotB %></NotB>
    '                           <AandB><%= ZeroProbRegion.AandB %></AandB>
    '                           <AandNotB><%= ZeroProbRegion.AandNotB %></AandNotB>
    '                           <NotAandB><%= ZeroProbRegion.NotAandB %></NotAandB>
    '                           <NotAandNotB><%= ZeroProbRegion.NotAandNotB %></NotAandNotB>
    '                       </ZeroProbability>
    '                       <Annotation>
    '                           <Title>
    '                               <Text><%= AnnotTitle.Text %></Text>
    '                               <Font>
    '                                   <Name><%= AnnotTitle.Font.Name %></Name>
    '                                   <Size><%= AnnotTitle.Font.Size %></Size>
    '                                   <Bold><%= AnnotTitle.Font.Bold %></Bold>
    '                                   <Italic><%= AnnotTitle.Font.Italic %></Italic>
    '                                   <Underline><%= AnnotTitle.Font.Underline %></Underline>
    '                                   <Strikeout><%= AnnotTitle.Font.Strikeout %></Strikeout>
    '                               </Font>
    '                               <Color><%= AnnotTitle.Color.ToArgb.ToString %></Color>
    '                               <MidX><%= AnnotTitle.MidX %></MidX>
    '                               <Y><%= AnnotTitle.Y %></Y>
    '                           </Title>
    '                           <Description>
    '                               <Text><%= AnnotDescr.Text %></Text>
    '                               <Font>
    '                                   <Name><%= AnnotDescr.Font.Name %></Name>
    '                                   <Size><%= AnnotDescr.Font.Size %></Size>
    '                                   <Bold><%= AnnotDescr.Font.Bold %></Bold>
    '                                   <Italic><%= AnnotDescr.Font.Italic %></Italic>
    '                                   <Underline><%= AnnotDescr.Font.Underline %></Underline>
    '                                   <Strikeout><%= AnnotDescr.Font.Strikeout %></Strikeout>
    '                               </Font>
    '                               <Color><%= AnnotDescr.Color.ToArgb.ToString %></Color>
    '                               <MidX><%= AnnotDescr.MidX %></MidX>
    '                               <Y><%= AnnotDescr.Y %></Y>
    '                           </Description>
    '                           <EventA>
    '                               <Text><%= AnnotEventA.Text %></Text>
    '                               <Font>
    '                                   <Name><%= AnnotEventA.Font.Name %></Name>
    '                                   <Size><%= AnnotEventA.Font.Size %></Size>
    '                                   <Bold><%= AnnotEventA.Font.Bold %></Bold>
    '                                   <Italic><%= AnnotEventA.Font.Italic %></Italic>
    '                                   <Underline><%= AnnotEventA.Font.Underline %></Underline>
    '                                   <Strikeout><%= AnnotEventA.Font.Strikeout %></Strikeout>
    '                               </Font>
    '                               <Color><%= AnnotEventA.Color.ToArgb.ToString %></Color>
    '                               <Unscaled>
    '                                   <MidX><%= AnnotEventA.Unscaled.MidX %></MidX>
    '                                   <Y><%= AnnotEventA.Unscaled.Y %></Y>
    '                               </Unscaled>
    '                               <ScaleA>
    '                                   <MidX><%= AnnotEventA.ScaleA.MidX %></MidX>
    '                                   <Y><%= AnnotEventA.ScaleA.Y %></Y>
    '                               </ScaleA>
    '                               <ScaleB>
    '                                   <MidX><%= AnnotEventA.ScaleB.MidX %></MidX>
    '                                   <Y><%= AnnotEventA.ScaleB.Y %></Y>
    '                               </ScaleB>
    '                               <ScaleAB>
    '                                   <MidX><%= AnnotEventA.ScaleAB.MidX %></MidX>
    '                                   <Y><%= AnnotEventA.ScaleAB.Y %></Y>
    '                               </ScaleAB>
    '                           </EventA>
    '                           <EventB>
    '                               <Text><%= AnnotEventB.Text %></Text>
    '                               <Font>
    '                                   <Name><%= AnnotEventB.Font.Name %></Name>
    '                                   <Size><%= AnnotEventB.Font.Size %></Size>
    '                                   <Bold><%= AnnotEventB.Font.Bold %></Bold>
    '                                   <Italic><%= AnnotEventB.Font.Italic %></Italic>
    '                                   <Underline><%= AnnotEventB.Font.Underline %></Underline>
    '                                   <Strikeout><%= AnnotEventB.Font.Strikeout %></Strikeout>
    '                               </Font>
    '                               <Color><%= AnnotEventB.Color.ToArgb.ToString %></Color>
    '                               <Unscaled>
    '                                   <MidX><%= AnnotEventB.Unscaled.MidX %></MidX>
    '                                   <Y><%= AnnotEventB.Unscaled.Y %></Y>
    '                               </Unscaled>
    '                               <ScaleA>
    '                                   <MidX><%= AnnotEventB.ScaleA.MidX %></MidX>
    '                                   <Y><%= AnnotEventB.ScaleA.Y %></Y>
    '                               </ScaleA>
    '                               <ScaleB>
    '                                   <MidX><%= AnnotEventB.ScaleB.MidX %></MidX>
    '                                   <Y><%= AnnotEventB.ScaleB.Y %></Y>
    '                               </ScaleB>
    '                               <ScaleAB>
    '                                   <MidX><%= AnnotEventB.ScaleAB.MidX %></MidX>
    '                                   <Y><%= AnnotEventB.ScaleAB.Y %></Y>
    '                               </ScaleAB>
    '                           </EventB>
    '                           <Probability>
    '                               <A>
    '                                   <Text><%= ProbA.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= ProbA.Label.Font.Name %></Name>
    '                                       <Size><%= ProbA.Label.Font.Size %></Size>
    '                                       <Bold><%= ProbA.Label.Font.Bold %></Bold>
    '                                       <Italic><%= ProbA.Label.Font.Italic %></Italic>
    '                                       <Underline><%= ProbA.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= ProbA.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= ProbA.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= ProbA.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= ProbA.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= ProbA.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= ProbA.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= ProbA.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= ProbA.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= ProbA.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= ProbA.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= ProbA.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </A>
    '                               <NotA>
    '                                   <Text><%= ProbNotA.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= ProbNotA.Label.Font.Name %></Name>
    '                                       <Size><%= ProbNotA.Label.Font.Size %></Size>
    '                                       <Bold><%= ProbNotA.Label.Font.Bold %></Bold>
    '                                       <Italic><%= ProbNotA.Label.Font.Italic %></Italic>
    '                                       <Underline><%= ProbNotA.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= ProbNotA.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= ProbNotA.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= ProbNotA.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= ProbNotA.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= ProbNotA.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= ProbNotA.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= ProbNotA.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= ProbNotA.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= ProbNotA.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= ProbNotA.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= ProbNotA.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </NotA>
    '                               <B>
    '                                   <Text><%= ProbB.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= ProbB.Label.Font.Name %></Name>
    '                                       <Size><%= ProbB.Label.Font.Size %></Size>
    '                                       <Bold><%= ProbB.Label.Font.Bold %></Bold>
    '                                       <Italic><%= ProbB.Label.Font.Italic %></Italic>
    '                                       <Underline><%= ProbB.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= ProbB.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= ProbB.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= ProbB.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= ProbB.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= ProbB.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= ProbB.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= ProbB.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= ProbB.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= ProbB.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= ProbB.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= ProbB.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </B>
    '                               <NotB>
    '                                   <Text><%= ProbNotB.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= ProbNotB.Label.Font.Name %></Name>
    '                                       <Size><%= ProbNotB.Label.Font.Size %></Size>
    '                                       <Bold><%= ProbNotB.Label.Font.Bold %></Bold>
    '                                       <Italic><%= ProbNotB.Label.Font.Italic %></Italic>
    '                                       <Underline><%= ProbNotB.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= ProbNotB.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= ProbNotB.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= ProbNotB.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= ProbNotB.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= ProbNotB.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= ProbNotB.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= ProbNotB.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= ProbNotB.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= ProbNotB.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= ProbNotB.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= ProbNotB.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </NotB>
    '                               <AandB>
    '                                   <Text><%= ProbAandB.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= ProbAandB.Label.Font.Name %></Name>
    '                                       <Size><%= ProbAandB.Label.Font.Size %></Size>
    '                                       <Bold><%= ProbAandB.Label.Font.Bold %></Bold>
    '                                       <Italic><%= ProbAandB.Label.Font.Italic %></Italic>
    '                                       <Underline><%= ProbAandB.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= ProbAandB.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= ProbAandB.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= ProbAandB.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= ProbAandB.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= ProbAandB.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= ProbAandB.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= ProbAandB.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= ProbAandB.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= ProbAandB.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= ProbAandB.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= ProbAandB.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </AandB>
    '                               <AandNotB>
    '                                   <Text><%= ProbAandNotB.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= ProbAandNotB.Label.Font.Name %></Name>
    '                                       <Size><%= ProbAandNotB.Label.Font.Size %></Size>
    '                                       <Bold><%= ProbAandNotB.Label.Font.Bold %></Bold>
    '                                       <Italic><%= ProbAandNotB.Label.Font.Italic %></Italic>
    '                                       <Underline><%= ProbAandNotB.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= ProbAandNotB.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= ProbAandNotB.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= ProbAandNotB.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= ProbAandNotB.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= ProbAandNotB.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= ProbAandNotB.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= ProbAandNotB.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= ProbAandNotB.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= ProbAandNotB.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= ProbAandNotB.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= ProbAandNotB.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </AandNotB>
    '                               <NotAandB>
    '                                   <Text><%= ProbNotAandB.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= ProbNotAandB.Label.Font.Name %></Name>
    '                                       <Size><%= ProbNotAandB.Label.Font.Size %></Size>
    '                                       <Bold><%= ProbNotAandB.Label.Font.Bold %></Bold>
    '                                       <Italic><%= ProbNotAandB.Label.Font.Italic %></Italic>
    '                                       <Underline><%= ProbNotAandB.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= ProbNotAandB.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= ProbNotAandB.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= ProbNotAandB.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= ProbNotAandB.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= ProbNotAandB.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= ProbNotAandB.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= ProbNotAandB.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= ProbNotAandB.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= ProbNotAandB.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= ProbNotAandB.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= ProbNotAandB.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </NotAandB>
    '                               <NotAandNotB>
    '                                   <Text><%= ProbNotAandNotB.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= ProbNotAandNotB.Label.Font.Name %></Name>
    '                                       <Size><%= ProbNotAandNotB.Label.Font.Size %></Size>
    '                                       <Bold><%= ProbNotAandNotB.Label.Font.Bold %></Bold>
    '                                       <Italic><%= ProbNotAandNotB.Label.Font.Italic %></Italic>
    '                                       <Underline><%= ProbNotAandNotB.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= ProbNotAandNotB.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= ProbNotAandNotB.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= ProbNotAandNotB.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <X><%= ProbNotAandNotB.Label.Unscaled.X %></X>
    '                                       <Y><%= ProbNotAandNotB.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <X><%= ProbNotAandNotB.Label.ScaleA.X %></X>
    '                                       <Y><%= ProbNotAandNotB.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <X><%= ProbNotAandNotB.Label.ScaleB.X %></X>
    '                                       <Y><%= ProbNotAandNotB.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <X><%= ProbNotAandNotB.Label.ScaleAB.X %></X>
    '                                       <Y><%= ProbNotAandNotB.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </NotAandNotB>
    '                           </Probability>
    '                           <Samples>
    '                               <A>
    '                                   <Text><%= SampsA.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= SampsA.Label.Font.Name %></Name>
    '                                       <Size><%= SampsA.Label.Font.Size %></Size>
    '                                       <Bold><%= SampsA.Label.Font.Bold %></Bold>
    '                                       <Italic><%= SampsA.Label.Font.Italic %></Italic>
    '                                       <Underline><%= SampsA.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= SampsA.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= SampsA.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= SampsA.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= SampsA.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= SampsA.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= SampsA.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= SampsA.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= SampsA.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= SampsA.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= SampsA.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= SampsA.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </A>
    '                               <NotA>
    '                                   <Text><%= SampsNotA.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= SampsNotA.Label.Font.Name %></Name>
    '                                       <Size><%= SampsNotA.Label.Font.Size %></Size>
    '                                       <Bold><%= SampsNotA.Label.Font.Bold %></Bold>
    '                                       <Italic><%= SampsNotA.Label.Font.Italic %></Italic>
    '                                       <Underline><%= SampsNotA.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= SampsNotA.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= SampsNotA.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= SampsNotA.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= SampsNotA.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= SampsNotA.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= SampsNotA.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= SampsNotA.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= SampsNotA.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= SampsNotA.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= SampsNotA.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= SampsNotA.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </NotA>
    '                               <B>
    '                                   <Text><%= SampsB.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= SampsB.Label.Font.Name %></Name>
    '                                       <Size><%= SampsB.Label.Font.Size %></Size>
    '                                       <Bold><%= SampsB.Label.Font.Bold %></Bold>
    '                                       <Italic><%= SampsB.Label.Font.Italic %></Italic>
    '                                       <Underline><%= SampsB.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= SampsB.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= SampsB.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= SampsB.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= SampsB.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= SampsB.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= SampsB.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= SampsB.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= SampsB.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= SampsB.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= SampsB.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= SampsB.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </B>
    '                               <NotB>
    '                                   <Text><%= SampsNotB.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= SampsNotB.Label.Font.Name %></Name>
    '                                       <Size><%= SampsNotB.Label.Font.Size %></Size>
    '                                       <Bold><%= SampsNotB.Label.Font.Bold %></Bold>
    '                                       <Italic><%= SampsNotB.Label.Font.Italic %></Italic>
    '                                       <Underline><%= SampsNotB.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= SampsNotB.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= SampsNotB.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= SampsNotB.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= SampsNotB.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= SampsNotB.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= SampsNotB.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= SampsNotB.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= SampsNotB.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= SampsNotB.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= SampsNotB.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= SampsNotB.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </NotB>
    '                               <AandB>
    '                                   <Text><%= SampsAandB.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= SampsAandB.Label.Font.Name %></Name>
    '                                       <Size><%= SampsAandB.Label.Font.Size %></Size>
    '                                       <Bold><%= SampsAandB.Label.Font.Bold %></Bold>
    '                                       <Italic><%= SampsAandB.Label.Font.Italic %></Italic>
    '                                       <Underline><%= SampsAandB.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= SampsAandB.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= SampsAandB.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= SampsAandB.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= SampsAandB.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= SampsAandB.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= SampsAandB.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= SampsAandB.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= SampsAandB.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= SampsAandB.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= SampsAandB.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= SampsAandB.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </AandB>
    '                               <AandNotB>
    '                                   <Text><%= SampsAandNotB.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= SampsAandNotB.Label.Font.Name %></Name>
    '                                       <Size><%= SampsAandNotB.Label.Font.Size %></Size>
    '                                       <Bold><%= SampsAandNotB.Label.Font.Bold %></Bold>
    '                                       <Italic><%= SampsAandNotB.Label.Font.Italic %></Italic>
    '                                       <Underline><%= SampsAandNotB.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= SampsAandNotB.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= SampsAandNotB.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= SampsAandNotB.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= SampsAandNotB.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= SampsAandNotB.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= SampsAandNotB.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= SampsAandNotB.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= SampsAandNotB.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= SampsAandNotB.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= SampsAandNotB.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= SampsAandNotB.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </AandNotB>
    '                               <NotAandB>
    '                                   <Text><%= SampsNotAandB.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= SampsNotAandB.Label.Font.Name %></Name>
    '                                       <Size><%= SampsNotAandB.Label.Font.Size %></Size>
    '                                       <Bold><%= SampsNotAandB.Label.Font.Bold %></Bold>
    '                                       <Italic><%= SampsNotAandB.Label.Font.Italic %></Italic>
    '                                       <Underline><%= SampsNotAandB.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= SampsNotAandB.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= SampsNotAandB.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= SampsNotAandB.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <MidX><%= SampsNotAandB.Label.Unscaled.MidX %></MidX>
    '                                       <Y><%= SampsNotAandB.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <MidX><%= SampsNotAandB.Label.ScaleA.MidX %></MidX>
    '                                       <Y><%= SampsNotAandB.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <MidX><%= SampsNotAandB.Label.ScaleB.MidX %></MidX>
    '                                       <Y><%= SampsNotAandB.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <MidX><%= SampsNotAandB.Label.ScaleAB.MidX %></MidX>
    '                                       <Y><%= SampsNotAandB.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </NotAandB>
    '                               <NotAandNotB>
    '                                   <Text><%= SampsNotAandNotB.Label.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= SampsNotAandNotB.Label.Font.Name %></Name>
    '                                       <Size><%= SampsNotAandNotB.Label.Font.Size %></Size>
    '                                       <Bold><%= SampsNotAandNotB.Label.Font.Bold %></Bold>
    '                                       <Italic><%= SampsNotAandNotB.Label.Font.Italic %></Italic>
    '                                       <Underline><%= SampsNotAandNotB.Label.Font.Underline %></Underline>
    '                                       <Strikeout><%= SampsNotAandNotB.Label.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= SampsNotAandNotB.Label.Color.ToArgb.ToString %></Color>
    '                                   <Show><%= SampsNotAandNotB.Label.Show %></Show>
    '                                   <Unscaled>
    '                                       <X><%= SampsNotAandNotB.Label.Unscaled.X %></X>
    '                                       <Y><%= SampsNotAandNotB.Label.Unscaled.Y %></Y>
    '                                   </Unscaled>
    '                                   <ScaleA>
    '                                       <X><%= SampsNotAandNotB.Label.ScaleA.X %></X>
    '                                       <Y><%= SampsNotAandNotB.Label.ScaleA.Y %></Y>
    '                                   </ScaleA>
    '                                   <ScaleB>
    '                                       <X><%= SampsNotAandNotB.Label.ScaleB.X %></X>
    '                                       <Y><%= SampsNotAandNotB.Label.ScaleB.Y %></Y>
    '                                   </ScaleB>
    '                                   <ScaleAB>
    '                                       <X><%= SampsNotAandNotB.Label.ScaleAB.X %></X>
    '                                       <Y><%= SampsNotAandNotB.Label.ScaleAB.Y %></Y>
    '                                   </ScaleAB>
    '                               </NotAandNotB>
    '                               <SampleSize>
    '                                   <Prefix><%= SampleSize.Prefix %></Prefix>
    '                                   <Text><%= AnnotSampleSize.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotSampleSize.Font.Name %></Name>
    '                                       <Size><%= AnnotSampleSize.Font.Size %></Size>
    '                                       <Bold><%= AnnotSampleSize.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotSampleSize.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotSampleSize.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotSampleSize.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotSampleSize.Color.ToArgb.ToString %></Color>
    '                                   <MidX><%= AnnotSampleSize.Unscaled.MidX %></MidX>
    '                                   <BaseY><%= AnnotSampleSize.Unscaled.BaseY %></BaseY>
    '                                   <Show><%= AnnotSampleSize.Show %></Show>
    '                               </SampleSize>
    '                               <ConditionalSampleSize>
    '                                   <Text><%= AnnotConditionalSampleSize.Text %></Text>
    '                                   <Font>
    '                                       <Name><%= AnnotConditionalSampleSize.Font.Name %></Name>
    '                                       <Size><%= AnnotConditionalSampleSize.Font.Size %></Size>
    '                                       <Bold><%= AnnotConditionalSampleSize.Font.Bold %></Bold>
    '                                       <Italic><%= AnnotConditionalSampleSize.Font.Italic %></Italic>
    '                                       <Underline><%= AnnotConditionalSampleSize.Font.Underline %></Underline>
    '                                       <Strikeout><%= AnnotConditionalSampleSize.Font.Strikeout %></Strikeout>
    '                                   </Font>
    '                                   <Color><%= AnnotConditionalSampleSize.Color.ToArgb.ToString %></Color>
    '                                   <EndX><%= AnnotConditionalSampleSize.Unscaled.EndX %></EndX>
    '                                   <BaseY><%= AnnotConditionalSampleSize.Unscaled.BaseY %></BaseY>
    '                                   <Show><%= AnnotConditionalSampleSize.Show %></Show>
    '                               </ConditionalSampleSize>
    '                           </Samples>
    '                           <Condition>
    '                               <Name><%= Settings.Condition %></Name>
    '                               <Font>
    '                                   <Name><%= AnnotCondition.Font.Name %></Name>
    '                                   <Size><%= AnnotCondition.Font.Size %></Size>
    '                                   <Bold><%= AnnotCondition.Font.Bold %></Bold>
    '                                   <Italic><%= AnnotCondition.Font.Italic %></Italic>
    '                                   <Underline><%= AnnotCondition.Font.Underline %></Underline>
    '                                   <Strikeout><%= AnnotCondition.Font.Strikeout %></Strikeout>
    '                               </Font>
    '                               <Color><%= AnnotCondition.Color.ToArgb.ToString %></Color>
    '                               <Show><%= AnnotCondition.Show %></Show>
    '                               <None>
    '                                   <Text><%= AnnotCondition.None.Text %></Text>
    '                                   <XPositionReference><%= AnnotCondition.None.XPositionReference %></XPositionReference>
    '                                   <YPositionReference><%= AnnotCondition.None.YPositionReference %></YPositionReference>
    '                                   <X><%= AnnotCondition.None.X %></X>
    '                                   <Y><%= AnnotCondition.None.Y %></Y>
    '                                   <MidX><%= AnnotCondition.None.MidX %></MidX>
    '                                   <MidY><%= AnnotCondition.None.MidY %></MidY>
    '                                   <EndX><%= AnnotCondition.None.EndX %></EndX>
    '                                   <BaseY><%= AnnotCondition.None.BaseY %></BaseY>
    '                               </None>
    '                               <EventATrue>
    '                                   <Text><%= AnnotCondition.EventATrue.Text %></Text>
    '                                   <XPositionReference><%= AnnotCondition.EventATrue.XPositionReference %></XPositionReference>
    '                                   <YPositionReference><%= AnnotCondition.EventATrue.YPositionReference %></YPositionReference>
    '                                   <X><%= AnnotCondition.EventATrue.X %></X>
    '                                   <Y><%= AnnotCondition.EventATrue.Y %></Y>
    '                                   <MidX><%= AnnotCondition.EventATrue.MidX %></MidX>
    '                                   <MidY><%= AnnotCondition.EventATrue.MidY %></MidY>
    '                                   <EndX><%= AnnotCondition.EventATrue.EndX %></EndX>
    '                                   <BaseY><%= AnnotCondition.EventATrue.BaseY %></BaseY>
    '                               </EventATrue>
    '                               <EventAFalse>
    '                                   <Text><%= AnnotCondition.EventAFalse.Text %></Text>
    '                                   <XPositionReference><%= AnnotCondition.EventAFalse.XPositionReference %></XPositionReference>
    '                                   <YPositionReference><%= AnnotCondition.EventAFalse.YPositionReference %></YPositionReference>
    '                                   <X><%= AnnotCondition.EventAFalse.X %></X>
    '                                   <Y><%= AnnotCondition.EventAFalse.Y %></Y>
    '                                   <MidX><%= AnnotCondition.EventAFalse.MidX %></MidX>
    '                                   <MidY><%= AnnotCondition.EventAFalse.MidY %></MidY>
    '                                   <EndX><%= AnnotCondition.EventAFalse.EndX %></EndX>
    '                                   <BaseY><%= AnnotCondition.EventAFalse.BaseY %></BaseY>
    '                               </EventAFalse>
    '                               <EventBTrue>
    '                                   <Text><%= AnnotCondition.EventBTrue.Text %></Text>
    '                                   <XPositionReference><%= AnnotCondition.EventBTrue.XPositionReference %></XPositionReference>
    '                                   <YPositionReference><%= AnnotCondition.EventBTrue.YPositionReference %></YPositionReference>
    '                                   <X><%= AnnotCondition.EventBTrue.X %></X>
    '                                   <Y><%= AnnotCondition.EventBTrue.Y %></Y>
    '                                   <MidX><%= AnnotCondition.EventBTrue.MidX %></MidX>
    '                                   <MidY><%= AnnotCondition.EventBTrue.MidY %></MidY>
    '                                   <EndX><%= AnnotCondition.EventBTrue.EndX %></EndX>
    '                                   <BaseY><%= AnnotCondition.EventBTrue.BaseY %></BaseY>
    '                               </EventBTrue>
    '                               <EventBFalse>
    '                                   <Text><%= AnnotCondition.EventBFalse.Text %></Text>
    '                                   <XPositionReference><%= AnnotCondition.EventBFalse.XPositionReference %></XPositionReference>
    '                                   <YPositionReference><%= AnnotCondition.EventBFalse.YPositionReference %></YPositionReference>
    '                                   <X><%= AnnotCondition.EventBFalse.X %></X>
    '                                   <Y><%= AnnotCondition.EventBFalse.Y %></Y>
    '                                   <MidX><%= AnnotCondition.EventBFalse.MidX %></MidX>
    '                                   <MidY><%= AnnotCondition.EventBFalse.MidY %></MidY>
    '                                   <EndX><%= AnnotCondition.EventBFalse.EndX %></EndX>
    '                                   <BaseY><%= AnnotCondition.EventBFalse.BaseY %></BaseY>
    '                               </EventBFalse>
    '                           </Condition>
    '                       </Annotation>
    '                   </Diagram>
    '               </BayesModel>


    '    '      <SampleSize><%= SampleSize %></SampleSize>

    '    '<SampleSize>
    '    '    <Prefix><%= SampleSizePrefix %></Prefix>


    '    '    <X><%= AnnotSampleSize.X %></X>
    '    '    <BaseY><%= AnnotSampleSize.BaseY %></BaseY>
    '    '    <Show><%= AnnotSampleSize.Show %></Show>
    '    '</SampleSize>
    '    'NOTE: 25Jul21 - The EventA annotation locations are saved under .Unscaled, .ScaleA, ScaleB and ScaelAB.
    '    '<X><%= AnnotEventA.X %></X>
    '    '<Y><%= AnnotEventA.Y %></Y>

    '    '<X><%= AnnotEventB.X %></X>
    '    '<Y><%= AnnotEventB.Y %></Y>

    '    '<X><%= ProbA.Label.X %></X>
    '    '<Y><%= ProbA.Label.Y %></Y>

    '    '<X><%= ProbNotA.Label.X %></X>
    '    '<Y><%= ProbNotA.Label.Y %></Y>

    '    '<X><%= ProbB.Label.X %></X>
    '    '<Y><%= ProbB.Label.Y %></Y>

    '    '<X><%= ProbNotB.Label.X %></X>
    '    '<Y><%= ProbNotB.Label.Y %></Y>

    '    '<X><%= ProbAandB.Label.X %></X>
    '    '<Y><%= ProbAandB.Label.Y %></Y>

    '    '<X><%= ProbAandNotB.Label.X %></X>
    '    '<Y><%= ProbAandNotB.Label.Y %></Y>

    '    '<X><%= ProbNotAandB.Label.X %></X>
    '    '<Y><%= ProbNotAandB.Label.Y %></Y>

    '    '<X><%= ProbNotAandNotB.Label.X %></X>
    '    '<Y><%= ProbNotAandNotB.Label.Y %></Y>

    '    '<X><%= SampsA.Label.X %></X>
    '    '<Y><%= SampsA.Label.Y %></Y>

    '    '<X><%= SampsNotA.Label.X %></X>
    '    '<Y><%= SampsNotA.Label.Y %></Y>

    '    '<X><%= SampsB.Label.X %></X>
    '    '<Y><%= SampsB.Label.Y %></Y>

    '    '<X><%= SampsNotB.Label.X %></X>
    '    '<Y><%= SampsNotB.Label.Y %></Y>

    '    '<X><%= SampsAandB.Label.X %></X>
    '    '<Y><%= SampsAandB.Label.Y %></Y>

    '    '<X><%= SampsAandNotB.Label.X %></X>
    '    '<Y><%= SampsAandNotB.Label.Y %></Y>

    '    '<X><%= SampsNotAandB.Label.X %></X>
    '    '<Y><%= SampsNotAandB.Label.Y %></Y>

    '    '<X><%= SampsNotAandNotB.Label.X %></X>
    '    '<Y><%= SampsNotAandNotB.Label.Y %></Y>




    '    '<Probability><%= ProbA.Value %></Probability>
    '    '    </EventA>

    '    '<Probability><%= ProbB.Value %></Probability>
    '    '    </EventB>

    '    '<BgivenA><%= ProbB.GivenA.Value %></BgivenA>
    '    '<BgivenNotA><%= ProbB.GivenNotA.Value %></BgivenNotA>
    '    '<AgivenB><%= ProbA.GivenB.Value %></AgivenB>

    '    '<Probability>
    '    '    <AandB><%= ProbAandB %></AandB>
    '    '    <BgivenA><%= ProbBgivenA %></BgivenA>
    '    '    <BgivenNotA><%= ProbBgivenNotA %></BgivenNotA>
    '    '    <AgivenB><%= ProbAgivenB %></AgivenB>
    '    '</Probability>

    '    '<Condition>
    '    '    <Name><%= Condition %></Name>
    '    '    <Show><%= AnnotConditionShow %></Show>
    '    '    <EventATrueLabel><%= AnnotConditionLabelATrue %></EventATrueLabel>
    '    '    <EventAFalseLabel><%= AnnotConditionLabelAFalse %></EventAFalseLabel>
    '    '    <EventBTrueLabel><%= AnnotConditionLabelBTrue %></EventBTrueLabel>
    '    '    <EventBFalseLabel><%= AnnotConditionLabelBFalse %></EventBFalseLabel>
    '    '</Condition>


    '    Return XDoc
    'End Function

    Public Function BayesToXDoc() As System.Xml.Linq.XDocument
        'Return an XDocument containing the Bayes model.

        Dim XDoc = <?xml version="1.0" encoding="utf-8"?>
                   <!---->
                   <!--Bayes Model File-->
                   <BayesModel>
                       <Name><%= Name %></Name>
                       <Label><%= Label %></Label>
                       <Description><%= Description %></Description>
                       <Notes><%= System.Xml.XmlConvert.EncodeName(Notes) %></Notes>
                       <InputInfoType><%= InputInfoType %></InputInfoType>
                       <ProbabilityMeasure><%= Settings.ProbabilityMeasure %></ProbabilityMeasure>
                       <DecimalFormat><%= Settings.DecimalFormat %></DecimalFormat>
                       <PercentFormat><%= Settings.PercentFormat %></PercentFormat>
                       <SamplesFormat><%= Settings.SamplesFormat %></SamplesFormat>
                       <SampleSize><%= SampleSize.Value %></SampleSize>
                       <ShowProbabilities><%= ShowProbabilities %></ShowProbabilities>
                       <ShowSampleCounts><%= ShowSampleCounts %></ShowSampleCounts>
                       <EventA>
                           <Name><%= EventA.Name %></Name>
                           <Description><%= EventA.Description %></Description>
                           <NotName><%= EventA.NotName %></NotName>
                       </EventA>
                       <EventB>
                           <Name><%= EventB.Name %></Name>
                           <Description><%= EventB.Description %></Description>
                           <NotName><%= EventB.NotName %></NotName>
                       </EventB>
                       <Probability>
                           <AValue><%= ProbA.Value %></AValue>
                           <AStatus><%= ProbA.Status %></AStatus>
                           <ARank><%= ProbA.Rank %></ARank>
                           <NotAValue><%= ProbNotA.Value %></NotAValue>
                           <NotAStatus><%= ProbNotA.Status %></NotAStatus>
                           <NotARank><%= ProbNotA.Rank %></NotARank>
                           <BValue><%= ProbB.Value %></BValue>
                           <BStatus><%= ProbB.Status %></BStatus>
                           <BRank><%= ProbB.Rank %></BRank>
                           <NotBValue><%= ProbNotB.Value %></NotBValue>
                           <NotBStatus><%= ProbNotB.Status %></NotBStatus>
                           <NotBRank><%= ProbNotB.Rank %></NotBRank>
                           <AandBValue><%= ProbAandB.Value %></AandBValue>
                           <AandBStatus><%= ProbAandB.Status %></AandBStatus>
                           <AandBRank><%= ProbAandB.Rank %></AandBRank>
                           <AandNotBValue><%= ProbAandNotB.Value %></AandNotBValue>
                           <AandNotBStatus><%= ProbAandNotB.Status %></AandNotBStatus>
                           <AandNotBRank><%= ProbAandNotB.Rank %></AandNotBRank>
                           <NotAandBValue><%= ProbNotAandB.Value %></NotAandBValue>
                           <NotAandBStatus><%= ProbNotAandB.Status %></NotAandBStatus>
                           <NotAandBRank><%= ProbNotAandB.Rank %></NotAandBRank>
                           <NotAandNotBValue><%= ProbNotAandNotB.Value %></NotAandNotBValue>
                           <NotAandNotBStatus><%= ProbNotAandNotB.Status %></NotAandNotBStatus>
                           <NotAandNotBRank><%= ProbNotAandNotB.Rank %></NotAandNotBRank>
                           <GivenA>
                               <AValue><%= ProbA.GivenA.Value %></AValue>
                               <AStatus><%= ProbA.GivenA.Status %></AStatus>
                               <ARank><%= ProbA.GivenA.Rank %></ARank>
                               <NotAValue><%= ProbNotA.GivenA.Value %></NotAValue>
                               <NotAStatus><%= ProbNotA.GivenA.Status %></NotAStatus>
                               <NotARank><%= ProbNotA.GivenA.Rank %></NotARank>
                               <BValue><%= ProbB.GivenA.Value %></BValue>
                               <BStatus><%= ProbB.GivenA.Status %></BStatus>
                               <BRank><%= ProbB.GivenA.Rank %></BRank>
                               <NotBValue><%= ProbNotB.GivenA.Value %></NotBValue>
                               <NotBStatus><%= ProbNotB.GivenA.Status %></NotBStatus>
                               <NotBRank><%= ProbNotB.GivenA.Rank %></NotBRank>
                               <AandBValue><%= ProbAandB.GivenA.Value %></AandBValue>
                               <AandBStatus><%= ProbAandB.GivenA.Status %></AandBStatus>
                               <AandBRank><%= ProbAandB.GivenA.Rank %></AandBRank>
                               <AandNotBValue><%= ProbAandNotB.GivenA.Value %></AandNotBValue>
                               <AandNotBStatus><%= ProbAandNotB.GivenA.Status %></AandNotBStatus>
                               <AandNotBRank><%= ProbAandNotB.GivenA.Rank %></AandNotBRank>
                               <NotAandBValue><%= ProbNotAandB.GivenA.Value %></NotAandBValue>
                               <NotAandBStatus><%= ProbNotAandB.GivenA.Status %></NotAandBStatus>
                               <NotAandBRank><%= ProbNotAandB.GivenA.Rank %></NotAandBRank>
                               <NotAandNotBValue><%= ProbNotAandNotB.GivenA.Value %></NotAandNotBValue>
                               <NotAandNotBStatus><%= ProbNotAandNotB.GivenA.Status %></NotAandNotBStatus>
                               <NotAandNotBRank><%= ProbNotAandNotB.GivenA.Rank %></NotAandNotBRank>
                           </GivenA>
                           <GivenNotA>
                               <AValue><%= ProbA.GivenNotA.Value %></AValue>
                               <AStatus><%= ProbA.GivenNotA.Status %></AStatus>
                               <ARank><%= ProbA.GivenA.Rank %></ARank>
                               <NotAValue><%= ProbNotA.GivenNotA.Value %></NotAValue>
                               <NotAStatus><%= ProbNotA.GivenNotA.Status %></NotAStatus>
                               <NotARank><%= ProbNotA.GivenA.Rank %></NotARank>
                               <BValue><%= ProbB.GivenNotA.Value %></BValue>
                               <BStatus><%= ProbB.GivenNotA.Status %></BStatus>
                               <BRank><%= ProbB.GivenA.Rank %></BRank>
                               <NotBValue><%= ProbNotB.GivenNotA.Value %></NotBValue>
                               <NotBStatus><%= ProbNotB.GivenNotA.Status %></NotBStatus>
                               <NotBRank><%= ProbNotB.GivenA.Rank %></NotBRank>
                               <AandBValue><%= ProbAandB.GivenNotA.Value %></AandBValue>
                               <AandBStatus><%= ProbAandB.GivenNotA.Status %></AandBStatus>
                               <AandBRank><%= ProbAandB.GivenA.Rank %></AandBRank>
                               <AandNotBValue><%= ProbAandNotB.GivenNotA.Value %></AandNotBValue>
                               <AandNotBStatus><%= ProbAandNotB.GivenNotA.Status %></AandNotBStatus>
                               <AandNotBRank><%= ProbAandNotB.GivenA.Rank %></AandNotBRank>
                               <NotAandBValue><%= ProbNotAandB.GivenNotA.Value %></NotAandBValue>
                               <NotAandBStatus><%= ProbNotAandB.GivenNotA.Status %></NotAandBStatus>
                               <NotAandBRank><%= ProbNotAandB.GivenA.Rank %></NotAandBRank>
                               <NotAandNotBValue><%= ProbNotAandNotB.GivenNotA.Value %></NotAandNotBValue>
                               <NotAandNotBStatus><%= ProbNotAandNotB.GivenNotA.Status %></NotAandNotBStatus>
                               <NotAandNotBRank><%= ProbNotAandNotB.GivenA.Rank %></NotAandNotBRank>
                           </GivenNotA>
                           <GivenB>
                               <AValue><%= ProbA.GivenB.Value %></AValue>
                               <AStatus><%= ProbA.GivenB.Status %></AStatus>
                               <ARank><%= ProbA.GivenA.Rank %></ARank>
                               <NotAValue><%= ProbNotA.GivenB.Value %></NotAValue>
                               <NotAStatus><%= ProbNotA.GivenB.Status %></NotAStatus>
                               <NotARank><%= ProbNotA.GivenA.Rank %></NotARank>
                               <BValue><%= ProbB.GivenB.Value %></BValue>
                               <BStatus><%= ProbB.GivenB.Status %></BStatus>
                               <BRank><%= ProbB.GivenA.Rank %></BRank>
                               <NotBValue><%= ProbNotB.GivenB.Value %></NotBValue>
                               <NotBStatus><%= ProbNotB.GivenB.Status %></NotBStatus>
                               <NotBRank><%= ProbNotB.GivenA.Rank %></NotBRank>
                               <AandBValue><%= ProbAandB.GivenB.Value %></AandBValue>
                               <AandBStatus><%= ProbAandB.GivenB.Status %></AandBStatus>
                               <AandBRank><%= ProbAandB.GivenA.Rank %></AandBRank>
                               <AandNotBValue><%= ProbAandNotB.GivenB.Value %></AandNotBValue>
                               <AandNotBStatus><%= ProbAandNotB.GivenB.Status %></AandNotBStatus>
                               <AandNotBRank><%= ProbAandNotB.GivenA.Rank %></AandNotBRank>
                               <NotAandBValue><%= ProbNotAandB.GivenB.Value %></NotAandBValue>
                               <NotAandBStatus><%= ProbNotAandB.GivenB.Status %></NotAandBStatus>
                               <NotAandBRank><%= ProbNotAandB.GivenA.Rank %></NotAandBRank>
                               <NotAandNotBValue><%= ProbNotAandNotB.GivenB.Value %></NotAandNotBValue>
                               <NotAandNotBStatus><%= ProbNotAandNotB.GivenB.Status %></NotAandNotBStatus>
                               <NotAandNotBRank><%= ProbNotAandNotB.GivenA.Rank %></NotAandNotBRank>
                           </GivenB>
                           <GivenNotB>
                               <AValue><%= ProbA.GivenNotB.Value %></AValue>
                               <AStatus><%= ProbA.GivenNotB.Status %></AStatus>
                               <ARank><%= ProbA.GivenA.Rank %></ARank>
                               <NotAValue><%= ProbNotA.GivenNotB.Value %></NotAValue>
                               <NotAStatus><%= ProbNotA.GivenNotB.Status %></NotAStatus>
                               <NotARank><%= ProbNotA.GivenA.Rank %></NotARank>
                               <BValue><%= ProbB.GivenNotB.Value %></BValue>
                               <BStatus><%= ProbB.GivenNotB.Status %></BStatus>
                               <BRank><%= ProbB.GivenA.Rank %></BRank>
                               <NotBValue><%= ProbNotB.GivenNotB.Value %></NotBValue>
                               <NotBStatus><%= ProbNotB.GivenNotB.Status %></NotBStatus>
                               <NotBRank><%= ProbNotB.GivenA.Rank %></NotBRank>
                               <AandBValue><%= ProbAandB.GivenNotB.Value %></AandBValue>
                               <AandBStatus><%= ProbAandB.GivenNotB.Status %></AandBStatus>
                               <AandBRank><%= ProbAandB.GivenA.Rank %></AandBRank>
                               <AandNotBValue><%= ProbAandNotB.GivenNotB.Value %></AandNotBValue>
                               <AandNotBStatus><%= ProbAandNotB.GivenNotB.Status %></AandNotBStatus>
                               <AandNotBRank><%= ProbAandNotB.GivenA.Rank %></AandNotBRank>
                               <NotAandBValue><%= ProbNotAandB.GivenNotB.Value %></NotAandBValue>
                               <NotAandBStatus><%= ProbNotAandB.GivenNotB.Status %></NotAandBStatus>
                               <NotAandBRank><%= ProbNotAandB.GivenA.Rank %></NotAandBRank>
                               <NotAandNotBValue><%= ProbNotAandNotB.GivenNotB.Value %></NotAandNotBValue>
                               <NotAandNotBStatus><%= ProbNotAandNotB.GivenNotB.Status %></NotAandNotBStatus>
                               <NotAandNotBRank><%= ProbNotAandNotB.GivenA.Rank %></NotAandNotBRank>
                           </GivenNotB>
                       </Probability>
                       <SampleCount>
                           <AValue><%= SampsA.Value %></AValue>
                           <AStatus><%= SampsA.Status %></AStatus>
                           <ARank><%= SampsA.Rank %></ARank>
                           <NotAValue><%= SampsNotA.Value %></NotAValue>
                           <NotAStatus><%= SampsNotA.Status %></NotAStatus>
                           <NotARank><%= SampsNotA.Rank %></NotARank>
                           <BValue><%= SampsB.Value %></BValue>
                           <BStatus><%= SampsB.Status %></BStatus>
                           <BRank><%= SampsB.Rank %></BRank>
                           <NotBValue><%= SampsNotB.Value %></NotBValue>
                           <NotBStatus><%= SampsNotB.Status %></NotBStatus>
                           <NotBRank><%= SampsNotB.Rank %></NotBRank>
                           <AandBValue><%= SampsAandB.Value %></AandBValue>
                           <AandBStatus><%= SampsAandB.Status %></AandBStatus>
                           <AandBRank><%= SampsAandB.Rank %></AandBRank>
                           <AandNotBValue><%= SampsAandNotB.Value %></AandNotBValue>
                           <AandNotBStatus><%= SampsAandNotB.Status %></AandNotBStatus>
                           <AandNotBRank><%= SampsAandNotB.Rank %></AandNotBRank>
                           <NotAandBValue><%= SampsNotAandB.Value %></NotAandBValue>
                           <NotAandBStatus><%= SampsNotAandB.Status %></NotAandBStatus>
                           <NotAandBRank><%= SampsNotAandB.Rank %></NotAandBRank>
                           <NotAandNotBValue><%= SampsNotAandNotB.Value %></NotAandNotBValue>
                           <NotAandNotBStatus><%= SampsNotAandNotB.Status %></NotAandNotBStatus>
                           <NotAandNotBRank><%= SampsNotAandNotB.Rank %></NotAandNotBRank>
                           <GivenA>
                               <AValue><%= SampsA.GivenA.Value %></AValue>
                               <AStatus><%= SampsA.GivenA.Status %></AStatus>
                               <ARank><%= SampsA.GivenA.Rank %></ARank>
                               <NotAValue><%= SampsNotA.GivenA.Value %></NotAValue>
                               <NotAStatus><%= SampsNotA.GivenA.Status %></NotAStatus>
                               <NotARank><%= SampsNotA.GivenA.Rank %></NotARank>
                               <BValue><%= SampsB.GivenA.Value %></BValue>
                               <BStatus><%= SampsB.GivenA.Status %></BStatus>
                               <BRank><%= SampsB.GivenA.Rank %></BRank>
                               <NotBValue><%= SampsNotB.GivenA.Value %></NotBValue>
                               <NotBStatus><%= SampsNotB.GivenA.Status %></NotBStatus>
                               <NotBRank><%= SampsNotB.GivenA.Rank %></NotBRank>
                               <AandBValue><%= SampsAandB.GivenA.Value %></AandBValue>
                               <AandBStatus><%= SampsAandB.GivenA.Status %></AandBStatus>
                               <AandBRank><%= SampsAandB.GivenA.Rank %></AandBRank>
                               <AandNotBValue><%= SampsAandNotB.GivenA.Value %></AandNotBValue>
                               <AandNotBStatus><%= SampsAandNotB.GivenA.Status %></AandNotBStatus>
                               <AandNotBRank><%= SampsAandNotB.GivenA.Rank %></AandNotBRank>
                               <NotAandBValue><%= SampsNotAandB.GivenA.Value %></NotAandBValue>
                               <NotAandBStatus><%= SampsNotAandB.GivenA.Status %></NotAandBStatus>
                               <NotAandBRank><%= SampsNotAandB.GivenA.Rank %></NotAandBRank>
                               <NotAandNotBValue><%= SampsNotAandNotB.GivenA.Value %></NotAandNotBValue>
                               <NotAandNotBStatus><%= SampsNotAandNotB.GivenA.Status %></NotAandNotBStatus>
                               <NotAandNotBRank><%= SampsNotAandNotB.GivenA.Rank %></NotAandNotBRank>
                           </GivenA>
                           <GivenNotA>
                               <AValue><%= SampsA.GivenNotA.Value %></AValue>
                               <AStatus><%= SampsA.GivenNotA.Status %></AStatus>
                               <ARank><%= SampsA.GivenNotA.Rank %></ARank>
                               <NotAValue><%= SampsNotA.GivenNotA.Value %></NotAValue>
                               <NotAStatus><%= SampsNotA.GivenNotA.Status %></NotAStatus>
                               <NotARank><%= SampsNotA.GivenNotA.Rank %></NotARank>
                               <BValue><%= SampsB.GivenNotA.Value %></BValue>
                               <BStatus><%= SampsB.GivenNotA.Status %></BStatus>
                               <BRank><%= SampsB.GivenNotA.Rank %></BRank>
                               <NotBValue><%= SampsNotB.GivenNotA.Value %></NotBValue>
                               <NotBStatus><%= SampsNotB.GivenNotA.Status %></NotBStatus>
                               <NotBRank><%= SampsNotB.GivenNotA.Rank %></NotBRank>
                               <AandBValue><%= SampsAandB.GivenNotA.Value %></AandBValue>
                               <AandBStatus><%= SampsAandB.GivenNotA.Status %></AandBStatus>
                               <AandBRank><%= SampsAandB.GivenNotA.Rank %></AandBRank>
                               <AandNotBValue><%= SampsAandNotB.GivenNotA.Value %></AandNotBValue>
                               <AandNotBStatus><%= SampsAandNotB.GivenNotA.Status %></AandNotBStatus>
                               <AandNotBRank><%= SampsAandNotB.GivenNotA.Rank %></AandNotBRank>
                               <NotAandBValue><%= SampsNotAandB.GivenNotA.Value %></NotAandBValue>
                               <NotAandBStatus><%= SampsNotAandB.GivenNotA.Status %></NotAandBStatus>
                               <NotAandBRank><%= SampsNotAandB.GivenNotA.Rank %></NotAandBRank>
                               <NotAandNotBValue><%= SampsNotAandNotB.GivenNotA.Value %></NotAandNotBValue>
                               <NotAandNotBStatus><%= SampsNotAandNotB.GivenNotA.Status %></NotAandNotBStatus>
                               <NotAandNotBRank><%= SampsNotAandNotB.GivenNotA.Rank %></NotAandNotBRank>
                           </GivenNotA>
                           <GivenB>
                               <AValue><%= SampsA.GivenB.Value %></AValue>
                               <AStatus><%= SampsA.GivenB.Status %></AStatus>
                               <ARank><%= SampsA.GivenB.Rank %></ARank>
                               <NotAValue><%= SampsNotA.GivenB.Value %></NotAValue>
                               <NotAStatus><%= SampsNotA.GivenB.Status %></NotAStatus>
                               <NotARank><%= SampsNotA.GivenB.Rank %></NotARank>
                               <BValue><%= SampsB.GivenB.Value %></BValue>
                               <BStatus><%= SampsB.GivenB.Status %></BStatus>
                               <BRank><%= SampsB.GivenB.Rank %></BRank>
                               <NotBValue><%= SampsNotB.GivenB.Value %></NotBValue>
                               <NotBStatus><%= SampsNotB.GivenB.Status %></NotBStatus>
                               <NotBRank><%= SampsNotB.GivenB.Rank %></NotBRank>
                               <AandBValue><%= SampsAandB.GivenB.Value %></AandBValue>
                               <AandBStatus><%= SampsAandB.GivenB.Status %></AandBStatus>
                               <AandBRank><%= SampsAandB.GivenB.Rank %></AandBRank>
                               <AandNotBValue><%= SampsAandNotB.GivenB.Value %></AandNotBValue>
                               <AandNotBStatus><%= SampsAandNotB.GivenB.Status %></AandNotBStatus>
                               <AandNotBRank><%= SampsAandNotB.GivenB.Rank %></AandNotBRank>
                               <NotAandBValue><%= SampsNotAandB.GivenB.Value %></NotAandBValue>
                               <NotAandBStatus><%= SampsNotAandB.GivenB.Status %></NotAandBStatus>
                               <NotAandBRank><%= SampsNotAandB.GivenB.Rank %></NotAandBRank>
                               <NotAandNotBValue><%= SampsNotAandNotB.GivenB.Value %></NotAandNotBValue>
                               <NotAandNotBStatus><%= SampsNotAandNotB.GivenB.Status %></NotAandNotBStatus>
                               <NotAandNotBRank><%= SampsNotAandNotB.GivenB.Rank %></NotAandNotBRank>
                           </GivenB>
                           <GivenNotB>
                               <AValue><%= SampsA.GivenNotB.Value %></AValue>
                               <AStatus><%= SampsA.GivenNotB.Status %></AStatus>
                               <ARank><%= SampsA.GivenNotB.Rank %></ARank>
                               <NotAValue><%= SampsNotA.GivenNotB.Value %></NotAValue>
                               <NotAStatus><%= SampsNotA.GivenNotB.Status %></NotAStatus>
                               <NotARank><%= SampsNotA.GivenNotB.Rank %></NotARank>
                               <BValue><%= SampsB.GivenNotB.Value %></BValue>
                               <BStatus><%= SampsB.GivenNotB.Status %></BStatus>
                               <BRank><%= SampsB.GivenNotB.Rank %></BRank>
                               <NotBValue><%= SampsNotB.GivenNotB.Value %></NotBValue>
                               <NotBStatus><%= SampsNotB.GivenNotB.Status %></NotBStatus>
                               <NotBRank><%= SampsNotB.GivenNotB.Rank %></NotBRank>
                               <AandBValue><%= SampsAandB.GivenNotB.Value %></AandBValue>
                               <AandBStatus><%= SampsAandB.GivenNotB.Status %></AandBStatus>
                               <AandBRank><%= SampsAandB.GivenNotB.Rank %></AandBRank>
                               <AandNotBValue><%= SampsAandNotB.GivenNotB.Value %></AandNotBValue>
                               <AandNotBStatus><%= SampsAandNotB.GivenNotB.Status %></AandNotBStatus>
                               <AandNotBRank><%= SampsAandNotB.GivenNotB.Rank %></AandNotBRank>
                               <NotAandBValue><%= SampsNotAandB.GivenNotB.Value %></NotAandBValue>
                               <NotAandBStatus><%= SampsNotAandB.GivenNotB.Status %></NotAandBStatus>
                               <NotAandBRank><%= SampsNotAandB.GivenNotB.Rank %></NotAandBRank>
                               <NotAandNotBValue><%= SampsNotAandNotB.GivenNotB.Value %></NotAandNotBValue>
                               <NotAandNotBStatus><%= SampsNotAandNotB.GivenNotB.Status %></NotAandNotBStatus>
                               <NotAandNotBRank><%= SampsNotAandNotB.GivenNotB.Rank %></NotAandNotBRank>
                           </GivenNotB>
                       </SampleCount>
                       <Diagram>
                           <LineColor><%= Diagram.LineColor.ToArgb.ToString %></LineColor>
                           <LineThickness><%= Diagram.LineThickness %></LineThickness>
                           <BoldLineThickness><%= Diagram.BoldLineThickness %></BoldLineThickness>
                           <BoldLine><%= Diagram.BoldLine %></BoldLine>
                           <FillColor><%= Diagram.FillColor.ToArgb.ToString %></FillColor>
                           <Height><%= Diagram.Height %></Height>
                           <Width><%= Diagram.Width %></Width>
                           <EventA>
                               <LineColor><%= EventA.LineColor.ToArgb.ToString %></LineColor>
                               <FillColor><%= EventA.FillColor.ToArgb.ToString %></FillColor>
                               <Shape><%= EventA.Shape %></Shape>
                               <LineThickness><%= EventA.LineThickness %></LineThickness>
                               <BoldLineThickness><%= EventA.BoldLineThickness %></BoldLineThickness>
                               <BoldLine><%= EventA.BoldLine %></BoldLine>
                               <Unscaled>
                                   <XMin><%= EventA.Unscaled.XMin %></XMin>
                                   <XMax><%= EventA.Unscaled.XMax %></XMax>
                                   <YMin><%= EventA.Unscaled.YMin %></YMin>
                                   <YMax><%= EventA.Unscaled.YMax %></YMax>
                               </Unscaled>
                               <ScaleA>
                                   <XMin><%= EventA.ScaleA.XMin %></XMin>
                                   <XMax><%= EventA.ScaleA.XMax %></XMax>
                                   <YMin><%= EventA.ScaleA.YMin %></YMin>
                                   <YMax><%= EventA.ScaleA.YMax %></YMax>
                               </ScaleA>
                               <ScaleB>
                                   <XMin><%= EventA.ScaleB.XMin %></XMin>
                                   <XMax><%= EventA.ScaleB.XMax %></XMax>
                                   <YMin><%= EventA.ScaleB.YMin %></YMin>
                                   <YMax><%= EventA.ScaleB.YMax %></YMax>
                               </ScaleB>
                               <ScaleAB>
                                   <XMin><%= EventA.ScaleAB.XMin %></XMin>
                                   <XMax><%= EventA.ScaleAB.XMax %></XMax>
                                   <YMin><%= EventA.ScaleAB.YMin %></YMin>
                                   <YMax><%= EventA.ScaleAB.YMax %></YMax>
                               </ScaleAB>
                           </EventA>
                           <EventB>
                               <LineColor><%= EventB.LineColor.ToArgb.ToString %></LineColor>
                               <FillColor><%= EventB.FillColor.ToArgb.ToString %></FillColor>
                               <Shape><%= EventB.Shape %></Shape>
                               <LineThickness><%= EventB.LineThickness %></LineThickness>
                               <BoldLineThickness><%= EventB.BoldLineThickness %></BoldLineThickness>
                               <BoldLine><%= EventB.BoldLine %></BoldLine>
                               <Unscaled>
                                   <XMin><%= EventB.Unscaled.XMin %></XMin>
                                   <XMax><%= EventB.Unscaled.XMax %></XMax>
                                   <YMin><%= EventB.Unscaled.YMin %></YMin>
                                   <YMax><%= EventB.Unscaled.YMax %></YMax>
                               </Unscaled>
                               <ScaleA>
                                   <XMin><%= EventB.ScaleA.XMin %></XMin>
                                   <XMax><%= EventB.ScaleA.XMax %></XMax>
                                   <YMin><%= EventB.ScaleA.YMin %></YMin>
                                   <YMax><%= EventB.ScaleA.YMax %></YMax>
                               </ScaleA>
                               <ScaleB>
                                   <XMin><%= EventB.ScaleB.XMin %></XMin>
                                   <XMax><%= EventB.ScaleB.XMax %></XMax>
                                   <YMin><%= EventB.ScaleB.YMin %></YMin>
                                   <YMax><%= EventB.ScaleB.YMax %></YMax>
                               </ScaleB>
                               <ScaleAB>
                                   <XMin><%= EventB.ScaleAB.XMin %></XMin>
                                   <XMax><%= EventB.ScaleAB.XMax %></XMax>
                                   <YMin><%= EventB.ScaleAB.YMin %></YMin>
                                   <YMax><%= EventB.ScaleAB.YMax %></YMax>
                               </ScaleAB>
                           </EventB>
                           <EventAandBFillColor><%= EventAandBFillColor.ToArgb.ToString %></EventAandBFillColor>
                           <HighLight>
                               <RegionColor><%= HighlightRegion.Color.ToArgb.ToString %></RegionColor>
                               <A><%= HighlightRegion.A %></A>
                               <NotA><%= HighlightRegion.NotA %></NotA>
                               <B><%= HighlightRegion.B %></B>
                               <NotB><%= HighlightRegion.NotB %></NotB>
                               <AandB><%= HighlightRegion.AandB %></AandB>
                               <AandNotB><%= HighlightRegion.AandNotB %></AandNotB>
                               <NotAandB><%= HighlightRegion.NotAandB %></NotAandB>
                               <NotAandNotB><%= HighlightRegion.NotAandNotB %></NotAandNotB>
                           </HighLight>
                           <ZeroProbability>
                               <RegionColor><%= ZeroProbRegion.Color.ToArgb.ToString %></RegionColor>
                               <A><%= ZeroProbRegion.A %></A>
                               <NotA><%= ZeroProbRegion.NotA %></NotA>
                               <B><%= ZeroProbRegion.B %></B>
                               <NotB><%= ZeroProbRegion.NotB %></NotB>
                               <AandB><%= ZeroProbRegion.AandB %></AandB>
                               <AandNotB><%= ZeroProbRegion.AandNotB %></AandNotB>
                               <NotAandB><%= ZeroProbRegion.NotAandB %></NotAandB>
                               <NotAandNotB><%= ZeroProbRegion.NotAandNotB %></NotAandNotB>
                           </ZeroProbability>
                           <Annotation>
                               <Title>
                                   <Text><%= AnnotTitle.Text %></Text>
                                   <Font>
                                       <Name><%= AnnotTitle.Font.Name %></Name>
                                       <Size><%= AnnotTitle.Font.Size %></Size>
                                       <Bold><%= AnnotTitle.Font.Bold %></Bold>
                                       <Italic><%= AnnotTitle.Font.Italic %></Italic>
                                       <Underline><%= AnnotTitle.Font.Underline %></Underline>
                                       <Strikeout><%= AnnotTitle.Font.Strikeout %></Strikeout>
                                   </Font>
                                   <Color><%= AnnotTitle.Color.ToArgb.ToString %></Color>
                                   <MidX><%= AnnotTitle.MidX %></MidX>
                                   <Y><%= AnnotTitle.Y %></Y>
                               </Title>
                               <Description>
                                   <Text><%= AnnotDescr.Text %></Text>
                                   <Font>
                                       <Name><%= AnnotDescr.Font.Name %></Name>
                                       <Size><%= AnnotDescr.Font.Size %></Size>
                                       <Bold><%= AnnotDescr.Font.Bold %></Bold>
                                       <Italic><%= AnnotDescr.Font.Italic %></Italic>
                                       <Underline><%= AnnotDescr.Font.Underline %></Underline>
                                       <Strikeout><%= AnnotDescr.Font.Strikeout %></Strikeout>
                                   </Font>
                                   <Color><%= AnnotDescr.Color.ToArgb.ToString %></Color>
                                   <MidX><%= AnnotDescr.MidX %></MidX>
                                   <Y><%= AnnotDescr.Y %></Y>
                               </Description>
                               <EventA>
                                   <Text><%= AnnotEventA.Text %></Text>
                                   <Font>
                                       <Name><%= AnnotEventA.Font.Name %></Name>
                                       <Size><%= AnnotEventA.Font.Size %></Size>
                                       <Bold><%= AnnotEventA.Font.Bold %></Bold>
                                       <Italic><%= AnnotEventA.Font.Italic %></Italic>
                                       <Underline><%= AnnotEventA.Font.Underline %></Underline>
                                       <Strikeout><%= AnnotEventA.Font.Strikeout %></Strikeout>
                                   </Font>
                                   <Color><%= AnnotEventA.Color.ToArgb.ToString %></Color>
                                   <Unscaled>
                                       <MidX><%= AnnotEventA.Unscaled.MidX %></MidX>
                                       <Y><%= AnnotEventA.Unscaled.Y %></Y>
                                   </Unscaled>
                                   <ScaleA>
                                       <MidX><%= AnnotEventA.ScaleA.MidX %></MidX>
                                       <Y><%= AnnotEventA.ScaleA.Y %></Y>
                                   </ScaleA>
                                   <ScaleB>
                                       <MidX><%= AnnotEventA.ScaleB.MidX %></MidX>
                                       <Y><%= AnnotEventA.ScaleB.Y %></Y>
                                   </ScaleB>
                                   <ScaleAB>
                                       <MidX><%= AnnotEventA.ScaleAB.MidX %></MidX>
                                       <Y><%= AnnotEventA.ScaleAB.Y %></Y>
                                   </ScaleAB>
                               </EventA>
                               <EventB>
                                   <Text><%= AnnotEventB.Text %></Text>
                                   <Font>
                                       <Name><%= AnnotEventB.Font.Name %></Name>
                                       <Size><%= AnnotEventB.Font.Size %></Size>
                                       <Bold><%= AnnotEventB.Font.Bold %></Bold>
                                       <Italic><%= AnnotEventB.Font.Italic %></Italic>
                                       <Underline><%= AnnotEventB.Font.Underline %></Underline>
                                       <Strikeout><%= AnnotEventB.Font.Strikeout %></Strikeout>
                                   </Font>
                                   <Color><%= AnnotEventB.Color.ToArgb.ToString %></Color>
                                   <Unscaled>
                                       <MidX><%= AnnotEventB.Unscaled.MidX %></MidX>
                                       <Y><%= AnnotEventB.Unscaled.Y %></Y>
                                   </Unscaled>
                                   <ScaleA>
                                       <MidX><%= AnnotEventB.ScaleA.MidX %></MidX>
                                       <Y><%= AnnotEventB.ScaleA.Y %></Y>
                                   </ScaleA>
                                   <ScaleB>
                                       <MidX><%= AnnotEventB.ScaleB.MidX %></MidX>
                                       <Y><%= AnnotEventB.ScaleB.Y %></Y>
                                   </ScaleB>
                                   <ScaleAB>
                                       <MidX><%= AnnotEventB.ScaleAB.MidX %></MidX>
                                       <Y><%= AnnotEventB.ScaleAB.Y %></Y>
                                   </ScaleAB>
                               </EventB>
                               <Probability>
                                   <A>
                                       <Text><%= ProbA.Label.Text %></Text>
                                       <Prefix><%= ProbA.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= ProbA.Label.Font.Name %></Name>
                                           <Size><%= ProbA.Label.Font.Size %></Size>
                                           <Bold><%= ProbA.Label.Font.Bold %></Bold>
                                           <Italic><%= ProbA.Label.Font.Italic %></Italic>
                                           <Underline><%= ProbA.Label.Font.Underline %></Underline>
                                           <Strikeout><%= ProbA.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= ProbA.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= ProbA.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= ProbA.Label.Unscaled.MidX %></MidX>
                                           <Y><%= ProbA.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= ProbA.Label.ScaleA.MidX %></MidX>
                                           <Y><%= ProbA.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= ProbA.Label.ScaleB.MidX %></MidX>
                                           <Y><%= ProbA.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= ProbA.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= ProbA.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= ProbA.GivenA.Label.Text %></Text>
                                           <Prefix><%= ProbA.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbA.GivenA.Label.Font.Name %></Name>
                                               <Size><%= ProbA.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= ProbA.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbA.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbA.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbA.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbA.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbA.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbA.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbA.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbA.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbA.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbA.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbA.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbA.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbA.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= ProbA.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= ProbA.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbA.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= ProbA.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= ProbA.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbA.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbA.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbA.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbA.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbA.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbA.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbA.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbA.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbA.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbA.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbA.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbA.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbA.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= ProbA.GivenB.Label.Text %></Text>
                                           <Prefix><%= ProbA.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbA.GivenB.Label.Font.Name %></Name>
                                               <Size><%= ProbA.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= ProbA.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbA.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbA.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbA.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbA.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbA.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbA.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbA.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbA.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbA.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbA.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbA.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbA.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbA.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= ProbA.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= ProbA.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbA.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= ProbA.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= ProbA.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbA.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbA.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbA.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbA.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbA.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbA.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbA.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbA.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbA.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbA.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbA.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbA.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbA.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </A>
                                   <NotA>
                                       <Text><%= ProbNotA.Label.Text %></Text>
                                       <Prefix><%= ProbNotA.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= ProbNotA.Label.Font.Name %></Name>
                                           <Size><%= ProbNotA.Label.Font.Size %></Size>
                                           <Bold><%= ProbNotA.Label.Font.Bold %></Bold>
                                           <Italic><%= ProbNotA.Label.Font.Italic %></Italic>
                                           <Underline><%= ProbNotA.Label.Font.Underline %></Underline>
                                           <Strikeout><%= ProbNotA.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= ProbNotA.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= ProbNotA.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= ProbNotA.Label.Unscaled.MidX %></MidX>
                                           <Y><%= ProbNotA.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= ProbNotA.Label.ScaleA.MidX %></MidX>
                                           <Y><%= ProbNotA.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= ProbNotA.Label.ScaleB.MidX %></MidX>
                                           <Y><%= ProbNotA.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= ProbNotA.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= ProbNotA.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= ProbNotA.GivenA.Label.Text %></Text>
                                           <Prefix><%= ProbNotA.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotA.GivenA.Label.Font.Name %></Name>
                                               <Size><%= ProbNotA.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotA.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotA.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotA.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotA.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotA.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotA.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbNotA.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbNotA.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbNotA.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbNotA.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= ProbNotA.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= ProbNotA.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotA.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= ProbNotA.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotA.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotA.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotA.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotA.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotA.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotA.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbNotA.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbNotA.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbNotA.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbNotA.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= ProbNotA.GivenB.Label.Text %></Text>
                                           <Prefix><%= ProbNotA.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotA.GivenB.Label.Font.Name %></Name>
                                               <Size><%= ProbNotA.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotA.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotA.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotA.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotA.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotA.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotA.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbNotA.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbNotA.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbNotA.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbNotA.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= ProbNotA.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= ProbNotA.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotA.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= ProbNotA.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotA.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotA.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotA.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotA.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotA.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotA.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbNotA.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbNotA.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbNotA.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbNotA.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbNotA.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </NotA>
                                   <B>
                                       <Text><%= ProbB.Label.Text %></Text>
                                       <Prefix><%= ProbB.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= ProbB.Label.Font.Name %></Name>
                                           <Size><%= ProbB.Label.Font.Size %></Size>
                                           <Bold><%= ProbB.Label.Font.Bold %></Bold>
                                           <Italic><%= ProbB.Label.Font.Italic %></Italic>
                                           <Underline><%= ProbB.Label.Font.Underline %></Underline>
                                           <Strikeout><%= ProbB.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= ProbB.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= ProbB.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= ProbB.Label.Unscaled.MidX %></MidX>
                                           <Y><%= ProbB.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= ProbB.Label.ScaleA.MidX %></MidX>
                                           <Y><%= ProbB.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= ProbB.Label.ScaleB.MidX %></MidX>
                                           <Y><%= ProbB.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= ProbB.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= ProbB.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= ProbB.GivenA.Label.Text %></Text>
                                           <Prefix><%= ProbB.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbB.GivenA.Label.Font.Name %></Name>
                                               <Size><%= ProbB.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= ProbB.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbB.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbB.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbB.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbB.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbB.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbB.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbB.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbB.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbB.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbB.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbB.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbB.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbB.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= ProbB.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= ProbB.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbB.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= ProbB.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= ProbB.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbB.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbB.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbB.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbB.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbB.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbB.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbB.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbB.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbB.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbB.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbB.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbB.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbB.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= ProbB.GivenB.Label.Text %></Text>
                                           <Prefix><%= ProbB.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbB.GivenB.Label.Font.Name %></Name>
                                               <Size><%= ProbB.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= ProbB.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbB.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbB.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbB.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbB.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbB.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbB.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbB.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbB.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbB.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbB.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbB.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbB.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbB.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= ProbB.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= ProbB.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbB.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= ProbB.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= ProbB.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbB.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbB.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbB.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbB.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbB.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbB.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbB.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbB.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbB.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbB.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbB.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbB.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbB.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </B>
                                   <NotB>
                                       <Text><%= ProbNotB.Label.Text %></Text>
                                       <Prefix><%= ProbNotB.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= ProbNotB.Label.Font.Name %></Name>
                                           <Size><%= ProbNotB.Label.Font.Size %></Size>
                                           <Bold><%= ProbNotB.Label.Font.Bold %></Bold>
                                           <Italic><%= ProbNotB.Label.Font.Italic %></Italic>
                                           <Underline><%= ProbNotB.Label.Font.Underline %></Underline>
                                           <Strikeout><%= ProbNotB.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= ProbNotB.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= ProbNotB.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= ProbNotB.Label.Unscaled.MidX %></MidX>
                                           <Y><%= ProbNotB.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= ProbNotB.Label.ScaleA.MidX %></MidX>
                                           <Y><%= ProbNotB.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= ProbNotB.Label.ScaleB.MidX %></MidX>
                                           <Y><%= ProbNotB.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= ProbNotB.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= ProbNotB.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= ProbNotB.GivenA.Label.Text %></Text>
                                           <Prefix><%= ProbNotB.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotB.GivenA.Label.Font.Name %></Name>
                                               <Size><%= ProbNotB.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotB.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotB.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotB.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotB.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotB.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotB.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbNotB.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbNotB.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbNotB.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbNotB.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= ProbNotB.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= ProbNotB.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotB.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= ProbNotB.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotB.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotB.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotB.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotB.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotB.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotB.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbNotB.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbNotB.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbNotB.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbNotB.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= ProbNotB.GivenB.Label.Text %></Text>
                                           <Prefix><%= ProbNotB.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotB.GivenB.Label.Font.Name %></Name>
                                               <Size><%= ProbNotB.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotB.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotB.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotB.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotB.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotB.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotB.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbNotB.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbNotB.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbNotB.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbNotB.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= ProbNotB.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= ProbNotB.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotB.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= ProbNotB.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotB.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotB.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotB.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotB.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotB.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotB.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbNotB.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbNotB.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbNotB.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbNotB.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbNotB.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </NotB>
                                   <AandB>
                                       <Text><%= ProbAandB.Label.Text %></Text>
                                       <Prefix><%= ProbAandB.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= ProbAandB.Label.Font.Name %></Name>
                                           <Size><%= ProbAandB.Label.Font.Size %></Size>
                                           <Bold><%= ProbAandB.Label.Font.Bold %></Bold>
                                           <Italic><%= ProbAandB.Label.Font.Italic %></Italic>
                                           <Underline><%= ProbAandB.Label.Font.Underline %></Underline>
                                           <Strikeout><%= ProbAandB.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= ProbAandB.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= ProbAandB.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= ProbAandB.Label.Unscaled.MidX %></MidX>
                                           <Y><%= ProbAandB.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= ProbAandB.Label.ScaleA.MidX %></MidX>
                                           <Y><%= ProbAandB.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= ProbAandB.Label.ScaleB.MidX %></MidX>
                                           <Y><%= ProbAandB.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= ProbAandB.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= ProbAandB.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= ProbAandB.GivenA.Label.Text %></Text>
                                           <Prefix><%= ProbAandB.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbAandB.GivenA.Label.Font.Name %></Name>
                                               <Size><%= ProbAandB.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= ProbAandB.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbAandB.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbAandB.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbAandB.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbAandB.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbAandB.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbAandB.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbAandB.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbAandB.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbAandB.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= ProbAandB.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= ProbAandB.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbAandB.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= ProbAandB.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= ProbAandB.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbAandB.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbAandB.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbAandB.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbAandB.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbAandB.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbAandB.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbAandB.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbAandB.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbAandB.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= ProbAandB.GivenB.Label.Text %></Text>
                                           <Prefix><%= ProbAandB.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbAandB.GivenB.Label.Font.Name %></Name>
                                               <Size><%= ProbAandB.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= ProbAandB.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbAandB.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbAandB.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbAandB.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbAandB.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbAandB.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbAandB.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbAandB.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbAandB.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbAandB.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= ProbAandB.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= ProbAandB.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbAandB.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= ProbAandB.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= ProbAandB.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbAandB.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbAandB.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbAandB.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbAandB.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbAandB.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbAandB.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbAandB.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbAandB.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbAandB.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbAandB.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </AandB>
                                   <AandNotB>
                                       <Text><%= ProbAandNotB.Label.Text %></Text>
                                       <Prefix><%= ProbAandNotB.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= ProbAandNotB.Label.Font.Name %></Name>
                                           <Size><%= ProbAandNotB.Label.Font.Size %></Size>
                                           <Bold><%= ProbAandNotB.Label.Font.Bold %></Bold>
                                           <Italic><%= ProbAandNotB.Label.Font.Italic %></Italic>
                                           <Underline><%= ProbAandNotB.Label.Font.Underline %></Underline>
                                           <Strikeout><%= ProbAandNotB.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= ProbAandNotB.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= ProbAandNotB.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= ProbAandNotB.Label.Unscaled.MidX %></MidX>
                                           <Y><%= ProbAandNotB.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= ProbAandNotB.Label.ScaleA.MidX %></MidX>
                                           <Y><%= ProbAandNotB.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= ProbAandNotB.Label.ScaleB.MidX %></MidX>
                                           <Y><%= ProbAandNotB.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= ProbAandNotB.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= ProbAandNotB.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= ProbAandNotB.GivenA.Label.Text %></Text>
                                           <Prefix><%= ProbAandNotB.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbAandNotB.GivenA.Label.Font.Name %></Name>
                                               <Size><%= ProbAandNotB.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= ProbAandNotB.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbAandNotB.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbAandNotB.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbAandNotB.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbAandNotB.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbAandNotB.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbAandNotB.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbAandNotB.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbAandNotB.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbAandNotB.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= ProbAandNotB.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= ProbAandNotB.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbAandNotB.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= ProbAandNotB.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= ProbAandNotB.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbAandNotB.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbAandNotB.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbAandNotB.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbAandNotB.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbAandNotB.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbAandNotB.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbAandNotB.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbAandNotB.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbAandNotB.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= ProbAandNotB.GivenB.Label.Text %></Text>
                                           <Prefix><%= ProbAandNotB.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbAandNotB.GivenB.Label.Font.Name %></Name>
                                               <Size><%= ProbAandNotB.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= ProbAandNotB.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbAandNotB.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbAandNotB.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbAandNotB.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbAandNotB.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbAandNotB.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbAandNotB.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbAandNotB.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbAandNotB.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbAandNotB.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= ProbAandNotB.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= ProbAandNotB.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbAandNotB.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= ProbAandNotB.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= ProbAandNotB.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbAandNotB.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbAandNotB.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbAandNotB.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbAandNotB.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbAandNotB.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbAandNotB.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbAandNotB.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbAandNotB.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbAandNotB.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbAandNotB.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </AandNotB>
                                   <NotAandB>
                                       <Text><%= ProbNotAandB.Label.Text %></Text>
                                       <Prefix><%= ProbNotAandB.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= ProbNotAandB.Label.Font.Name %></Name>
                                           <Size><%= ProbNotAandB.Label.Font.Size %></Size>
                                           <Bold><%= ProbNotAandB.Label.Font.Bold %></Bold>
                                           <Italic><%= ProbNotAandB.Label.Font.Italic %></Italic>
                                           <Underline><%= ProbNotAandB.Label.Font.Underline %></Underline>
                                           <Strikeout><%= ProbNotAandB.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= ProbNotAandB.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= ProbNotAandB.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= ProbNotAandB.Label.Unscaled.MidX %></MidX>
                                           <Y><%= ProbNotAandB.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= ProbNotAandB.Label.ScaleA.MidX %></MidX>
                                           <Y><%= ProbNotAandB.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= ProbNotAandB.Label.ScaleB.MidX %></MidX>
                                           <Y><%= ProbNotAandB.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= ProbNotAandB.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= ProbNotAandB.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= ProbNotAandB.GivenA.Label.Text %></Text>
                                           <Prefix><%= ProbNotAandB.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotAandB.GivenA.Label.Font.Name %></Name>
                                               <Size><%= ProbNotAandB.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotAandB.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotAandB.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotAandB.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotAandB.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotAandB.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotAandB.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbNotAandB.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbNotAandB.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbNotAandB.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbNotAandB.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= ProbNotAandB.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= ProbNotAandB.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotAandB.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= ProbNotAandB.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotAandB.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotAandB.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotAandB.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotAandB.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotAandB.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotAandB.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbNotAandB.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbNotAandB.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbNotAandB.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbNotAandB.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= ProbNotAandB.GivenB.Label.Text %></Text>
                                           <Prefix><%= ProbNotAandB.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotAandB.GivenB.Label.Font.Name %></Name>
                                               <Size><%= ProbNotAandB.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotAandB.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotAandB.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotAandB.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotAandB.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotAandB.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotAandB.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbNotAandB.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbNotAandB.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbNotAandB.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbNotAandB.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= ProbNotAandB.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= ProbNotAandB.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotAandB.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= ProbNotAandB.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotAandB.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotAandB.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotAandB.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotAandB.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotAandB.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotAandB.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= ProbNotAandB.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= ProbNotAandB.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= ProbNotAandB.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= ProbNotAandB.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= ProbNotAandB.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </NotAandB>
                                   <NotAandNotB>
                                       <Text><%= ProbNotAandNotB.Label.Text %></Text>
                                       <Prefix><%= ProbNotAandNotB.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= ProbNotAandNotB.Label.Font.Name %></Name>
                                           <Size><%= ProbNotAandNotB.Label.Font.Size %></Size>
                                           <Bold><%= ProbNotAandNotB.Label.Font.Bold %></Bold>
                                           <Italic><%= ProbNotAandNotB.Label.Font.Italic %></Italic>
                                           <Underline><%= ProbNotAandNotB.Label.Font.Underline %></Underline>
                                           <Strikeout><%= ProbNotAandNotB.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= ProbNotAandNotB.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= ProbNotAandNotB.Label.Show %></Show>
                                       <Unscaled>
                                           <X><%= ProbNotAandNotB.Label.Unscaled.X %></X>
                                           <Y><%= ProbNotAandNotB.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <X><%= ProbNotAandNotB.Label.ScaleA.X %></X>
                                           <Y><%= ProbNotAandNotB.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <X><%= ProbNotAandNotB.Label.ScaleB.X %></X>
                                           <Y><%= ProbNotAandNotB.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <X><%= ProbNotAandNotB.Label.ScaleAB.X %></X>
                                           <Y><%= ProbNotAandNotB.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= ProbNotAandNotB.GivenA.Label.Text %></Text>
                                           <Prefix><%= ProbNotAandNotB.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotAandNotB.GivenA.Label.Font.Name %></Name>
                                               <Size><%= ProbNotAandNotB.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotAandNotB.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotAandNotB.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotAandNotB.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotAandNotB.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotAandNotB.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotAandNotB.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <X><%= ProbNotAandNotB.GivenA.Label.Unscaled.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <X><%= ProbNotAandNotB.GivenA.Label.ScaleA.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <X><%= ProbNotAandNotB.GivenA.Label.ScaleB.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <X><%= ProbNotAandNotB.GivenA.Label.ScaleAB.MidX %></X>
                                               <Y><%= ProbNotAandNotB.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= ProbNotAandNotB.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= ProbNotAandNotB.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotAandNotB.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= ProbNotAandNotB.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotAandNotB.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotAandNotB.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotAandNotB.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotAandNotB.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotAandNotB.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotAandNotB.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <X><%= ProbNotAandNotB.GivenNotA.Label.Unscaled.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <X><%= ProbNotAandNotB.GivenNotA.Label.ScaleA.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <X><%= ProbNotAandNotB.GivenNotA.Label.ScaleB.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <X><%= ProbNotAandNotB.GivenNotA.Label.ScaleAB.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= ProbNotAandNotB.GivenB.Label.Text %></Text>
                                           <Prefix><%= ProbNotAandNotB.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotAandNotB.GivenB.Label.Font.Name %></Name>
                                               <Size><%= ProbNotAandNotB.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotAandNotB.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotAandNotB.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotAandNotB.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotAandNotB.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotAandNotB.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotAandNotB.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <X><%= ProbNotAandNotB.GivenB.Label.Unscaled.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <X><%= ProbNotAandNotB.GivenB.Label.ScaleA.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <X><%= ProbNotAandNotB.GivenB.Label.ScaleB.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <X><%= ProbNotAandNotB.GivenB.Label.ScaleAB.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= ProbNotAandNotB.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= ProbNotAandNotB.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= ProbNotAandNotB.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= ProbNotAandNotB.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= ProbNotAandNotB.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= ProbNotAandNotB.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= ProbNotAandNotB.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= ProbNotAandNotB.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= ProbNotAandNotB.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= ProbNotAandNotB.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <X><%= ProbNotAandNotB.GivenNotB.Label.Unscaled.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <X><%= ProbNotAandNotB.GivenNotB.Label.ScaleA.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <X><%= ProbNotAandNotB.GivenNotB.Label.ScaleB.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <X><%= ProbNotAandNotB.GivenNotB.Label.ScaleAB.X %></X>
                                               <Y><%= ProbNotAandNotB.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </NotAandNotB>
                               </Probability>
                               <Samples>
                                   <A>
                                       <Text><%= SampsA.Label.Text %></Text>
                                       <Prefix><%= SampsA.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= SampsA.Label.Font.Name %></Name>
                                           <Size><%= SampsA.Label.Font.Size %></Size>
                                           <Bold><%= SampsA.Label.Font.Bold %></Bold>
                                           <Italic><%= SampsA.Label.Font.Italic %></Italic>
                                           <Underline><%= SampsA.Label.Font.Underline %></Underline>
                                           <Strikeout><%= SampsA.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= SampsA.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= SampsA.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= SampsA.Label.Unscaled.MidX %></MidX>
                                           <Y><%= SampsA.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= SampsA.Label.ScaleA.MidX %></MidX>
                                           <Y><%= SampsA.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= SampsA.Label.ScaleB.MidX %></MidX>
                                           <Y><%= SampsA.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= SampsA.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= SampsA.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= SampsA.GivenA.Label.Text %></Text>
                                           <Prefix><%= SampsA.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsA.GivenA.Label.Font.Name %></Name>
                                               <Size><%= SampsA.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= SampsA.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsA.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsA.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsA.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsA.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsA.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsA.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsA.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsA.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsA.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsA.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsA.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsA.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsA.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= SampsA.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= SampsA.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsA.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= SampsA.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= SampsA.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsA.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsA.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsA.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsA.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsA.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsA.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsA.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsA.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsA.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsA.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsA.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsA.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsA.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= SampsA.GivenB.Label.Text %></Text>
                                           <Prefix><%= SampsA.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsA.GivenB.Label.Font.Name %></Name>
                                               <Size><%= SampsA.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= SampsA.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsA.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsA.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsA.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsA.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsA.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsA.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsA.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsA.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsA.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsA.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsA.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsA.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsA.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= SampsA.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= SampsA.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsA.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= SampsA.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= SampsA.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsA.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsA.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsA.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsA.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsA.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsA.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsA.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsA.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsA.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsA.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsA.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsA.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsA.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </A>
                                   <NotA>
                                       <Text><%= SampsNotA.Label.Text %></Text>
                                       <Prefix><%= SampsNotA.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= SampsNotA.Label.Font.Name %></Name>
                                           <Size><%= SampsNotA.Label.Font.Size %></Size>
                                           <Bold><%= SampsNotA.Label.Font.Bold %></Bold>
                                           <Italic><%= SampsNotA.Label.Font.Italic %></Italic>
                                           <Underline><%= SampsNotA.Label.Font.Underline %></Underline>
                                           <Strikeout><%= SampsNotA.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= SampsNotA.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= SampsNotA.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= SampsNotA.Label.Unscaled.MidX %></MidX>
                                           <Y><%= SampsNotA.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= SampsNotA.Label.ScaleA.MidX %></MidX>
                                           <Y><%= SampsNotA.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= SampsNotA.Label.ScaleB.MidX %></MidX>
                                           <Y><%= SampsNotA.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= SampsNotA.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= SampsNotA.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= SampsNotA.GivenA.Label.Text %></Text>
                                           <Prefix><%= SampsNotA.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotA.GivenA.Label.Font.Name %></Name>
                                               <Size><%= SampsNotA.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotA.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotA.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotA.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotA.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotA.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotA.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsNotA.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsNotA.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsNotA.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsNotA.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= SampsNotA.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= SampsNotA.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotA.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= SampsNotA.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotA.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotA.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotA.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotA.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotA.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotA.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsNotA.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsNotA.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsNotA.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsNotA.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= SampsNotA.GivenB.Label.Text %></Text>
                                           <Prefix><%= SampsNotA.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotA.GivenB.Label.Font.Name %></Name>
                                               <Size><%= SampsNotA.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotA.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotA.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotA.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotA.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotA.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotA.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsNotA.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsNotA.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsNotA.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsNotA.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= SampsNotA.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= SampsNotA.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotA.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= SampsNotA.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotA.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotA.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotA.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotA.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotA.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotA.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsNotA.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsNotA.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsNotA.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsNotA.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsNotA.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </NotA>
                                   <B>
                                       <Text><%= SampsB.Label.Text %></Text>
                                       <Prefix><%= SampsB.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= SampsB.Label.Font.Name %></Name>
                                           <Size><%= SampsB.Label.Font.Size %></Size>
                                           <Bold><%= SampsB.Label.Font.Bold %></Bold>
                                           <Italic><%= SampsB.Label.Font.Italic %></Italic>
                                           <Underline><%= SampsB.Label.Font.Underline %></Underline>
                                           <Strikeout><%= SampsB.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= SampsB.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= SampsB.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= SampsB.Label.Unscaled.MidX %></MidX>
                                           <Y><%= SampsB.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= SampsB.Label.ScaleA.MidX %></MidX>
                                           <Y><%= SampsB.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= SampsB.Label.ScaleB.MidX %></MidX>
                                           <Y><%= SampsB.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= SampsB.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= SampsB.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= SampsB.GivenA.Label.Text %></Text>
                                           <Prefix><%= SampsB.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsB.GivenA.Label.Font.Name %></Name>
                                               <Size><%= SampsB.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= SampsB.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsB.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsB.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsB.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsB.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsB.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsB.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsB.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsB.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsB.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsB.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsB.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsB.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsB.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= SampsB.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= SampsB.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsB.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= SampsB.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= SampsB.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsB.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsB.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsB.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsB.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsB.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsB.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsB.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsB.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsB.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsB.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsB.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsB.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsB.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= SampsB.GivenB.Label.Text %></Text>
                                           <Prefix><%= SampsB.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsB.GivenB.Label.Font.Name %></Name>
                                               <Size><%= SampsB.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= SampsB.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsB.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsB.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsB.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsB.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsB.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsB.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsB.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsB.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsB.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsB.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsB.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsB.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsB.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= SampsB.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= SampsB.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsB.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= SampsB.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= SampsB.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsB.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsB.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsB.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsB.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsB.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsB.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsB.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsB.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsB.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsB.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsB.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsB.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsB.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </B>
                                   <NotB>
                                       <Text><%= SampsNotB.Label.Text %></Text>
                                       <Prefix><%= SampsNotB.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= SampsNotB.Label.Font.Name %></Name>
                                           <Size><%= SampsNotB.Label.Font.Size %></Size>
                                           <Bold><%= SampsNotB.Label.Font.Bold %></Bold>
                                           <Italic><%= SampsNotB.Label.Font.Italic %></Italic>
                                           <Underline><%= SampsNotB.Label.Font.Underline %></Underline>
                                           <Strikeout><%= SampsNotB.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= SampsNotB.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= SampsNotB.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= SampsNotB.Label.Unscaled.MidX %></MidX>
                                           <Y><%= SampsNotB.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= SampsNotB.Label.ScaleA.MidX %></MidX>
                                           <Y><%= SampsNotB.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= SampsNotB.Label.ScaleB.MidX %></MidX>
                                           <Y><%= SampsNotB.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= SampsNotB.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= SampsNotB.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= SampsNotB.GivenA.Label.Text %></Text>
                                           <Prefix><%= SampsNotB.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotB.GivenA.Label.Font.Name %></Name>
                                               <Size><%= SampsNotB.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotB.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotB.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotB.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotB.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotB.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotB.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsNotB.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsNotB.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsNotB.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsNotB.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= SampsNotB.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= SampsNotB.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotB.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= SampsNotB.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotB.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotB.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotB.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotB.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotB.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotB.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsNotB.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsNotB.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsNotB.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsNotB.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= SampsNotB.GivenB.Label.Text %></Text>
                                           <Prefix><%= SampsNotB.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotB.GivenB.Label.Font.Name %></Name>
                                               <Size><%= SampsNotB.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotB.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotB.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotB.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotB.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotB.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotB.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsNotB.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsNotB.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsNotB.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsNotB.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= SampsNotB.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= SampsNotB.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotB.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= SampsNotB.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotB.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotB.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotB.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotB.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotB.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotB.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsNotB.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsNotB.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsNotB.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsNotB.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsNotB.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </NotB>
                                   <AandB>
                                       <Text><%= SampsAandB.Label.Text %></Text>
                                       <Prefix><%= SampsAandB.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= SampsAandB.Label.Font.Name %></Name>
                                           <Size><%= SampsAandB.Label.Font.Size %></Size>
                                           <Bold><%= SampsAandB.Label.Font.Bold %></Bold>
                                           <Italic><%= SampsAandB.Label.Font.Italic %></Italic>
                                           <Underline><%= SampsAandB.Label.Font.Underline %></Underline>
                                           <Strikeout><%= SampsAandB.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= SampsAandB.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= SampsAandB.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= SampsAandB.Label.Unscaled.MidX %></MidX>
                                           <Y><%= SampsAandB.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= SampsAandB.Label.ScaleA.MidX %></MidX>
                                           <Y><%= SampsAandB.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= SampsAandB.Label.ScaleB.MidX %></MidX>
                                           <Y><%= SampsAandB.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= SampsAandB.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= SampsAandB.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= SampsAandB.GivenA.Label.Text %></Text>
                                           <Prefix><%= SampsAandB.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsAandB.GivenA.Label.Font.Name %></Name>
                                               <Size><%= SampsAandB.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= SampsAandB.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsAandB.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsAandB.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsAandB.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsAandB.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsAandB.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsAandB.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsAandB.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsAandB.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsAandB.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= SampsAandB.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= SampsAandB.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsAandB.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= SampsAandB.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= SampsAandB.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsAandB.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsAandB.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsAandB.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsAandB.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsAandB.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsAandB.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsAandB.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsAandB.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsAandB.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= SampsAandB.GivenB.Label.Text %></Text>
                                           <Prefix><%= SampsAandB.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsAandB.GivenB.Label.Font.Name %></Name>
                                               <Size><%= SampsAandB.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= SampsAandB.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsAandB.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsAandB.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsAandB.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsAandB.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsAandB.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsAandB.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsAandB.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsAandB.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsAandB.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= SampsAandB.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= SampsAandB.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsAandB.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= SampsAandB.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= SampsAandB.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsAandB.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsAandB.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsAandB.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsAandB.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsAandB.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsAandB.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsAandB.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsAandB.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsAandB.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsAandB.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </AandB>
                                   <AandNotB>
                                       <Text><%= SampsAandNotB.Label.Text %></Text>
                                       <Prefix><%= SampsAandNotB.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= SampsAandNotB.Label.Font.Name %></Name>
                                           <Size><%= SampsAandNotB.Label.Font.Size %></Size>
                                           <Bold><%= SampsAandNotB.Label.Font.Bold %></Bold>
                                           <Italic><%= SampsAandNotB.Label.Font.Italic %></Italic>
                                           <Underline><%= SampsAandNotB.Label.Font.Underline %></Underline>
                                           <Strikeout><%= SampsAandNotB.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= SampsAandNotB.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= SampsAandNotB.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= SampsAandNotB.Label.Unscaled.MidX %></MidX>
                                           <Y><%= SampsAandNotB.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= SampsAandNotB.Label.ScaleA.MidX %></MidX>
                                           <Y><%= SampsAandNotB.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= SampsAandNotB.Label.ScaleB.MidX %></MidX>
                                           <Y><%= SampsAandNotB.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= SampsAandNotB.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= SampsAandNotB.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= SampsAandNotB.GivenA.Label.Text %></Text>
                                           <Prefix><%= SampsAandNotB.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsAandNotB.GivenA.Label.Font.Name %></Name>
                                               <Size><%= SampsAandNotB.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= SampsAandNotB.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsAandNotB.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsAandNotB.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsAandNotB.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsAandNotB.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsAandNotB.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsAandNotB.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsAandNotB.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsAandNotB.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsAandNotB.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= SampsAandNotB.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= SampsAandNotB.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsAandNotB.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= SampsAandNotB.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= SampsAandNotB.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsAandNotB.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsAandNotB.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsAandNotB.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsAandNotB.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsAandNotB.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsAandNotB.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsAandNotB.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsAandNotB.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsAandNotB.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= SampsAandNotB.GivenB.Label.Text %></Text>
                                           <Prefix><%= SampsAandNotB.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsAandNotB.GivenB.Label.Font.Name %></Name>
                                               <Size><%= SampsAandNotB.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= SampsAandNotB.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsAandNotB.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsAandNotB.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsAandNotB.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsAandNotB.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsAandNotB.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsAandNotB.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsAandNotB.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsAandNotB.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsAandNotB.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= SampsAandNotB.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= SampsAandNotB.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsAandNotB.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= SampsAandNotB.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= SampsAandNotB.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsAandNotB.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsAandNotB.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsAandNotB.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsAandNotB.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsAandNotB.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsAandNotB.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsAandNotB.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsAandNotB.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsAandNotB.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsAandNotB.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </AandNotB>
                                   <NotAandB>
                                       <Text><%= SampsNotAandB.Label.Text %></Text>
                                       <Prefix><%= SampsNotAandB.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= SampsNotAandB.Label.Font.Name %></Name>
                                           <Size><%= SampsNotAandB.Label.Font.Size %></Size>
                                           <Bold><%= SampsNotAandB.Label.Font.Bold %></Bold>
                                           <Italic><%= SampsNotAandB.Label.Font.Italic %></Italic>
                                           <Underline><%= SampsNotAandB.Label.Font.Underline %></Underline>
                                           <Strikeout><%= SampsNotAandB.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= SampsNotAandB.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= SampsNotAandB.Label.Show %></Show>
                                       <Unscaled>
                                           <MidX><%= SampsNotAandB.Label.Unscaled.MidX %></MidX>
                                           <Y><%= SampsNotAandB.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <MidX><%= SampsNotAandB.Label.ScaleA.MidX %></MidX>
                                           <Y><%= SampsNotAandB.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <MidX><%= SampsNotAandB.Label.ScaleB.MidX %></MidX>
                                           <Y><%= SampsNotAandB.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <MidX><%= SampsNotAandB.Label.ScaleAB.MidX %></MidX>
                                           <Y><%= SampsNotAandB.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= SampsNotAandB.GivenA.Label.Text %></Text>
                                           <Prefix><%= SampsNotAandB.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotAandB.GivenA.Label.Font.Name %></Name>
                                               <Size><%= SampsNotAandB.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotAandB.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotAandB.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotAandB.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotAandB.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotAandB.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotAandB.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsNotAandB.GivenA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsNotAandB.GivenA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsNotAandB.GivenA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsNotAandB.GivenA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= SampsNotAandB.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= SampsNotAandB.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotAandB.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= SampsNotAandB.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotAandB.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotAandB.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotAandB.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotAandB.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotAandB.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotAandB.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsNotAandB.GivenNotA.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsNotAandB.GivenNotA.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsNotAandB.GivenNotA.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsNotAandB.GivenNotA.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= SampsNotAandB.GivenB.Label.Text %></Text>
                                           <Prefix><%= SampsNotAandB.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotAandB.GivenB.Label.Font.Name %></Name>
                                               <Size><%= SampsNotAandB.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotAandB.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotAandB.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotAandB.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotAandB.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotAandB.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotAandB.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsNotAandB.GivenB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsNotAandB.GivenB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsNotAandB.GivenB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsNotAandB.GivenB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= SampsNotAandB.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= SampsNotAandB.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotAandB.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= SampsNotAandB.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotAandB.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotAandB.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotAandB.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotAandB.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotAandB.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotAandB.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <MidX><%= SampsNotAandB.GivenNotB.Label.Unscaled.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <MidX><%= SampsNotAandB.GivenNotB.Label.ScaleA.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <MidX><%= SampsNotAandB.GivenNotB.Label.ScaleB.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <MidX><%= SampsNotAandB.GivenNotB.Label.ScaleAB.MidX %></MidX>
                                               <Y><%= SampsNotAandB.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </NotAandB>
                                   <NotAandNotB>
                                       <Text><%= SampsNotAandNotB.Label.Text %></Text>
                                       <Prefix><%= SampsNotAandNotB.Prefix %></Prefix>
                                       <Font>
                                           <Name><%= SampsNotAandNotB.Label.Font.Name %></Name>
                                           <Size><%= SampsNotAandNotB.Label.Font.Size %></Size>
                                           <Bold><%= SampsNotAandNotB.Label.Font.Bold %></Bold>
                                           <Italic><%= SampsNotAandNotB.Label.Font.Italic %></Italic>
                                           <Underline><%= SampsNotAandNotB.Label.Font.Underline %></Underline>
                                           <Strikeout><%= SampsNotAandNotB.Label.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= SampsNotAandNotB.Label.Color.ToArgb.ToString %></Color>
                                       <Show><%= SampsNotAandNotB.Label.Show %></Show>
                                       <Unscaled>
                                           <X><%= SampsNotAandNotB.Label.Unscaled.X %></X>
                                           <Y><%= SampsNotAandNotB.Label.Unscaled.Y %></Y>
                                       </Unscaled>
                                       <ScaleA>
                                           <X><%= SampsNotAandNotB.Label.ScaleA.X %></X>
                                           <Y><%= SampsNotAandNotB.Label.ScaleA.Y %></Y>
                                       </ScaleA>
                                       <ScaleB>
                                           <X><%= SampsNotAandNotB.Label.ScaleB.X %></X>
                                           <Y><%= SampsNotAandNotB.Label.ScaleB.Y %></Y>
                                       </ScaleB>
                                       <ScaleAB>
                                           <X><%= SampsNotAandNotB.Label.ScaleAB.X %></X>
                                           <Y><%= SampsNotAandNotB.Label.ScaleAB.Y %></Y>
                                       </ScaleAB>
                                       <GivenA>
                                           <Text><%= SampsNotAandNotB.GivenA.Label.Text %></Text>
                                           <Prefix><%= SampsNotAandNotB.GivenA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotAandNotB.GivenA.Label.Font.Name %></Name>
                                               <Size><%= SampsNotAandNotB.GivenA.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotAandNotB.GivenA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotAandNotB.GivenA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotAandNotB.GivenA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotAandNotB.GivenA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotAandNotB.GivenA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotAandNotB.GivenA.Label.Show %></Show>
                                           <Unscaled>
                                               <X><%= SampsNotAandNotB.GivenA.Label.Unscaled.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <X><%= SampsNotAandNotB.GivenA.Label.ScaleA.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <X><%= SampsNotAandNotB.GivenA.Label.ScaleB.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <X><%= SampsNotAandNotB.GivenA.Label.ScaleAB.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenA>
                                       <GivenNotA>
                                           <Text><%= SampsNotAandNotB.GivenNotA.Label.Text %></Text>
                                           <Prefix><%= SampsNotAandNotB.GivenNotA.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotAandNotB.GivenNotA.Label.Font.Name %></Name>
                                               <Size><%= SampsNotAandNotB.GivenNotA.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotAandNotB.GivenNotA.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotAandNotB.GivenNotA.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotAandNotB.GivenNotA.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotAandNotB.GivenNotA.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotAandNotB.GivenNotA.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotAandNotB.GivenNotA.Label.Show %></Show>
                                           <Unscaled>
                                               <X><%= SampsNotAandNotB.GivenNotA.Label.Unscaled.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenNotA.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <X><%= SampsNotAandNotB.GivenNotA.Label.ScaleA.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenNotA.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <X><%= SampsNotAandNotB.GivenNotA.Label.ScaleB.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenNotA.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <X><%= SampsNotAandNotB.GivenNotA.Label.ScaleAB.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenNotA.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotA>
                                       <GivenB>
                                           <Text><%= SampsNotAandNotB.GivenB.Label.Text %></Text>
                                           <Prefix><%= SampsNotAandNotB.GivenB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotAandNotB.GivenB.Label.Font.Name %></Name>
                                               <Size><%= SampsNotAandNotB.GivenB.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotAandNotB.GivenB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotAandNotB.GivenB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotAandNotB.GivenB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotAandNotB.GivenB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotAandNotB.GivenB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotAandNotB.GivenB.Label.Show %></Show>
                                           <Unscaled>
                                               <X><%= SampsNotAandNotB.GivenB.Label.Unscaled.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <X><%= SampsNotAandNotB.GivenB.Label.ScaleA.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <X><%= SampsNotAandNotB.GivenB.Label.ScaleB.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <X><%= SampsNotAandNotB.GivenB.Label.ScaleAB.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenB>
                                       <GivenNotB>
                                           <Text><%= SampsNotAandNotB.GivenNotB.Label.Text %></Text>
                                           <Prefix><%= SampsNotAandNotB.GivenNotB.Prefix %></Prefix>
                                           <Font>
                                               <Name><%= SampsNotAandNotB.GivenNotB.Label.Font.Name %></Name>
                                               <Size><%= SampsNotAandNotB.GivenNotB.Label.Font.Size %></Size>
                                               <Bold><%= SampsNotAandNotB.GivenNotB.Label.Font.Bold %></Bold>
                                               <Italic><%= SampsNotAandNotB.GivenNotB.Label.Font.Italic %></Italic>
                                               <Underline><%= SampsNotAandNotB.GivenNotB.Label.Font.Underline %></Underline>
                                               <Strikeout><%= SampsNotAandNotB.GivenNotB.Label.Font.Strikeout %></Strikeout>
                                           </Font>
                                           <Color><%= SampsNotAandNotB.GivenNotB.Label.Color.ToArgb.ToString %></Color>
                                           <Show><%= SampsNotAandNotB.GivenNotB.Label.Show %></Show>
                                           <Unscaled>
                                               <X><%= SampsNotAandNotB.GivenNotB.Label.Unscaled.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenNotB.Label.Unscaled.Y %></Y>
                                           </Unscaled>
                                           <ScaleA>
                                               <X><%= SampsNotAandNotB.GivenNotB.Label.ScaleA.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenNotB.Label.ScaleA.Y %></Y>
                                           </ScaleA>
                                           <ScaleB>
                                               <X><%= SampsNotAandNotB.GivenNotB.Label.ScaleB.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenNotB.Label.ScaleB.Y %></Y>
                                           </ScaleB>
                                           <ScaleAB>
                                               <X><%= SampsNotAandNotB.GivenNotB.Label.ScaleAB.MidX %></X>
                                               <Y><%= SampsNotAandNotB.GivenNotB.Label.ScaleAB.Y %></Y>
                                           </ScaleAB>
                                       </GivenNotB>
                                   </NotAandNotB>
                                   <SampleSize>
                                       <Prefix><%= SampleSize.Prefix %></Prefix>
                                       <Text><%= AnnotSampleSize.Text %></Text>
                                       <Font>
                                           <Name><%= AnnotSampleSize.Font.Name %></Name>
                                           <Size><%= AnnotSampleSize.Font.Size %></Size>
                                           <Bold><%= AnnotSampleSize.Font.Bold %></Bold>
                                           <Italic><%= AnnotSampleSize.Font.Italic %></Italic>
                                           <Underline><%= AnnotSampleSize.Font.Underline %></Underline>
                                           <Strikeout><%= AnnotSampleSize.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= AnnotSampleSize.Color.ToArgb.ToString %></Color>
                                       <MidX><%= AnnotSampleSize.Unscaled.MidX %></MidX>
                                       <BaseY><%= AnnotSampleSize.Unscaled.BaseY %></BaseY>
                                       <Show><%= AnnotSampleSize.Show %></Show>
                                   </SampleSize>
                                   <ConditionalSampleSize>
                                       <Text><%= AnnotConditionalSampleSize.Text %></Text>
                                       <Font>
                                           <Name><%= AnnotConditionalSampleSize.Font.Name %></Name>
                                           <Size><%= AnnotConditionalSampleSize.Font.Size %></Size>
                                           <Bold><%= AnnotConditionalSampleSize.Font.Bold %></Bold>
                                           <Italic><%= AnnotConditionalSampleSize.Font.Italic %></Italic>
                                           <Underline><%= AnnotConditionalSampleSize.Font.Underline %></Underline>
                                           <Strikeout><%= AnnotConditionalSampleSize.Font.Strikeout %></Strikeout>
                                       </Font>
                                       <Color><%= AnnotConditionalSampleSize.Color.ToArgb.ToString %></Color>
                                       <EndX><%= AnnotConditionalSampleSize.Unscaled.EndX %></EndX>
                                       <BaseY><%= AnnotConditionalSampleSize.Unscaled.BaseY %></BaseY>
                                       <Show><%= AnnotConditionalSampleSize.Show %></Show>
                                   </ConditionalSampleSize>
                               </Samples>
                               <Condition>
                                   <Name><%= Settings.Condition %></Name>
                                   <Font>
                                       <Name><%= AnnotCondition.Font.Name %></Name>
                                       <Size><%= AnnotCondition.Font.Size %></Size>
                                       <Bold><%= AnnotCondition.Font.Bold %></Bold>
                                       <Italic><%= AnnotCondition.Font.Italic %></Italic>
                                       <Underline><%= AnnotCondition.Font.Underline %></Underline>
                                       <Strikeout><%= AnnotCondition.Font.Strikeout %></Strikeout>
                                   </Font>
                                   <Color><%= AnnotCondition.Color.ToArgb.ToString %></Color>
                                   <Show><%= AnnotCondition.Show %></Show>
                                   <None>
                                       <Text><%= AnnotCondition.None.Text %></Text>
                                       <XPositionReference><%= AnnotCondition.None.XPositionReference %></XPositionReference>
                                       <YPositionReference><%= AnnotCondition.None.YPositionReference %></YPositionReference>
                                       <X><%= AnnotCondition.None.X %></X>
                                       <Y><%= AnnotCondition.None.Y %></Y>
                                       <MidX><%= AnnotCondition.None.MidX %></MidX>
                                       <MidY><%= AnnotCondition.None.MidY %></MidY>
                                       <EndX><%= AnnotCondition.None.EndX %></EndX>
                                       <BaseY><%= AnnotCondition.None.BaseY %></BaseY>
                                   </None>
                                   <EventATrue>
                                       <Text><%= AnnotCondition.EventATrue.Text %></Text>
                                       <XPositionReference><%= AnnotCondition.EventATrue.XPositionReference %></XPositionReference>
                                       <YPositionReference><%= AnnotCondition.EventATrue.YPositionReference %></YPositionReference>
                                       <X><%= AnnotCondition.EventATrue.X %></X>
                                       <Y><%= AnnotCondition.EventATrue.Y %></Y>
                                       <MidX><%= AnnotCondition.EventATrue.MidX %></MidX>
                                       <MidY><%= AnnotCondition.EventATrue.MidY %></MidY>
                                       <EndX><%= AnnotCondition.EventATrue.EndX %></EndX>
                                       <BaseY><%= AnnotCondition.EventATrue.BaseY %></BaseY>
                                   </EventATrue>
                                   <EventAFalse>
                                       <Text><%= AnnotCondition.EventAFalse.Text %></Text>
                                       <XPositionReference><%= AnnotCondition.EventAFalse.XPositionReference %></XPositionReference>
                                       <YPositionReference><%= AnnotCondition.EventAFalse.YPositionReference %></YPositionReference>
                                       <X><%= AnnotCondition.EventAFalse.X %></X>
                                       <Y><%= AnnotCondition.EventAFalse.Y %></Y>
                                       <MidX><%= AnnotCondition.EventAFalse.MidX %></MidX>
                                       <MidY><%= AnnotCondition.EventAFalse.MidY %></MidY>
                                       <EndX><%= AnnotCondition.EventAFalse.EndX %></EndX>
                                       <BaseY><%= AnnotCondition.EventAFalse.BaseY %></BaseY>
                                   </EventAFalse>
                                   <EventBTrue>
                                       <Text><%= AnnotCondition.EventBTrue.Text %></Text>
                                       <XPositionReference><%= AnnotCondition.EventBTrue.XPositionReference %></XPositionReference>
                                       <YPositionReference><%= AnnotCondition.EventBTrue.YPositionReference %></YPositionReference>
                                       <X><%= AnnotCondition.EventBTrue.X %></X>
                                       <Y><%= AnnotCondition.EventBTrue.Y %></Y>
                                       <MidX><%= AnnotCondition.EventBTrue.MidX %></MidX>
                                       <MidY><%= AnnotCondition.EventBTrue.MidY %></MidY>
                                       <EndX><%= AnnotCondition.EventBTrue.EndX %></EndX>
                                       <BaseY><%= AnnotCondition.EventBTrue.BaseY %></BaseY>
                                   </EventBTrue>
                                   <EventBFalse>
                                       <Text><%= AnnotCondition.EventBFalse.Text %></Text>
                                       <XPositionReference><%= AnnotCondition.EventBFalse.XPositionReference %></XPositionReference>
                                       <YPositionReference><%= AnnotCondition.EventBFalse.YPositionReference %></YPositionReference>
                                       <X><%= AnnotCondition.EventBFalse.X %></X>
                                       <Y><%= AnnotCondition.EventBFalse.Y %></Y>
                                       <MidX><%= AnnotCondition.EventBFalse.MidX %></MidX>
                                       <MidY><%= AnnotCondition.EventBFalse.MidY %></MidY>
                                       <EndX><%= AnnotCondition.EventBFalse.EndX %></EndX>
                                       <BaseY><%= AnnotCondition.EventBFalse.BaseY %></BaseY>
                                   </EventBFalse>
                               </Condition>
                           </Annotation>
                       </Diagram>
                   </BayesModel>

        '<PerformanceDisplayFormat><%= Performance.DisplayFormat %></PerformanceDisplayFormat>

        Return XDoc
    End Function

    'Public Sub XDocToBayes(ByRef XDoc As System.Xml.Linq.XDocument)
    '    'Read the Bayes model information from the XDocument.

    '    If XDoc Is Nothing Then Exit Sub

    '    Name = XDoc.<BayesModel>.<Name>.Value
    '    Label = XDoc.<BayesModel>.<Label>.Value
    '    Description = XDoc.<BayesModel>.<Description>.Value
    '    AllOutcomesColor = Color.FromArgb(XDoc.<BayesModel>.<AllOutcomesColor>.Value)
    '    InputInfoType = XDoc.<BayesModel>.<InputInfoType>.Value
    '    ProbabilityMeasure = XDoc.<BayesModel>.<ProbabilityMeasure>.Value
    '    DecimalFormat = XDoc.<BayesModel>.<DecimalFormat>.Value
    '    PercentFormat = XDoc.<BayesModel>.<PercentFormat>.Value
    '    SamplesFormat = XDoc.<BayesModel>.<SamplesFormat>.Value
    '    SampleSize = XDoc.<BayesModel>.<SampleSize>.Value
    '    'ShowDecimalProbability = XDoc.<BayesModel>.<ShowDecimalProbability>.Value
    '    'ShowPercentProbability = XDoc.<BayesModel>.<ShowPercentProbability>.Value
    '    If XDoc.<BayesModel>.<ShowProbabilities>.Value <> Nothing Then ShowProbabilities = XDoc.<BayesModel>.<ShowProbabilities>.Value
    '    ShowSampleCount = XDoc.<BayesModel>.<ShowSampleCount>.Value

    '    EventAName = XDoc.<BayesModel>.<EventA>.<Name>.Value
    '    EventADescr = XDoc.<BayesModel>.<EventA>.<Description>.Value
    '    EventAProb = XDoc.<BayesModel>.<EventA>.<Probability>.Value
    '    EventAColor = Color.FromArgb(XDoc.<BayesModel>.<EventA>.<Color>.Value)
    '    EventAShape = XDoc.<BayesModel>.<EventA>.<Shape>.Value

    '    EventBName = XDoc.<BayesModel>.<EventB>.<Name>.Value
    '    EventBDescr = XDoc.<BayesModel>.<EventB>.<Description>.Value
    '    EventBProb = XDoc.<BayesModel>.<EventB>.<Probability>.Value
    '    EventBColor = Color.FromArgb(XDoc.<BayesModel>.<EventB>.<Color>.Value)
    '    EventBShape = XDoc.<BayesModel>.<EventB>.<Shape>.Value

    '    ProbAandB = XDoc.<BayesModel>.<Probability>.<AandB>.Value
    '    ProbBgivenA = XDoc.<BayesModel>.<Probability>.<BgivenA>.Value
    '    ProbBgivenNotA = XDoc.<BayesModel>.<Probability>.<BgivenNotA>.Value
    '    ProbAgivenB = XDoc.<BayesModel>.<Probability>.<AgivenB>.Value

    'End Sub

    'Public Sub XDocToBayes(ByRef XDoc As System.Xml.Linq.XDocument)
    '    'Read the Bayes model information from the XDocument.

    '    If XDoc Is Nothing Then Exit Sub

    '    Name = XDoc.<BayesModel>.<Name>.Value
    '    Label = XDoc.<BayesModel>.<Label>.Value
    '    Description = XDoc.<BayesModel>.<Description>.Value
    '    If XDoc.<BayesModel>.<Notes>.Value <> Nothing Then Notes = XDoc.<BayesModel>.<Notes>.Value
    '    InputInfoType = XDoc.<BayesModel>.<InputInfoType>.Value
    '    Settings.ProbabilityMeasure = XDoc.<BayesModel>.<ProbabilityMeasure>.Value
    '    Settings.DecimalFormat = XDoc.<BayesModel>.<DecimalFormat>.Value
    '    Settings.PercentFormat = XDoc.<BayesModel>.<PercentFormat>.Value
    '    Settings.SamplesFormat = XDoc.<BayesModel>.<SamplesFormat>.Value
    '    SampleSize.Value = XDoc.<BayesModel>.<SampleSize>.Value

    '    If XDoc.<BayesModel>.<ShowProbabilities>.Value <> Nothing Then ShowProbabilities = XDoc.<BayesModel>.<ShowProbabilities>.Value
    '    If XDoc.<BayesModel>.<ShowSampleCounts>.Value <> Nothing Then ShowSampleCounts = XDoc.<BayesModel>.<ShowSampleCounts>.Value

    '    If XDoc.<BayesModel>.<PerformanceDisplayFormat>.Value <> Nothing Then Performance.DisplayFormat = XDoc.<BayesModel>.<PerformanceDisplayFormat>.Value

    '    EventA.Name = XDoc.<BayesModel>.<EventA>.<Name>.Value
    '    EventA.Description = XDoc.<BayesModel>.<EventA>.<Description>.Value
    '    If XDoc.<BayesModel>.<EventA>.<NotName>.Value <> Nothing Then EventA.NotName = XDoc.<BayesModel>.<EventA>.<NotName>.Value

    '    EventB.Name = XDoc.<BayesModel>.<EventB>.<Name>.Value
    '    EventB.Description = XDoc.<BayesModel>.<EventB>.<Description>.Value
    '    If XDoc.<BayesModel>.<EventB>.<NotName>.Value <> Nothing Then EventB.NotName = XDoc.<BayesModel>.<EventB>.<NotName>.Value

    '    ProbA.Value = XDoc.<BayesModel>.<Probability>.<AValue>.Value
    '    ProbA.Status = XDoc.<BayesModel>.<Probability>.<AStatus>.Value
    '    ProbA.Rank = XDoc.<BayesModel>.<Probability>.<ARank>.Value
    '    ProbNotA.Value = XDoc.<BayesModel>.<Probability>.<NotAValue>.Value
    '    ProbNotA.Status = XDoc.<BayesModel>.<Probability>.<NotAStatus>.Value
    '    ProbNotA.Rank = XDoc.<BayesModel>.<Probability>.<NotARank>.Value
    '    ProbB.Value = XDoc.<BayesModel>.<Probability>.<BValue>.Value
    '    ProbB.Status = XDoc.<BayesModel>.<Probability>.<BStatus>.Value
    '    ProbB.Rank = XDoc.<BayesModel>.<Probability>.<BRank>.Value
    '    ProbNotB.Value = XDoc.<BayesModel>.<Probability>.<NotBValue>.Value
    '    ProbNotB.Status = XDoc.<BayesModel>.<Probability>.<NotBStatus>.Value
    '    ProbNotB.Rank = XDoc.<BayesModel>.<Probability>.<NotBRank>.Value
    '    ProbAandB.Value = XDoc.<BayesModel>.<Probability>.<AandBValue>.Value
    '    ProbAandB.Status = XDoc.<BayesModel>.<Probability>.<AandBStatus>.Value
    '    ProbAandB.Rank = XDoc.<BayesModel>.<Probability>.<AandBRank>.Value
    '    ProbAandNotB.Value = XDoc.<BayesModel>.<Probability>.<AandNotBValue>.Value
    '    ProbAandNotB.Status = XDoc.<BayesModel>.<Probability>.<AandNotBStatus>.Value
    '    ProbAandNotB.Rank = XDoc.<BayesModel>.<Probability>.<AandNotBRank>.Value
    '    ProbNotAandB.Value = XDoc.<BayesModel>.<Probability>.<NotAandBValue>.Value
    '    ProbNotAandB.Status = XDoc.<BayesModel>.<Probability>.<NotAandBStatus>.Value
    '    ProbNotAandB.Rank = XDoc.<BayesModel>.<Probability>.<NotAandBRank>.Value
    '    ProbNotAandNotB.Value = XDoc.<BayesModel>.<Probability>.<NotAandNotBValue>.Value
    '    ProbNotAandNotB.Status = XDoc.<BayesModel>.<Probability>.<NotAandNotBStatus>.Value
    '    ProbNotAandNotB.Rank = XDoc.<BayesModel>.<Probability>.<NotAandNotBRank>.Value

    '    ProbA.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<AValue>.Value
    '    ProbA.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<AStatus>.Value
    '    ProbA.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<ARank>.Value
    '    ProbNotA.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAValue>.Value
    '    ProbNotA.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAStatus>.Value
    '    ProbNotA.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotARank>.Value
    '    ProbB.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<BValue>.Value
    '    ProbB.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<BStatus>.Value
    '    ProbB.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<BRank>.Value
    '    ProbNotB.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotBValue>.Value
    '    ProbNotB.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotBStatus>.Value
    '    ProbNotB.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotBRank>.Value
    '    ProbAandB.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<AandBValue>.Value
    '    ProbAandB.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<AandBStatus>.Value
    '    ProbAandB.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<AandBRank>.Value
    '    ProbAandNotB.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<AandNotBValue>.Value
    '    ProbAandNotB.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<AandNotBStatus>.Value
    '    ProbAandNotB.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<AandNotBRank>.Value
    '    ProbNotAandB.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAandBValue>.Value
    '    ProbNotAandB.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAandBStatus>.Value
    '    ProbNotAandB.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAandBRank>.Value
    '    ProbNotAandNotB.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAandNotBValue>.Value
    '    ProbNotAandNotB.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAandNotBStatus>.Value
    '    ProbNotAandNotB.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAandNotBRank>.Value

    '    ProbA.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AValue>.Value
    '    ProbA.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AStatus>.Value
    '    ProbA.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<ARank>.Value
    '    ProbNotA.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAValue>.Value
    '    ProbNotA.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAStatus>.Value
    '    ProbNotA.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotARank>.Value
    '    ProbB.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<BValue>.Value
    '    ProbB.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<BStatus>.Value
    '    ProbB.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<BRank>.Value
    '    ProbNotB.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotBValue>.Value
    '    ProbNotB.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotBStatus>.Value
    '    ProbNotB.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotBRank>.Value
    '    ProbAandB.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AandBValue>.Value
    '    ProbAandB.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AandBStatus>.Value
    '    ProbAandB.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AandBRank>.Value
    '    ProbAandNotB.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AandNotBValue>.Value
    '    ProbAandNotB.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AandNotBStatus>.Value
    '    ProbAandNotB.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AandNotBRank>.Value
    '    ProbNotAandB.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAandBValue>.Value
    '    ProbNotAandB.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAandBStatus>.Value
    '    ProbNotAandB.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAandBRank>.Value
    '    ProbNotAandNotB.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAandNotBValue>.Value
    '    ProbNotAandNotB.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAandNotBStatus>.Value
    '    ProbNotAandNotB.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAandNotBRank>.Value

    '    ProbA.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<AValue>.Value
    '    ProbA.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<AStatus>.Value
    '    ProbA.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<ARank>.Value
    '    ProbNotA.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAValue>.Value
    '    ProbNotA.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAStatus>.Value
    '    ProbNotA.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotARank>.Value
    '    ProbB.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<BValue>.Value
    '    ProbB.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<BStatus>.Value
    '    ProbB.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<BRank>.Value
    '    ProbNotB.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotBValue>.Value
    '    ProbNotB.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotBStatus>.Value
    '    ProbNotB.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotBRank>.Value
    '    ProbAandB.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<AandBValue>.Value
    '    ProbAandB.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<AandBStatus>.Value
    '    ProbAandB.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<AandBRank>.Value
    '    ProbAandNotB.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<AandNotBValue>.Value
    '    ProbAandNotB.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<AandNotBStatus>.Value
    '    ProbAandNotB.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<AandNotBRank>.Value
    '    ProbNotAandB.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAandBValue>.Value
    '    ProbNotAandB.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAandBStatus>.Value
    '    ProbNotAandB.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAandBRank>.Value
    '    ProbNotAandNotB.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAandNotBValue>.Value
    '    ProbNotAandNotB.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAandNotBStatus>.Value
    '    ProbNotAandNotB.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAandNotBRank>.Value

    '    ProbA.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AValue>.Value
    '    ProbA.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AStatus>.Value
    '    ProbA.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<ARank>.Value
    '    ProbNotA.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAValue>.Value
    '    ProbNotA.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAStatus>.Value
    '    ProbNotA.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotARank>.Value
    '    ProbB.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<BValue>.Value
    '    ProbB.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<BStatus>.Value
    '    ProbB.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<BRank>.Value
    '    ProbNotB.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotBValue>.Value
    '    ProbNotB.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotBStatus>.Value
    '    ProbNotB.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotBRank>.Value
    '    ProbAandB.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AandBValue>.Value
    '    ProbAandB.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AandBStatus>.Value
    '    ProbAandB.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AandBRank>.Value
    '    ProbAandNotB.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AandNotBValue>.Value
    '    ProbAandNotB.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AandNotBStatus>.Value
    '    ProbAandNotB.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AandNotBRank>.Value
    '    ProbNotAandB.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAandBValue>.Value
    '    ProbNotAandB.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAandBStatus>.Value
    '    ProbNotAandB.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAandBRank>.Value
    '    ProbNotAandNotB.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAandNotBValue>.Value
    '    ProbNotAandNotB.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAandNotBStatus>.Value
    '    ProbNotAandNotB.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAandNotBRank>.Value

    '    SampsA.Value = XDoc.<BayesModel>.<SampleCount>.<AValue>.Value
    '    SampsA.Status = XDoc.<BayesModel>.<SampleCount>.<AStatus>.Value
    '    SampsA.Rank = XDoc.<BayesModel>.<SampleCount>.<ARank>.Value
    '    SampsNotA.Value = XDoc.<BayesModel>.<SampleCount>.<NotAValue>.Value
    '    SampsNotA.Status = XDoc.<BayesModel>.<SampleCount>.<NotAStatus>.Value
    '    SampsNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<NotARank>.Value
    '    SampsB.Value = XDoc.<BayesModel>.<SampleCount>.<BValue>.Value
    '    SampsB.Status = XDoc.<BayesModel>.<SampleCount>.<BStatus>.Value
    '    SampsB.Rank = XDoc.<BayesModel>.<SampleCount>.<BRank>.Value
    '    SampsNotB.Value = XDoc.<BayesModel>.<SampleCount>.<NotBValue>.Value
    '    SampsNotB.Status = XDoc.<BayesModel>.<SampleCount>.<NotBStatus>.Value
    '    SampsNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<NotBRank>.Value
    '    SampsAandB.Value = XDoc.<BayesModel>.<SampleCount>.<AandBValue>.Value
    '    SampsAandB.Status = XDoc.<BayesModel>.<SampleCount>.<AandBStatus>.Value
    '    SampsAandB.Rank = XDoc.<BayesModel>.<SampleCount>.<AandBRank>.Value
    '    SampsAandNotB.Value = XDoc.<BayesModel>.<SampleCount>.<AandNotBValue>.Value
    '    SampsAandNotB.Status = XDoc.<BayesModel>.<SampleCount>.<AandNotBStatus>.Value
    '    SampsAandNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<AandNotBRank>.Value
    '    SampsNotAandB.Value = XDoc.<BayesModel>.<SampleCount>.<NotAandBValue>.Value
    '    SampsNotAandB.Status = XDoc.<BayesModel>.<SampleCount>.<NotAandBStatus>.Value
    '    SampsNotAandB.Rank = XDoc.<BayesModel>.<SampleCount>.<NotAandBRank>.Value
    '    SampsNotAandNotB.Value = XDoc.<BayesModel>.<SampleCount>.<NotAandNotBValue>.Value
    '    SampsNotAandNotB.Status = XDoc.<BayesModel>.<SampleCount>.<NotAandNotBStatus>.Value
    '    SampsNotAandNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<NotAandNotBRank>.Value

    '    SampsA.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AValue>.Value
    '    SampsA.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AStatus>.Value
    '    SampsA.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<ARank>.Value
    '    SampsNotA.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAValue>.Value
    '    SampsNotA.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAStatus>.Value
    '    SampsNotA.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotARank>.Value
    '    SampsB.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<BValue>.Value
    '    SampsB.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<BStatus>.Value
    '    SampsB.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<BRank>.Value
    '    SampsNotB.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotBValue>.Value
    '    SampsNotB.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotBStatus>.Value
    '    SampsNotB.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotBRank>.Value
    '    SampsAandB.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AandBValue>.Value
    '    SampsAandB.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AandBStatus>.Value
    '    SampsAandB.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AandBRank>.Value
    '    SampsAandNotB.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AandNotBValue>.Value
    '    SampsAandNotB.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AandNotBStatus>.Value
    '    SampsAandNotB.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AandNotBRank>.Value
    '    SampsNotAandB.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAandBValue>.Value
    '    SampsNotAandB.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAandBStatus>.Value
    '    SampsNotAandB.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAandBRank>.Value
    '    SampsNotAandNotB.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAandNotBValue>.Value
    '    SampsNotAandNotB.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAandNotBStatus>.Value
    '    SampsNotAandNotB.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAandNotBRank>.Value

    '    SampsA.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AValue>.Value
    '    SampsA.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AStatus>.Value
    '    SampsA.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<ARank>.Value
    '    SampsNotA.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAValue>.Value
    '    SampsNotA.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAStatus>.Value
    '    SampsNotA.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotARank>.Value
    '    SampsB.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<BValue>.Value
    '    SampsB.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<BStatus>.Value
    '    SampsB.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<BRank>.Value
    '    SampsNotB.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotBValue>.Value
    '    SampsNotB.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotBStatus>.Value
    '    SampsNotB.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotBRank>.Value
    '    SampsAandB.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AandBValue>.Value
    '    SampsAandB.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AandBStatus>.Value
    '    SampsAandB.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AandBRank>.Value
    '    SampsAandNotB.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AandNotBValue>.Value
    '    SampsAandNotB.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AandNotBStatus>.Value
    '    SampsAandNotB.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AandNotBRank>.Value
    '    SampsNotAandB.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAandBValue>.Value
    '    SampsNotAandB.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAandBStatus>.Value
    '    SampsNotAandB.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAandBRank>.Value
    '    SampsNotAandNotB.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAandNotBValue>.Value
    '    SampsNotAandNotB.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAandNotBStatus>.Value
    '    SampsNotAandNotB.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAandNotBRank>.Value

    '    SampsA.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AValue>.Value
    '    SampsA.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AStatus>.Value
    '    SampsA.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<ARank>.Value
    '    SampsNotA.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAValue>.Value
    '    SampsNotA.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAStatus>.Value
    '    SampsNotA.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotARank>.Value
    '    SampsB.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<BValue>.Value
    '    SampsB.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<BStatus>.Value
    '    SampsB.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<BRank>.Value
    '    SampsNotB.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotBValue>.Value
    '    SampsNotB.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotBStatus>.Value
    '    SampsNotB.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotBRank>.Value
    '    SampsAandB.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AandBValue>.Value
    '    SampsAandB.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AandBStatus>.Value
    '    SampsAandB.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AandBRank>.Value
    '    SampsAandNotB.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AandNotBValue>.Value
    '    SampsAandNotB.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AandNotBStatus>.Value
    '    SampsAandNotB.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AandNotBRank>.Value
    '    SampsNotAandB.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAandBValue>.Value
    '    SampsNotAandB.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAandBStatus>.Value
    '    SampsNotAandB.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAandBRank>.Value
    '    SampsNotAandNotB.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAandNotBValue>.Value
    '    SampsNotAandNotB.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAandNotBStatus>.Value
    '    SampsNotAandNotB.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAandNotBRank>.Value

    '    SampsA.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AValue>.Value
    '    SampsA.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AStatus>.Value
    '    SampsA.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<ARank>.Value
    '    SampsNotA.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAValue>.Value
    '    SampsNotA.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAStatus>.Value
    '    SampsNotA.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotARank>.Value
    '    SampsB.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<BValue>.Value
    '    SampsB.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<BStatus>.Value
    '    SampsB.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<BRank>.Value
    '    SampsNotB.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotBValue>.Value
    '    SampsNotB.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotBStatus>.Value
    '    SampsNotB.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotBRank>.Value
    '    SampsAandB.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AandBValue>.Value
    '    SampsAandB.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AandBStatus>.Value
    '    SampsAandB.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AandBRank>.Value
    '    SampsAandNotB.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AandNotBValue>.Value
    '    SampsAandNotB.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AandNotBStatus>.Value
    '    SampsAandNotB.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AandNotBRank>.Value
    '    SampsNotAandB.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAandBValue>.Value
    '    SampsNotAandB.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAandBStatus>.Value
    '    SampsNotAandB.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAandBRank>.Value
    '    SampsNotAandNotB.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAandNotBValue>.Value
    '    SampsNotAandNotB.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAandNotBStatus>.Value
    '    SampsNotAandNotB.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAandNotBRank>.Value

    '    Diagram.LineColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<LineColor>.Value)
    '    Diagram.LineThickness = XDoc.<BayesModel>.<Diagram>.<LineThickness>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<BoldLineThickness>.Value <> Nothing Then Diagram.BoldLineThickness = XDoc.<BayesModel>.<Diagram>.<BoldLineThickness>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<BoldLine>.Value <> Nothing Then Diagram.BoldLine = XDoc.<BayesModel>.<Diagram>.<BoldLine>.Value
    '    Diagram.FillColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<FillColor>.Value)
    '    Diagram.Height = XDoc.<BayesModel>.<Diagram>.<Height>.Value
    '    Diagram.Width = XDoc.<BayesModel>.<Diagram>.<Width>.Value

    '    EventA.LineColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<EventA>.<LineColor>.Value)
    '    EventA.FillColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<EventA>.<FillColor>.Value)
    '    EventA.Shape = XDoc.<BayesModel>.<Diagram>.<EventA>.<Shape>.Value
    '    EventA.LineThickness = XDoc.<BayesModel>.<Diagram>.<EventA>.<LineThickness>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<EventA>.<BoldLineThickness>.Value <> Nothing Then EventA.BoldLineThickness = XDoc.<BayesModel>.<Diagram>.<EventA>.<BoldLineThickness>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<EventA>.<BoldLine>.Value <> Nothing Then EventA.BoldLine = XDoc.<BayesModel>.<Diagram>.<EventA>.<BoldLine>.Value
    '    EventA.Unscaled.XMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<Unscaled>.<XMin>.Value
    '    EventA.Unscaled.XMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<Unscaled>.<XMax>.Value
    '    EventA.Unscaled.YMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<Unscaled>.<YMin>.Value
    '    EventA.Unscaled.YMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<Unscaled>.<YMax>.Value
    '    EventA.ScaleA.XMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleA>.<XMin>.Value
    '    EventA.ScaleA.XMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleA>.<XMax>.Value
    '    EventA.ScaleA.YMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleA>.<YMin>.Value
    '    EventA.ScaleA.YMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleA>.<YMax>.Value
    '    EventA.ScaleB.XMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleB>.<XMin>.Value
    '    EventA.ScaleB.XMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleB>.<XMax>.Value
    '    EventA.ScaleB.YMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleB>.<YMin>.Value
    '    EventA.ScaleB.YMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleB>.<YMax>.Value
    '    EventA.ScaleAB.XMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleAB>.<XMin>.Value
    '    EventA.ScaleAB.XMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleAB>.<XMax>.Value
    '    EventA.ScaleAB.YMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleAB>.<YMin>.Value
    '    EventA.ScaleAB.YMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleAB>.<YMax>.Value

    '    EventB.LineColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<EventB>.<LineColor>.Value)
    '    EventB.FillColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<EventB>.<FillColor>.Value)
    '    EventB.Shape = XDoc.<BayesModel>.<Diagram>.<EventB>.<Shape>.Value
    '    EventB.LineThickness = XDoc.<BayesModel>.<Diagram>.<EventB>.<LineThickness>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<EventB>.<BoldLineThickness>.Value <> Nothing Then EventB.BoldLineThickness = XDoc.<BayesModel>.<Diagram>.<EventB>.<BoldLineThickness>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<EventB>.<BoldLine>.Value <> Nothing Then EventB.BoldLine = XDoc.<BayesModel>.<Diagram>.<EventB>.<BoldLine>.Value
    '    EventB.Unscaled.XMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<Unscaled>.<XMin>.Value
    '    EventB.Unscaled.XMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<Unscaled>.<XMax>.Value
    '    EventB.Unscaled.YMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<Unscaled>.<YMin>.Value
    '    EventB.Unscaled.YMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<Unscaled>.<YMax>.Value
    '    EventB.ScaleA.XMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleA>.<XMin>.Value
    '    EventB.ScaleA.XMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleA>.<XMax>.Value
    '    EventB.ScaleA.YMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleA>.<YMin>.Value
    '    EventB.ScaleA.YMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleA>.<YMax>.Value
    '    EventB.ScaleB.XMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleB>.<XMin>.Value
    '    EventB.ScaleB.XMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleB>.<XMax>.Value
    '    EventB.ScaleB.YMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleB>.<YMin>.Value
    '    EventB.ScaleB.YMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleB>.<YMax>.Value
    '    EventB.ScaleAB.XMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleAB>.<XMin>.Value
    '    EventB.ScaleAB.XMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleAB>.<XMax>.Value
    '    EventB.ScaleAB.YMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleAB>.<YMin>.Value
    '    EventB.ScaleAB.YMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleAB>.<YMax>.Value

    '    EventAandBFillColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<EventAandBFillColor>.Value)

    '    HighlightRegion.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<HighLight>.<RegionColor>.Value)
    '    HighlightRegion.A = XDoc.<BayesModel>.<Diagram>.<HighLight>.<A>.Value
    '    HighlightRegion.NotA = XDoc.<BayesModel>.<Diagram>.<HighLight>.<NotA>.Value
    '    HighlightRegion.B = XDoc.<BayesModel>.<Diagram>.<HighLight>.<B>.Value
    '    HighlightRegion.NotB = XDoc.<BayesModel>.<Diagram>.<HighLight>.<NotB>.Value
    '    HighlightRegion.AandB = XDoc.<BayesModel>.<Diagram>.<HighLight>.<AandB>.Value
    '    HighlightRegion.AandNotB = XDoc.<BayesModel>.<Diagram>.<HighLight>.<AandNotB>.Value
    '    HighlightRegion.NotAandB = XDoc.<BayesModel>.<Diagram>.<HighLight>.<NotAandB>.Value
    '    HighlightRegion.NotAandNotB = XDoc.<BayesModel>.<Diagram>.<HighLight>.<NotAandNotB>.Value

    '    ZeroProbRegion.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<RegionColor>.Value)
    '    ZeroProbRegion.A = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<A>.Value
    '    ZeroProbRegion.NotA = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<NotA>.Value
    '    ZeroProbRegion.B = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<B>.Value
    '    ZeroProbRegion.NotB = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<NotB>.Value
    '    ZeroProbRegion.AandB = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<AandB>.Value
    '    ZeroProbRegion.AandNotB = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<AandNotB>.Value
    '    ZeroProbRegion.NotAandB = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<NotAandB>.Value
    '    ZeroProbRegion.NotAandNotB = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<NotAandNotB>.Value

    '    AnnotTitle.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Text>.Value
    '    Dim myFontStyle As FontStyle
    '    Dim myFontSize As Single
    '    Dim myFontName As String
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    AnnotTitle.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    AnnotTitle.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Color>.Value)
    '    AnnotTitle.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<MidX>.Value
    '    AnnotTitle.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Y>.Value
    '    AnnotTitle.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<MidX>.Value
    '    AnnotTitle.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Y>.Value
    '    AnnotTitle.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<MidX>.Value
    '    AnnotTitle.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Y>.Value
    '    AnnotTitle.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<MidX>.Value
    '    AnnotTitle.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Y>.Value

    '    AnnotDescr.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    AnnotDescr.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    AnnotDescr.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Color>.Value)
    '    AnnotDescr.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<MidX>.Value
    '    AnnotDescr.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Y>.Value
    '    AnnotDescr.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<MidX>.Value
    '    AnnotDescr.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Y>.Value
    '    AnnotDescr.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<MidX>.Value
    '    AnnotDescr.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Y>.Value
    '    AnnotDescr.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<MidX>.Value
    '    AnnotDescr.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Y>.Value


    '    AnnotEventA.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    AnnotEventA.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    AnnotEventA.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Color>.Value)
    '    AnnotEventA.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Unscaled>.<MidX>.Value
    '    AnnotEventA.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Unscaled>.<Y>.Value
    '    AnnotEventA.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<ScaleA>.<MidX>.Value
    '    AnnotEventA.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<ScaleA>.<Y>.Value
    '    AnnotEventA.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<ScaleB>.<MidX>.Value
    '    AnnotEventA.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<ScaleB>.<Y>.Value
    '    AnnotEventA.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<ScaleAB>.<MidX>.Value
    '    AnnotEventA.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<ScaleAB>.<Y>.Value

    '    AnnotEventB.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    AnnotEventB.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    AnnotEventB.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Color>.Value)
    '    AnnotEventB.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Unscaled>.<MidX>.Value
    '    AnnotEventB.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Unscaled>.<Y>.Value
    '    AnnotEventB.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<ScaleA>.<MidX>.Value
    '    AnnotEventB.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<ScaleA>.<Y>.Value
    '    AnnotEventB.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<ScaleB>.<MidX>.Value
    '    AnnotEventB.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<ScaleB>.<Y>.Value
    '    AnnotEventB.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<ScaleAB>.<MidX>.Value
    '    AnnotEventB.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<ScaleAB>.<Y>.Value

    '    ProbA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout

    '    ProbA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    ProbA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Color>.Value)
    '    ProbA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Show>.Value
    '    ProbA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Unscaled>.<MidX>.Value
    '    ProbA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Unscaled>.<Y>.Value
    '    ProbA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<ScaleA>.<MidX>.Value
    '    ProbA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<ScaleA>.<Y>.Value
    '    ProbA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<ScaleB>.<MidX>.Value
    '    ProbA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<ScaleB>.<Y>.Value
    '    ProbA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<ScaleAB>.<MidX>.Value
    '    ProbA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<ScaleAB>.<Y>.Value

    '    ProbNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    ProbNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    ProbNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Color>.Value)
    '    ProbNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Show>.Value
    '    ProbNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Unscaled>.<MidX>.Value
    '    ProbNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Unscaled>.<Y>.Value
    '    ProbNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<ScaleA>.<MidX>.Value
    '    ProbNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<ScaleA>.<Y>.Value
    '    ProbNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<ScaleB>.<MidX>.Value
    '    ProbNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<ScaleB>.<Y>.Value
    '    ProbNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<ScaleAB>.<MidX>.Value
    '    ProbNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<ScaleAB>.<Y>.Value

    '    ProbB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    ProbB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    ProbB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Color>.Value)
    '    ProbB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Show>.Value
    '    ProbB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Unscaled>.<MidX>.Value
    '    ProbB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Unscaled>.<Y>.Value
    '    ProbB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<ScaleA>.<MidX>.Value
    '    ProbB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<ScaleA>.<Y>.Value
    '    ProbB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<ScaleB>.<MidX>.Value
    '    ProbB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<ScaleB>.<Y>.Value
    '    ProbB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<ScaleAB>.<MidX>.Value
    '    ProbB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<ScaleAB>.<Y>.Value

    '    ProbNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    ProbNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    ProbNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Color>.Value)
    '    ProbNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Show>.Value
    '    ProbNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Unscaled>.<MidX>.Value
    '    ProbNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Unscaled>.<Y>.Value
    '    ProbNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<ScaleA>.<MidX>.Value
    '    ProbNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<ScaleA>.<Y>.Value
    '    ProbNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<ScaleB>.<MidX>.Value
    '    ProbNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<ScaleB>.<Y>.Value
    '    ProbNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<ScaleAB>.<MidX>.Value
    '    ProbNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<ScaleAB>.<Y>.Value

    '    ProbAandB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    ProbAandB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    ProbAandB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Color>.Value)
    '    ProbAandB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Show>.Value
    '    ProbAandB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Unscaled>.<MidX>.Value
    '    ProbAandB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Unscaled>.<Y>.Value
    '    ProbAandB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<ScaleA>.<MidX>.Value
    '    ProbAandB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<ScaleA>.<Y>.Value
    '    ProbAandB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<ScaleB>.<MidX>.Value
    '    ProbAandB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<ScaleB>.<Y>.Value
    '    ProbAandB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<ScaleAB>.<MidX>.Value
    '    ProbAandB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<ScaleAB>.<Y>.Value

    '    ProbAandNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    ProbAandNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    ProbAandNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Color>.Value)
    '    ProbAandNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Show>.Value
    '    ProbAandNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Unscaled>.<MidX>.Value
    '    ProbAandNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Unscaled>.<Y>.Value
    '    ProbAandNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<ScaleA>.<MidX>.Value
    '    ProbAandNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<ScaleA>.<Y>.Value
    '    ProbAandNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<ScaleB>.<MidX>.Value
    '    ProbAandNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<ScaleB>.<Y>.Value
    '    ProbAandNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<ScaleAB>.<MidX>.Value
    '    ProbAandNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<ScaleAB>.<Y>.Value

    '    ProbNotAandB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    ProbNotAandB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    ProbNotAandB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Color>.Value)
    '    ProbNotAandB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Show>.Value
    '    ProbNotAandB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Unscaled>.<MidX>.Value
    '    ProbNotAandB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Unscaled>.<Y>.Value
    '    ProbNotAandB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<ScaleA>.<MidX>.Value
    '    ProbNotAandB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<ScaleA>.<Y>.Value
    '    ProbNotAandB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<ScaleB>.<MidX>.Value
    '    ProbNotAandB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<ScaleB>.<Y>.Value
    '    ProbNotAandB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<ScaleAB>.<MidX>.Value
    '    ProbNotAandB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<ScaleAB>.<Y>.Value

    '    ProbNotAandNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    ProbNotAandNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    ProbNotAandNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Color>.Value)
    '    ProbNotAandNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Show>.Value
    '    ProbNotAandNotB.Label.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Unscaled>.<X>.Value
    '    ProbNotAandNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Unscaled>.<Y>.Value
    '    ProbNotAandNotB.Label.ScaleA.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<ScaleA>.<X>.Value
    '    ProbNotAandNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<ScaleA>.<Y>.Value
    '    ProbNotAandNotB.Label.ScaleB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<ScaleB>.<X>.Value
    '    ProbNotAandNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<ScaleB>.<Y>.Value
    '    ProbNotAandNotB.Label.ScaleAB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<ScaleAB>.<X>.Value
    '    ProbNotAandNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<ScaleAB>.<Y>.Value

    '    SampsA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    SampsA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    SampsA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Color>.Value)
    '    SampsA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Show>.Value
    '    SampsA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Unscaled>.<MidX>.Value
    '    SampsA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Unscaled>.<Y>.Value
    '    SampsA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<ScaleA>.<MidX>.Value
    '    SampsA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<ScaleA>.<Y>.Value
    '    SampsA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<ScaleB>.<MidX>.Value
    '    SampsA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<ScaleB>.<Y>.Value
    '    SampsA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<ScaleAB>.<MidX>.Value
    '    SampsA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<ScaleAB>.<Y>.Value

    '    SampsNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    SampsNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    SampsNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Color>.Value)
    '    SampsNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Show>.Value
    '    SampsNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Unscaled>.<MidX>.Value
    '    SampsNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Unscaled>.<Y>.Value
    '    SampsNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<ScaleA>.<MidX>.Value
    '    SampsNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<ScaleA>.<Y>.Value
    '    SampsNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<ScaleB>.<MidX>.Value
    '    SampsNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<ScaleB>.<Y>.Value
    '    SampsNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<ScaleAB>.<MidX>.Value
    '    SampsNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<ScaleAB>.<Y>.Value

    '    SampsB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    SampsB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    SampsB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Color>.Value)
    '    SampsB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Show>.Value
    '    SampsB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Unscaled>.<MidX>.Value
    '    SampsB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Unscaled>.<Y>.Value
    '    SampsB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<ScaleA>.<MidX>.Value
    '    SampsB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<ScaleA>.<Y>.Value
    '    SampsB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<ScaleB>.<MidX>.Value
    '    SampsB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<ScaleB>.<Y>.Value
    '    SampsB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<ScaleAB>.<MidX>.Value
    '    SampsB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<ScaleAB>.<Y>.Value

    '    SampsNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    SampsNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    SampsNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Color>.Value)
    '    SampsNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Show>.Value
    '    SampsNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Unscaled>.<MidX>.Value
    '    SampsNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Unscaled>.<Y>.Value
    '    SampsNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<ScaleA>.<MidX>.Value
    '    SampsNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<ScaleA>.<Y>.Value
    '    SampsNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<ScaleB>.<MidX>.Value
    '    SampsNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<ScaleB>.<Y>.Value
    '    SampsNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<ScaleAB>.<MidX>.Value
    '    SampsNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<ScaleAB>.<Y>.Value

    '    SampsAandB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    SampsAandB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    SampsAandB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Color>.Value)
    '    SampsAandB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Show>.Value
    '    SampsAandB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Unscaled>.<MidX>.Value
    '    SampsAandB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Unscaled>.<Y>.Value
    '    SampsAandB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<ScaleA>.<MidX>.Value
    '    SampsAandB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<ScaleA>.<Y>.Value
    '    SampsAandB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<ScaleB>.<MidX>.Value
    '    SampsAandB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<ScaleB>.<Y>.Value
    '    SampsAandB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<ScaleAB>.<MidX>.Value
    '    SampsAandB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<ScaleAB>.<Y>.Value

    '    SampsAandNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    SampsAandNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    SampsAandNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Color>.Value)
    '    SampsAandNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Show>.Value
    '    SampsAandNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Unscaled>.<MidX>.Value
    '    SampsAandNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Unscaled>.<Y>.Value
    '    SampsAandNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<ScaleA>.<MidX>.Value
    '    SampsAandNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<ScaleA>.<Y>.Value
    '    SampsAandNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<ScaleB>.<MidX>.Value
    '    SampsAandNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<ScaleB>.<Y>.Value
    '    SampsAandNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<ScaleAB>.<MidX>.Value
    '    SampsAandNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<ScaleAB>.<Y>.Value

    '    SampsNotAandB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    SampsNotAandB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    SampsNotAandB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Color>.Value)
    '    SampsNotAandB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Show>.Value
    '    SampsNotAandB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Unscaled>.<MidX>.Value
    '    SampsNotAandB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Unscaled>.<Y>.Value
    '    SampsNotAandB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<ScaleA>.<MidX>.Value
    '    SampsNotAandB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<ScaleA>.<Y>.Value
    '    SampsNotAandB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<ScaleB>.<MidX>.Value
    '    SampsNotAandB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<ScaleB>.<Y>.Value
    '    SampsNotAandB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<ScaleAB>.<MidX>.Value
    '    SampsNotAandB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<ScaleAB>.<Y>.Value

    '    SampsNotAandNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Unscaled>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    SampsNotAandNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    SampsNotAandNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Color>.Value)
    '    SampsNotAandNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Show>.Value
    '    SampsNotAandNotB.Label.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Unscaled>.<X>.Value
    '    SampsNotAandNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Unscaled>.<Y>.Value
    '    SampsNotAandNotB.Label.ScaleA.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<ScaleA>.<X>.Value
    '    SampsNotAandNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<ScaleA>.<Y>.Value
    '    SampsNotAandNotB.Label.ScaleB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<ScaleB>.<X>.Value
    '    SampsNotAandNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<ScaleB>.<Y>.Value
    '    SampsNotAandNotB.Label.ScaleAB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<ScaleAB>.<X>.Value
    '    SampsNotAandNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<ScaleAB>.<Y>.Value

    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Prefix>.Value <> Nothing Then SampleSize.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Prefix>.Value

    '    AnnotSampleSize.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    AnnotSampleSize.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    AnnotSampleSize.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Color>.Value)
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<X>.Value <> Nothing Then AnnotSampleSize.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<X>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<MidX>.Value <> Nothing Then AnnotSampleSize.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<MidX>.Value
    '    AnnotSampleSize.ScaleA.MidX = AnnotSampleSize.Unscaled.MidX
    '    AnnotSampleSize.ScaleB.MidX = AnnotSampleSize.Unscaled.MidX
    '    AnnotSampleSize.ScaleAB.MidX = AnnotSampleSize.Unscaled.MidX
    '    AnnotSampleSize.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Show>.Value
    '    AnnotSampleSize.Unscaled.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<BaseY>.Value
    '    AnnotSampleSize.ScaleA.BaseY = AnnotSampleSize.Unscaled.BaseY
    '    AnnotSampleSize.ScaleB.BaseY = AnnotSampleSize.Unscaled.BaseY
    '    AnnotSampleSize.ScaleAB.BaseY = AnnotSampleSize.Unscaled.BaseY

    '    AnnotConditionalSampleSize.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Text>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    AnnotConditionalSampleSize.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    AnnotConditionalSampleSize.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Color>.Value)
    '    AnnotConditionalSampleSize.Unscaled.EndX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<EndX>.Value
    '    AnnotConditionalSampleSize.Unscaled.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<BaseY>.Value
    '    AnnotConditionalSampleSize.ScaleA.EndX = AnnotConditionalSampleSize.Unscaled.EndX
    '    AnnotConditionalSampleSize.ScaleA.BaseY = AnnotConditionalSampleSize.Unscaled.BaseY
    '    AnnotConditionalSampleSize.ScaleB.EndX = AnnotConditionalSampleSize.Unscaled.EndX
    '    AnnotConditionalSampleSize.ScaleB.BaseY = AnnotConditionalSampleSize.Unscaled.BaseY
    '    AnnotConditionalSampleSize.ScaleAB.EndX = AnnotConditionalSampleSize.Unscaled.EndX
    '    AnnotConditionalSampleSize.ScaleAB.BaseY = AnnotConditionalSampleSize.Unscaled.BaseY
    '    AnnotConditionalSampleSize.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Show>.Value

    '    Settings.Condition = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Name>.Value
    '    myFontStyle = FontStyle.Regular
    '    myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Font>.<Size>.Value
    '    myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Font>.<Name>.Value
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
    '    If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
    '    AnnotCondition.Font = New Font(myFontName, myFontSize, myFontStyle)
    '    AnnotCondition.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Color>.Value)
    '    AnnotCondition.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Show>.Value

    '    AnnotCondition.None.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<Text>.Value
    '    AnnotCondition.None.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<MidX>.Value
    '    AnnotCondition.None.MidY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<MidY>.Value
    '    AnnotCondition.None.EndX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<EndX>.Value
    '    AnnotCondition.None.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<BaseY>.Value
    '    AnnotCondition.None.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<X>.Value
    '    AnnotCondition.None.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<Y>.Value
    '    AnnotCondition.None.XPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<XPositionReference>.Value
    '    AnnotCondition.None.YPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<YPositionReference>.Value

    '    AnnotCondition.EventATrue.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<Text>.Value
    '    AnnotCondition.EventATrue.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<MidX>.Value
    '    AnnotCondition.EventATrue.MidY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<MidY>.Value
    '    AnnotCondition.EventATrue.EndX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<EndX>.Value
    '    AnnotCondition.EventATrue.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<BaseY>.Value
    '    AnnotCondition.EventATrue.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<X>.Value
    '    AnnotCondition.EventATrue.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<Y>.Value
    '    AnnotCondition.EventATrue.XPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<XPositionReference>.Value
    '    AnnotCondition.EventATrue.YPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<YPositionReference>.Value

    '    AnnotCondition.EventAFalse.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<Text>.Value
    '    AnnotCondition.EventAFalse.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<MidX>.Value
    '    AnnotCondition.EventAFalse.MidY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<MidY>.Value
    '    AnnotCondition.EventAFalse.EndX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<EndX>.Value
    '    AnnotCondition.EventAFalse.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<BaseY>.Value
    '    AnnotCondition.EventAFalse.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<X>.Value
    '    AnnotCondition.EventAFalse.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<Y>.Value
    '    AnnotCondition.EventAFalse.XPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<XPositionReference>.Value
    '    AnnotCondition.EventAFalse.YPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<YPositionReference>.Value

    '    AnnotCondition.EventBTrue.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<Text>.Value
    '    AnnotCondition.EventBTrue.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<MidX>.Value
    '    AnnotCondition.EventBTrue.MidY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<MidY>.Value
    '    AnnotCondition.EventBTrue.EndX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<EndX>.Value
    '    AnnotCondition.EventBTrue.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<BaseY>.Value
    '    AnnotCondition.EventBTrue.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<X>.Value
    '    AnnotCondition.EventBTrue.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<Y>.Value
    '    AnnotCondition.EventBTrue.XPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<XPositionReference>.Value
    '    AnnotCondition.EventBTrue.YPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<YPositionReference>.Value

    '    AnnotCondition.EventBFalse.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<Text>.Value
    '    AnnotCondition.EventBFalse.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<MidX>.Value
    '    AnnotCondition.EventBFalse.MidY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<MidY>.Value
    '    AnnotCondition.EventBFalse.EndX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<EndX>.Value
    '    AnnotCondition.EventBFalse.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<BaseY>.Value
    '    AnnotCondition.EventBFalse.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<X>.Value
    '    AnnotCondition.EventBFalse.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<Y>.Value
    '    AnnotCondition.EventBFalse.XPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<XPositionReference>.Value
    '    AnnotCondition.EventBFalse.YPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<YPositionReference>.Value

    '    FixDuplicateRanks(1) 'Ensure there is only one parameter of Rank 1
    '    FixDuplicateRanks(2) 'Ensure there is only one parameter of Rank 2
    '    FixDuplicateRanks(3) 'Ensure there is only one parameter of Rank 3

    '    UpdateAccuracy()
    '    UpdatePrecision()
    '    UpdateSensitivity()
    '    UpdateSpecificity()
    '    UpdatePrevalence()

    'End Sub

    Public Sub XDocToBayes(ByRef XDoc As System.Xml.Linq.XDocument)
        'Read the Bayes model information from the XDocument.

        If XDoc Is Nothing Then Exit Sub

        Name = XDoc.<BayesModel>.<Name>.Value
        Label = XDoc.<BayesModel>.<Label>.Value
        Description = XDoc.<BayesModel>.<Description>.Value 'NOTE: The Description should not contain special characters.
        'Description = System.Xml.XmlConvert.DecodeName(XDoc.<BayesModel>.<Description>.Value) 'The description may contain special characters that are not stored correctly in an XML document without encoding and decoding.
        'If XDoc.<BayesModel>.<Notes>.Value <> Nothing Then Notes = XDoc.<BayesModel>.<Notes>.Value
        Notes = System.Xml.XmlConvert.DecodeName(XDoc.<BayesModel>.<Notes>.Value)  'The description may contain special characters that are not stored correctly in an XML document without encoding and decoding.

        InputInfoType = XDoc.<BayesModel>.<InputInfoType>.Value
        Settings.ProbabilityMeasure = XDoc.<BayesModel>.<ProbabilityMeasure>.Value
        Settings.DecimalFormat = XDoc.<BayesModel>.<DecimalFormat>.Value
        Settings.PercentFormat = XDoc.<BayesModel>.<PercentFormat>.Value
        Settings.SamplesFormat = XDoc.<BayesModel>.<SamplesFormat>.Value
        SampleSize.Value = XDoc.<BayesModel>.<SampleSize>.Value

        If XDoc.<BayesModel>.<ShowProbabilities>.Value <> Nothing Then ShowProbabilities = XDoc.<BayesModel>.<ShowProbabilities>.Value
        If XDoc.<BayesModel>.<ShowSampleCounts>.Value <> Nothing Then ShowSampleCounts = XDoc.<BayesModel>.<ShowSampleCounts>.Value

        'If XDoc.<BayesModel>.<PerformanceDisplayFormat>.Value <> Nothing Then Performance.DisplayFormat = XDoc.<BayesModel>.<PerformanceDisplayFormat>.Value

        EventA.Name = XDoc.<BayesModel>.<EventA>.<Name>.Value
        EventA.Description = XDoc.<BayesModel>.<EventA>.<Description>.Value
        If XDoc.<BayesModel>.<EventA>.<NotName>.Value <> Nothing Then EventA.NotName = XDoc.<BayesModel>.<EventA>.<NotName>.Value

        EventB.Name = XDoc.<BayesModel>.<EventB>.<Name>.Value
        EventB.Description = XDoc.<BayesModel>.<EventB>.<Description>.Value
        If XDoc.<BayesModel>.<EventB>.<NotName>.Value <> Nothing Then EventB.NotName = XDoc.<BayesModel>.<EventB>.<NotName>.Value

        ProbA.Value = XDoc.<BayesModel>.<Probability>.<AValue>.Value
        ProbA.Status = XDoc.<BayesModel>.<Probability>.<AStatus>.Value
        ProbA.Rank = XDoc.<BayesModel>.<Probability>.<ARank>.Value
        ProbNotA.Value = XDoc.<BayesModel>.<Probability>.<NotAValue>.Value
        ProbNotA.Status = XDoc.<BayesModel>.<Probability>.<NotAStatus>.Value
        ProbNotA.Rank = XDoc.<BayesModel>.<Probability>.<NotARank>.Value
        ProbB.Value = XDoc.<BayesModel>.<Probability>.<BValue>.Value
        ProbB.Status = XDoc.<BayesModel>.<Probability>.<BStatus>.Value
        ProbB.Rank = XDoc.<BayesModel>.<Probability>.<BRank>.Value
        ProbNotB.Value = XDoc.<BayesModel>.<Probability>.<NotBValue>.Value
        ProbNotB.Status = XDoc.<BayesModel>.<Probability>.<NotBStatus>.Value
        ProbNotB.Rank = XDoc.<BayesModel>.<Probability>.<NotBRank>.Value
        ProbAandB.Value = XDoc.<BayesModel>.<Probability>.<AandBValue>.Value
        ProbAandB.Status = XDoc.<BayesModel>.<Probability>.<AandBStatus>.Value
        ProbAandB.Rank = XDoc.<BayesModel>.<Probability>.<AandBRank>.Value
        ProbAandNotB.Value = XDoc.<BayesModel>.<Probability>.<AandNotBValue>.Value
        ProbAandNotB.Status = XDoc.<BayesModel>.<Probability>.<AandNotBStatus>.Value
        ProbAandNotB.Rank = XDoc.<BayesModel>.<Probability>.<AandNotBRank>.Value
        ProbNotAandB.Value = XDoc.<BayesModel>.<Probability>.<NotAandBValue>.Value
        ProbNotAandB.Status = XDoc.<BayesModel>.<Probability>.<NotAandBStatus>.Value
        ProbNotAandB.Rank = XDoc.<BayesModel>.<Probability>.<NotAandBRank>.Value
        ProbNotAandNotB.Value = XDoc.<BayesModel>.<Probability>.<NotAandNotBValue>.Value
        ProbNotAandNotB.Status = XDoc.<BayesModel>.<Probability>.<NotAandNotBStatus>.Value
        ProbNotAandNotB.Rank = XDoc.<BayesModel>.<Probability>.<NotAandNotBRank>.Value

        ProbA.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<AValue>.Value
        ProbA.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<AStatus>.Value
        ProbA.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<ARank>.Value
        ProbNotA.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAValue>.Value
        ProbNotA.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAStatus>.Value
        ProbNotA.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotARank>.Value
        ProbB.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<BValue>.Value
        ProbB.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<BStatus>.Value
        ProbB.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<BRank>.Value
        ProbNotB.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotBValue>.Value
        ProbNotB.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotBStatus>.Value
        ProbNotB.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotBRank>.Value
        ProbAandB.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<AandBValue>.Value
        ProbAandB.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<AandBStatus>.Value
        ProbAandB.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<AandBRank>.Value
        ProbAandNotB.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<AandNotBValue>.Value
        ProbAandNotB.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<AandNotBStatus>.Value
        ProbAandNotB.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<AandNotBRank>.Value
        ProbNotAandB.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAandBValue>.Value
        ProbNotAandB.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAandBStatus>.Value
        ProbNotAandB.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAandBRank>.Value
        ProbNotAandNotB.GivenA.Value = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAandNotBValue>.Value
        ProbNotAandNotB.GivenA.Status = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAandNotBStatus>.Value
        ProbNotAandNotB.GivenA.Rank = XDoc.<BayesModel>.<Probability>.<GivenA>.<NotAandNotBRank>.Value

        ProbA.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AValue>.Value
        ProbA.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AStatus>.Value
        ProbA.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<ARank>.Value
        ProbNotA.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAValue>.Value
        ProbNotA.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAStatus>.Value
        ProbNotA.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotARank>.Value
        ProbB.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<BValue>.Value
        ProbB.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<BStatus>.Value
        ProbB.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<BRank>.Value
        ProbNotB.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotBValue>.Value
        ProbNotB.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotBStatus>.Value
        ProbNotB.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotBRank>.Value
        ProbAandB.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AandBValue>.Value
        ProbAandB.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AandBStatus>.Value
        ProbAandB.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AandBRank>.Value
        ProbAandNotB.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AandNotBValue>.Value
        ProbAandNotB.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AandNotBStatus>.Value
        ProbAandNotB.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<AandNotBRank>.Value
        ProbNotAandB.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAandBValue>.Value
        ProbNotAandB.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAandBStatus>.Value
        ProbNotAandB.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAandBRank>.Value
        ProbNotAandNotB.GivenNotA.Value = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAandNotBValue>.Value
        ProbNotAandNotB.GivenNotA.Status = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAandNotBStatus>.Value
        ProbNotAandNotB.GivenNotA.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotA>.<NotAandNotBRank>.Value

        ProbA.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<AValue>.Value
        ProbA.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<AStatus>.Value
        ProbA.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<ARank>.Value
        ProbNotA.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAValue>.Value
        ProbNotA.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAStatus>.Value
        ProbNotA.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotARank>.Value
        ProbB.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<BValue>.Value
        ProbB.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<BStatus>.Value
        ProbB.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<BRank>.Value
        ProbNotB.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotBValue>.Value
        ProbNotB.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotBStatus>.Value
        ProbNotB.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotBRank>.Value
        ProbAandB.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<AandBValue>.Value
        ProbAandB.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<AandBStatus>.Value
        ProbAandB.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<AandBRank>.Value
        ProbAandNotB.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<AandNotBValue>.Value
        ProbAandNotB.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<AandNotBStatus>.Value
        ProbAandNotB.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<AandNotBRank>.Value
        ProbNotAandB.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAandBValue>.Value
        ProbNotAandB.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAandBStatus>.Value
        ProbNotAandB.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAandBRank>.Value
        ProbNotAandNotB.GivenB.Value = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAandNotBValue>.Value
        ProbNotAandNotB.GivenB.Status = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAandNotBStatus>.Value
        ProbNotAandNotB.GivenB.Rank = XDoc.<BayesModel>.<Probability>.<GivenB>.<NotAandNotBRank>.Value

        ProbA.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AValue>.Value
        ProbA.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AStatus>.Value
        ProbA.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<ARank>.Value
        ProbNotA.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAValue>.Value
        ProbNotA.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAStatus>.Value
        ProbNotA.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotARank>.Value
        ProbB.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<BValue>.Value
        ProbB.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<BStatus>.Value
        ProbB.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<BRank>.Value
        ProbNotB.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotBValue>.Value
        ProbNotB.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotBStatus>.Value
        ProbNotB.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotBRank>.Value
        ProbAandB.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AandBValue>.Value
        ProbAandB.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AandBStatus>.Value
        ProbAandB.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AandBRank>.Value
        ProbAandNotB.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AandNotBValue>.Value
        ProbAandNotB.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AandNotBStatus>.Value
        ProbAandNotB.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<AandNotBRank>.Value
        ProbNotAandB.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAandBValue>.Value
        ProbNotAandB.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAandBStatus>.Value
        ProbNotAandB.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAandBRank>.Value
        ProbNotAandNotB.GivenNotB.Value = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAandNotBValue>.Value
        ProbNotAandNotB.GivenNotB.Status = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAandNotBStatus>.Value
        ProbNotAandNotB.GivenNotB.Rank = XDoc.<BayesModel>.<Probability>.<GivenNotB>.<NotAandNotBRank>.Value

        SampsA.Value = XDoc.<BayesModel>.<SampleCount>.<AValue>.Value
        SampsA.Status = XDoc.<BayesModel>.<SampleCount>.<AStatus>.Value
        SampsA.Rank = XDoc.<BayesModel>.<SampleCount>.<ARank>.Value
        SampsNotA.Value = XDoc.<BayesModel>.<SampleCount>.<NotAValue>.Value
        SampsNotA.Status = XDoc.<BayesModel>.<SampleCount>.<NotAStatus>.Value
        SampsNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<NotARank>.Value
        SampsB.Value = XDoc.<BayesModel>.<SampleCount>.<BValue>.Value
        SampsB.Status = XDoc.<BayesModel>.<SampleCount>.<BStatus>.Value
        SampsB.Rank = XDoc.<BayesModel>.<SampleCount>.<BRank>.Value
        SampsNotB.Value = XDoc.<BayesModel>.<SampleCount>.<NotBValue>.Value
        SampsNotB.Status = XDoc.<BayesModel>.<SampleCount>.<NotBStatus>.Value
        SampsNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<NotBRank>.Value
        SampsAandB.Value = XDoc.<BayesModel>.<SampleCount>.<AandBValue>.Value
        SampsAandB.Status = XDoc.<BayesModel>.<SampleCount>.<AandBStatus>.Value
        SampsAandB.Rank = XDoc.<BayesModel>.<SampleCount>.<AandBRank>.Value
        SampsAandNotB.Value = XDoc.<BayesModel>.<SampleCount>.<AandNotBValue>.Value
        SampsAandNotB.Status = XDoc.<BayesModel>.<SampleCount>.<AandNotBStatus>.Value
        SampsAandNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<AandNotBRank>.Value
        SampsNotAandB.Value = XDoc.<BayesModel>.<SampleCount>.<NotAandBValue>.Value
        SampsNotAandB.Status = XDoc.<BayesModel>.<SampleCount>.<NotAandBStatus>.Value
        SampsNotAandB.Rank = XDoc.<BayesModel>.<SampleCount>.<NotAandBRank>.Value
        SampsNotAandNotB.Value = XDoc.<BayesModel>.<SampleCount>.<NotAandNotBValue>.Value
        SampsNotAandNotB.Status = XDoc.<BayesModel>.<SampleCount>.<NotAandNotBStatus>.Value
        SampsNotAandNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<NotAandNotBRank>.Value

        SampsA.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AValue>.Value
        SampsA.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AStatus>.Value
        SampsA.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<ARank>.Value
        SampsNotA.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAValue>.Value
        SampsNotA.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAStatus>.Value
        SampsNotA.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotARank>.Value
        SampsB.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<BValue>.Value
        SampsB.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<BStatus>.Value
        SampsB.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<BRank>.Value
        SampsNotB.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotBValue>.Value
        SampsNotB.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotBStatus>.Value
        SampsNotB.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotBRank>.Value
        SampsAandB.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AandBValue>.Value
        SampsAandB.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AandBStatus>.Value
        SampsAandB.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AandBRank>.Value
        SampsAandNotB.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AandNotBValue>.Value
        SampsAandNotB.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AandNotBStatus>.Value
        SampsAandNotB.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<AandNotBRank>.Value
        SampsNotAandB.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAandBValue>.Value
        SampsNotAandB.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAandBStatus>.Value
        SampsNotAandB.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAandBRank>.Value
        SampsNotAandNotB.GivenA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAandNotBValue>.Value
        SampsNotAandNotB.GivenA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAandNotBStatus>.Value
        SampsNotAandNotB.GivenA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenA>.<NotAandNotBRank>.Value

        SampsA.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AValue>.Value
        SampsA.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AStatus>.Value
        SampsA.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<ARank>.Value
        SampsNotA.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAValue>.Value
        SampsNotA.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAStatus>.Value
        SampsNotA.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotARank>.Value
        SampsB.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<BValue>.Value
        SampsB.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<BStatus>.Value
        SampsB.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<BRank>.Value
        SampsNotB.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotBValue>.Value
        SampsNotB.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotBStatus>.Value
        SampsNotB.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotBRank>.Value
        SampsAandB.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AandBValue>.Value
        SampsAandB.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AandBStatus>.Value
        SampsAandB.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AandBRank>.Value
        SampsAandNotB.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AandNotBValue>.Value
        SampsAandNotB.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AandNotBStatus>.Value
        SampsAandNotB.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<AandNotBRank>.Value
        SampsNotAandB.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAandBValue>.Value
        SampsNotAandB.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAandBStatus>.Value
        SampsNotAandB.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAandBRank>.Value
        SampsNotAandNotB.GivenNotA.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAandNotBValue>.Value
        SampsNotAandNotB.GivenNotA.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAandNotBStatus>.Value
        SampsNotAandNotB.GivenNotA.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotA>.<NotAandNotBRank>.Value

        SampsA.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AValue>.Value
        SampsA.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AStatus>.Value
        SampsA.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<ARank>.Value
        SampsNotA.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAValue>.Value
        SampsNotA.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAStatus>.Value
        SampsNotA.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotARank>.Value
        SampsB.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<BValue>.Value
        SampsB.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<BStatus>.Value
        SampsB.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<BRank>.Value
        SampsNotB.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotBValue>.Value
        SampsNotB.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotBStatus>.Value
        SampsNotB.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotBRank>.Value
        SampsAandB.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AandBValue>.Value
        SampsAandB.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AandBStatus>.Value
        SampsAandB.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AandBRank>.Value
        SampsAandNotB.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AandNotBValue>.Value
        SampsAandNotB.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AandNotBStatus>.Value
        SampsAandNotB.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<AandNotBRank>.Value
        SampsNotAandB.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAandBValue>.Value
        SampsNotAandB.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAandBStatus>.Value
        SampsNotAandB.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAandBRank>.Value
        SampsNotAandNotB.GivenB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAandNotBValue>.Value
        SampsNotAandNotB.GivenB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAandNotBStatus>.Value
        SampsNotAandNotB.GivenB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenB>.<NotAandNotBRank>.Value

        SampsA.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AValue>.Value
        SampsA.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AStatus>.Value
        SampsA.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<ARank>.Value
        SampsNotA.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAValue>.Value
        SampsNotA.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAStatus>.Value
        SampsNotA.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotARank>.Value
        SampsB.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<BValue>.Value
        SampsB.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<BStatus>.Value
        SampsB.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<BRank>.Value
        SampsNotB.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotBValue>.Value
        SampsNotB.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotBStatus>.Value
        SampsNotB.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotBRank>.Value
        SampsAandB.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AandBValue>.Value
        SampsAandB.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AandBStatus>.Value
        SampsAandB.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AandBRank>.Value
        SampsAandNotB.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AandNotBValue>.Value
        SampsAandNotB.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AandNotBStatus>.Value
        SampsAandNotB.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<AandNotBRank>.Value
        SampsNotAandB.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAandBValue>.Value
        SampsNotAandB.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAandBStatus>.Value
        SampsNotAandB.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAandBRank>.Value
        SampsNotAandNotB.GivenNotB.Value = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAandNotBValue>.Value
        SampsNotAandNotB.GivenNotB.Status = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAandNotBStatus>.Value
        SampsNotAandNotB.GivenNotB.Rank = XDoc.<BayesModel>.<SampleCount>.<GivenNotB>.<NotAandNotBRank>.Value

        Diagram.LineColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<LineColor>.Value)
        Diagram.LineThickness = XDoc.<BayesModel>.<Diagram>.<LineThickness>.Value
        If XDoc.<BayesModel>.<Diagram>.<BoldLineThickness>.Value <> Nothing Then Diagram.BoldLineThickness = XDoc.<BayesModel>.<Diagram>.<BoldLineThickness>.Value
        If XDoc.<BayesModel>.<Diagram>.<BoldLine>.Value <> Nothing Then Diagram.BoldLine = XDoc.<BayesModel>.<Diagram>.<BoldLine>.Value
        Diagram.FillColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<FillColor>.Value)
        Diagram.Height = XDoc.<BayesModel>.<Diagram>.<Height>.Value
        Diagram.Width = XDoc.<BayesModel>.<Diagram>.<Width>.Value

        EventA.LineColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<EventA>.<LineColor>.Value)
        EventA.FillColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<EventA>.<FillColor>.Value)
        EventA.Shape = XDoc.<BayesModel>.<Diagram>.<EventA>.<Shape>.Value
        EventA.LineThickness = XDoc.<BayesModel>.<Diagram>.<EventA>.<LineThickness>.Value
        If XDoc.<BayesModel>.<Diagram>.<EventA>.<BoldLineThickness>.Value <> Nothing Then EventA.BoldLineThickness = XDoc.<BayesModel>.<Diagram>.<EventA>.<BoldLineThickness>.Value
        If XDoc.<BayesModel>.<Diagram>.<EventA>.<BoldLine>.Value <> Nothing Then EventA.BoldLine = XDoc.<BayesModel>.<Diagram>.<EventA>.<BoldLine>.Value
        EventA.Unscaled.XMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<Unscaled>.<XMin>.Value
        EventA.Unscaled.XMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<Unscaled>.<XMax>.Value
        EventA.Unscaled.YMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<Unscaled>.<YMin>.Value
        EventA.Unscaled.YMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<Unscaled>.<YMax>.Value
        EventA.ScaleA.XMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleA>.<XMin>.Value
        EventA.ScaleA.XMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleA>.<XMax>.Value
        EventA.ScaleA.YMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleA>.<YMin>.Value
        EventA.ScaleA.YMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleA>.<YMax>.Value
        EventA.ScaleB.XMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleB>.<XMin>.Value
        EventA.ScaleB.XMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleB>.<XMax>.Value
        EventA.ScaleB.YMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleB>.<YMin>.Value
        EventA.ScaleB.YMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleB>.<YMax>.Value
        EventA.ScaleAB.XMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleAB>.<XMin>.Value
        EventA.ScaleAB.XMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleAB>.<XMax>.Value
        EventA.ScaleAB.YMin = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleAB>.<YMin>.Value
        EventA.ScaleAB.YMax = XDoc.<BayesModel>.<Diagram>.<EventA>.<ScaleAB>.<YMax>.Value

        EventB.LineColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<EventB>.<LineColor>.Value)
        EventB.FillColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<EventB>.<FillColor>.Value)
        EventB.Shape = XDoc.<BayesModel>.<Diagram>.<EventB>.<Shape>.Value
        EventB.LineThickness = XDoc.<BayesModel>.<Diagram>.<EventB>.<LineThickness>.Value
        If XDoc.<BayesModel>.<Diagram>.<EventB>.<BoldLineThickness>.Value <> Nothing Then EventB.BoldLineThickness = XDoc.<BayesModel>.<Diagram>.<EventB>.<BoldLineThickness>.Value
        If XDoc.<BayesModel>.<Diagram>.<EventB>.<BoldLine>.Value <> Nothing Then EventB.BoldLine = XDoc.<BayesModel>.<Diagram>.<EventB>.<BoldLine>.Value
        EventB.Unscaled.XMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<Unscaled>.<XMin>.Value
        EventB.Unscaled.XMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<Unscaled>.<XMax>.Value
        EventB.Unscaled.YMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<Unscaled>.<YMin>.Value
        EventB.Unscaled.YMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<Unscaled>.<YMax>.Value
        EventB.ScaleA.XMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleA>.<XMin>.Value
        EventB.ScaleA.XMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleA>.<XMax>.Value
        EventB.ScaleA.YMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleA>.<YMin>.Value
        EventB.ScaleA.YMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleA>.<YMax>.Value
        EventB.ScaleB.XMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleB>.<XMin>.Value
        EventB.ScaleB.XMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleB>.<XMax>.Value
        EventB.ScaleB.YMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleB>.<YMin>.Value
        EventB.ScaleB.YMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleB>.<YMax>.Value
        EventB.ScaleAB.XMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleAB>.<XMin>.Value
        EventB.ScaleAB.XMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleAB>.<XMax>.Value
        EventB.ScaleAB.YMin = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleAB>.<YMin>.Value
        EventB.ScaleAB.YMax = XDoc.<BayesModel>.<Diagram>.<EventB>.<ScaleAB>.<YMax>.Value

        EventAandBFillColor = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<EventAandBFillColor>.Value)

        HighlightRegion.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<HighLight>.<RegionColor>.Value)
        HighlightRegion.A = XDoc.<BayesModel>.<Diagram>.<HighLight>.<A>.Value
        HighlightRegion.NotA = XDoc.<BayesModel>.<Diagram>.<HighLight>.<NotA>.Value
        HighlightRegion.B = XDoc.<BayesModel>.<Diagram>.<HighLight>.<B>.Value
        HighlightRegion.NotB = XDoc.<BayesModel>.<Diagram>.<HighLight>.<NotB>.Value
        HighlightRegion.AandB = XDoc.<BayesModel>.<Diagram>.<HighLight>.<AandB>.Value
        HighlightRegion.AandNotB = XDoc.<BayesModel>.<Diagram>.<HighLight>.<AandNotB>.Value
        HighlightRegion.NotAandB = XDoc.<BayesModel>.<Diagram>.<HighLight>.<NotAandB>.Value
        HighlightRegion.NotAandNotB = XDoc.<BayesModel>.<Diagram>.<HighLight>.<NotAandNotB>.Value

        ZeroProbRegion.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<RegionColor>.Value)
        ZeroProbRegion.A = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<A>.Value
        ZeroProbRegion.NotA = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<NotA>.Value
        ZeroProbRegion.B = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<B>.Value
        ZeroProbRegion.NotB = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<NotB>.Value
        ZeroProbRegion.AandB = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<AandB>.Value
        ZeroProbRegion.AandNotB = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<AandNotB>.Value
        ZeroProbRegion.NotAandB = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<NotAandB>.Value
        ZeroProbRegion.NotAandNotB = XDoc.<BayesModel>.<Diagram>.<ZeroProbability>.<NotAandNotB>.Value

        AnnotTitle.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Text>.Value
        Dim myFontStyle As FontStyle
        Dim myFontSize As Single
        Dim myFontName As String
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        AnnotTitle.Font = New Font(myFontName, myFontSize, myFontStyle)
        AnnotTitle.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Color>.Value)
        AnnotTitle.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<MidX>.Value
        AnnotTitle.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Y>.Value
        AnnotTitle.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<MidX>.Value
        AnnotTitle.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Y>.Value
        AnnotTitle.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<MidX>.Value
        AnnotTitle.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Y>.Value
        AnnotTitle.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<MidX>.Value
        AnnotTitle.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Title>.<Y>.Value

        AnnotDescr.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Text>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        AnnotDescr.Font = New Font(myFontName, myFontSize, myFontStyle)
        AnnotDescr.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Color>.Value)
        AnnotDescr.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<MidX>.Value
        AnnotDescr.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Y>.Value
        AnnotDescr.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<MidX>.Value
        AnnotDescr.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Y>.Value
        AnnotDescr.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<MidX>.Value
        AnnotDescr.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Y>.Value
        AnnotDescr.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<MidX>.Value
        AnnotDescr.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Description>.<Y>.Value


        AnnotEventA.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Text>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        AnnotEventA.Font = New Font(myFontName, myFontSize, myFontStyle)
        AnnotEventA.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Color>.Value)
        AnnotEventA.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Unscaled>.<MidX>.Value
        AnnotEventA.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<Unscaled>.<Y>.Value
        AnnotEventA.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<ScaleA>.<MidX>.Value
        AnnotEventA.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<ScaleA>.<Y>.Value
        AnnotEventA.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<ScaleB>.<MidX>.Value
        AnnotEventA.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<ScaleB>.<Y>.Value
        AnnotEventA.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<ScaleAB>.<MidX>.Value
        AnnotEventA.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventA>.<ScaleAB>.<Y>.Value

        AnnotEventB.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Text>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        AnnotEventB.Font = New Font(myFontName, myFontSize, myFontStyle)
        AnnotEventB.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Color>.Value)
        AnnotEventB.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Unscaled>.<MidX>.Value
        AnnotEventB.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<Unscaled>.<Y>.Value
        AnnotEventB.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<ScaleA>.<MidX>.Value
        AnnotEventB.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<ScaleA>.<Y>.Value
        AnnotEventB.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<ScaleB>.<MidX>.Value
        AnnotEventB.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<ScaleB>.<Y>.Value
        AnnotEventB.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<ScaleAB>.<MidX>.Value
        AnnotEventB.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<EventB>.<ScaleAB>.<Y>.Value

        ProbA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Text>.Value
        ProbA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Color>.Value)
        ProbA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Show>.Value
        ProbA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Unscaled>.<MidX>.Value
        ProbA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<Unscaled>.<Y>.Value
        ProbA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<ScaleA>.<MidX>.Value
        ProbA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<ScaleA>.<Y>.Value
        ProbA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<ScaleB>.<MidX>.Value
        ProbA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<ScaleB>.<Y>.Value
        ProbA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<ScaleAB>.<MidX>.Value
        ProbA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<ScaleAB>.<Y>.Value

        ProbA.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<Text>.Value
        ProbA.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbA.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbA.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<Color>.Value)
        ProbA.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<Show>.Value
        ProbA.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<Unscaled>.<MidX>.Value
        ProbA.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<Unscaled>.<Y>.Value
        ProbA.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<ScaleA>.<MidX>.Value
        ProbA.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<ScaleA>.<Y>.Value
        ProbA.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<ScaleB>.<MidX>.Value
        ProbA.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<ScaleB>.<Y>.Value
        ProbA.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<ScaleAB>.<MidX>.Value
        ProbA.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenA>.<ScaleAB>.<Y>.Value

        ProbA.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<Text>.Value
        ProbA.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbA.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbA.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<Color>.Value)
        ProbA.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<Show>.Value
        ProbA.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<Unscaled>.<MidX>.Value
        ProbA.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<Unscaled>.<Y>.Value
        ProbA.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<ScaleA>.<MidX>.Value
        ProbA.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<ScaleA>.<Y>.Value
        ProbA.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<ScaleB>.<MidX>.Value
        ProbA.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<ScaleB>.<Y>.Value
        ProbA.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        ProbA.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotA>.<ScaleAB>.<Y>.Value

        ProbA.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Text>.Value
        ProbA.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbA.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbA.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Color>.Value)
        ProbA.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Show>.Value
        ProbA.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Unscaled>.<MidX>.Value
        ProbA.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Unscaled>.<Y>.Value
        ProbA.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<ScaleA>.<MidX>.Value
        ProbA.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<ScaleA>.<Y>.Value
        ProbA.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<ScaleB>.<MidX>.Value
        ProbA.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<ScaleB>.<Y>.Value
        ProbA.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<ScaleAB>.<MidX>.Value
        ProbA.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<ScaleAB>.<Y>.Value

        ProbA.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Text>.Value
        ProbA.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbA.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbA.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotB>.<Color>.Value)
        ProbA.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotB>.<Show>.Value
        ProbA.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotB>.<Unscaled>.<MidX>.Value
        ProbA.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotB>.<Unscaled>.<Y>.Value
        ProbA.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotB>.<ScaleA>.<MidX>.Value
        ProbA.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotB>.<ScaleA>.<Y>.Value
        ProbA.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotB>.<ScaleB>.<MidX>.Value
        ProbA.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotB>.<ScaleB>.<Y>.Value
        ProbA.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        ProbA.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<A>.<GivenNotB>.<ScaleAB>.<Y>.Value


        ProbNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Text>.Value
        ProbNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Color>.Value)
        ProbNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Show>.Value
        ProbNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Unscaled>.<MidX>.Value
        ProbNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<Unscaled>.<Y>.Value
        ProbNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<ScaleA>.<MidX>.Value
        ProbNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<ScaleA>.<Y>.Value
        ProbNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<ScaleB>.<MidX>.Value
        ProbNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<ScaleB>.<Y>.Value
        ProbNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<ScaleAB>.<MidX>.Value
        ProbNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<ScaleAB>.<Y>.Value

        ProbNotA.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<Text>.Value
        ProbNotA.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotA.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotA.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<Color>.Value)
        ProbNotA.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<Show>.Value
        ProbNotA.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<Unscaled>.<MidX>.Value
        ProbNotA.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<Unscaled>.<Y>.Value
        ProbNotA.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<ScaleA>.<MidX>.Value
        ProbNotA.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<ScaleA>.<Y>.Value
        ProbNotA.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<ScaleB>.<MidX>.Value
        ProbNotA.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<ScaleB>.<Y>.Value
        ProbNotA.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<ScaleAB>.<MidX>.Value
        ProbNotA.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenA>.<ScaleAB>.<Y>.Value

        ProbNotA.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<Text>.Value
        ProbNotA.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotA.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotA.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<Color>.Value)
        ProbNotA.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<Show>.Value
        ProbNotA.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<Unscaled>.<MidX>.Value
        ProbNotA.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<Unscaled>.<Y>.Value
        ProbNotA.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<ScaleA>.<MidX>.Value
        ProbNotA.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<ScaleA>.<Y>.Value
        ProbNotA.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<ScaleB>.<MidX>.Value
        ProbNotA.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<ScaleB>.<Y>.Value
        ProbNotA.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        ProbNotA.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotA>.<ScaleAB>.<Y>.Value

        ProbNotA.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Text>.Value
        ProbNotA.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotA.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotA.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Color>.Value)
        ProbNotA.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Show>.Value
        ProbNotA.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Unscaled>.<MidX>.Value
        ProbNotA.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Unscaled>.<Y>.Value
        ProbNotA.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<ScaleA>.<MidX>.Value
        ProbNotA.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<ScaleA>.<Y>.Value
        ProbNotA.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<ScaleB>.<MidX>.Value
        ProbNotA.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<ScaleB>.<Y>.Value
        ProbNotA.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<ScaleAB>.<MidX>.Value
        ProbNotA.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<ScaleAB>.<Y>.Value

        ProbNotA.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Text>.Value
        ProbNotA.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotA.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotA.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotB>.<Color>.Value)
        ProbNotA.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotB>.<Show>.Value
        ProbNotA.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotB>.<Unscaled>.<MidX>.Value
        ProbNotA.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotB>.<Unscaled>.<Y>.Value
        ProbNotA.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotB>.<ScaleA>.<MidX>.Value
        ProbNotA.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotB>.<ScaleA>.<Y>.Value
        ProbNotA.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotB>.<ScaleB>.<MidX>.Value
        ProbNotA.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotB>.<ScaleB>.<Y>.Value
        ProbNotA.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        ProbNotA.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotA>.<GivenNotB>.<ScaleAB>.<Y>.Value



        ProbB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Text>.Value
        ProbB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Color>.Value)
        ProbB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Show>.Value
        ProbB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Unscaled>.<MidX>.Value
        ProbB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<Unscaled>.<Y>.Value
        ProbB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<ScaleA>.<MidX>.Value
        ProbB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<ScaleA>.<Y>.Value
        ProbB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<ScaleB>.<MidX>.Value
        ProbB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<ScaleB>.<Y>.Value
        ProbB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<ScaleAB>.<MidX>.Value
        ProbB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<ScaleAB>.<Y>.Value

        ProbB.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<Text>.Value
        ProbB.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbB.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbB.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<Color>.Value)
        ProbB.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<Show>.Value
        ProbB.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<Unscaled>.<MidX>.Value
        ProbB.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<Unscaled>.<Y>.Value
        ProbB.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<ScaleA>.<MidX>.Value
        ProbB.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<ScaleA>.<Y>.Value
        ProbB.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<ScaleB>.<MidX>.Value
        ProbB.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<ScaleB>.<Y>.Value
        ProbB.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<ScaleAB>.<MidX>.Value
        ProbB.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenA>.<ScaleAB>.<Y>.Value

        ProbB.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<Text>.Value
        ProbB.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbB.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbB.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<Color>.Value)
        ProbB.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<Show>.Value
        ProbB.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<Unscaled>.<MidX>.Value
        ProbB.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<Unscaled>.<Y>.Value
        ProbB.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<ScaleA>.<MidX>.Value
        ProbB.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<ScaleA>.<Y>.Value
        ProbB.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<ScaleB>.<MidX>.Value
        ProbB.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<ScaleB>.<Y>.Value
        ProbB.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        ProbB.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotA>.<ScaleAB>.<Y>.Value

        ProbB.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Text>.Value
        ProbB.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbB.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbB.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Color>.Value)
        ProbB.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Show>.Value
        ProbB.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Unscaled>.<MidX>.Value
        ProbB.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Unscaled>.<Y>.Value
        ProbB.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<ScaleA>.<MidX>.Value
        ProbB.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<ScaleA>.<Y>.Value
        ProbB.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<ScaleB>.<MidX>.Value
        ProbB.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<ScaleB>.<Y>.Value
        ProbB.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<ScaleAB>.<MidX>.Value
        ProbB.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<ScaleAB>.<Y>.Value

        ProbB.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Text>.Value
        ProbB.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbB.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbB.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotB>.<Color>.Value)
        ProbB.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotB>.<Show>.Value
        ProbB.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotB>.<Unscaled>.<MidX>.Value
        ProbB.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotB>.<Unscaled>.<Y>.Value
        ProbB.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotB>.<ScaleA>.<MidX>.Value
        ProbB.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotB>.<ScaleA>.<Y>.Value
        ProbB.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotB>.<ScaleB>.<MidX>.Value
        ProbB.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotB>.<ScaleB>.<Y>.Value
        ProbB.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        ProbB.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<B>.<GivenNotB>.<ScaleAB>.<Y>.Value



        ProbNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Text>.Value
        ProbNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Color>.Value)
        ProbNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Show>.Value
        ProbNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Unscaled>.<MidX>.Value
        ProbNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<Unscaled>.<Y>.Value
        ProbNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<ScaleA>.<MidX>.Value
        ProbNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<ScaleA>.<Y>.Value
        ProbNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<ScaleB>.<MidX>.Value
        ProbNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<ScaleB>.<Y>.Value
        ProbNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<ScaleAB>.<MidX>.Value
        ProbNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<ScaleAB>.<Y>.Value

        ProbNotB.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<Text>.Value
        ProbNotB.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotB.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotB.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<Color>.Value)
        ProbNotB.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<Show>.Value
        ProbNotB.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<Unscaled>.<MidX>.Value
        ProbNotB.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<Unscaled>.<Y>.Value
        ProbNotB.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<ScaleA>.<MidX>.Value
        ProbNotB.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<ScaleA>.<Y>.Value
        ProbNotB.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<ScaleB>.<MidX>.Value
        ProbNotB.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<ScaleB>.<Y>.Value
        ProbNotB.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<ScaleAB>.<MidX>.Value
        ProbNotB.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenA>.<ScaleAB>.<Y>.Value

        ProbNotB.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<Text>.Value
        ProbNotB.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotB.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotB.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<Color>.Value)
        ProbNotB.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<Show>.Value
        ProbNotB.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<Unscaled>.<MidX>.Value
        ProbNotB.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<Unscaled>.<Y>.Value
        ProbNotB.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<ScaleA>.<MidX>.Value
        ProbNotB.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<ScaleA>.<Y>.Value
        ProbNotB.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<ScaleB>.<MidX>.Value
        ProbNotB.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<ScaleB>.<Y>.Value
        ProbNotB.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        ProbNotB.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotA>.<ScaleAB>.<Y>.Value

        ProbNotB.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Text>.Value
        ProbNotB.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotB.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotB.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Color>.Value)
        ProbNotB.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Show>.Value
        ProbNotB.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Unscaled>.<MidX>.Value
        ProbNotB.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Unscaled>.<Y>.Value
        ProbNotB.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<ScaleA>.<MidX>.Value
        ProbNotB.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<ScaleA>.<Y>.Value
        ProbNotB.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<ScaleB>.<MidX>.Value
        ProbNotB.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<ScaleB>.<Y>.Value
        ProbNotB.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<ScaleAB>.<MidX>.Value
        ProbNotB.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<ScaleAB>.<Y>.Value

        ProbNotB.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Text>.Value
        ProbNotB.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotB.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotB.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotB>.<Color>.Value)
        ProbNotB.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotB>.<Show>.Value
        ProbNotB.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotB>.<Unscaled>.<MidX>.Value
        ProbNotB.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotB>.<Unscaled>.<Y>.Value
        ProbNotB.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotB>.<ScaleA>.<MidX>.Value
        ProbNotB.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotB>.<ScaleA>.<Y>.Value
        ProbNotB.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotB>.<ScaleB>.<MidX>.Value
        ProbNotB.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotB>.<ScaleB>.<Y>.Value
        ProbNotB.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        ProbNotB.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotB>.<GivenNotB>.<ScaleAB>.<Y>.Value


        ProbAandB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Text>.Value
        ProbAandB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbAandB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbAandB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Color>.Value)
        ProbAandB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Show>.Value
        ProbAandB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Unscaled>.<MidX>.Value
        ProbAandB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<Unscaled>.<Y>.Value
        ProbAandB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<ScaleA>.<MidX>.Value
        ProbAandB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<ScaleA>.<Y>.Value
        ProbAandB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<ScaleB>.<MidX>.Value
        ProbAandB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<ScaleB>.<Y>.Value
        ProbAandB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<ScaleAB>.<MidX>.Value
        ProbAandB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<ScaleAB>.<Y>.Value

        ProbAandB.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<Text>.Value
        ProbAandB.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbAandB.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbAandB.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<Color>.Value)
        ProbAandB.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<Show>.Value
        ProbAandB.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<Unscaled>.<MidX>.Value
        ProbAandB.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<Unscaled>.<Y>.Value
        ProbAandB.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<ScaleA>.<MidX>.Value
        ProbAandB.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<ScaleA>.<Y>.Value
        ProbAandB.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<ScaleB>.<MidX>.Value
        ProbAandB.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<ScaleB>.<Y>.Value
        ProbAandB.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<ScaleAB>.<MidX>.Value
        ProbAandB.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenA>.<ScaleAB>.<Y>.Value

        ProbAandB.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<Text>.Value
        ProbAandB.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbAandB.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbAandB.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<Color>.Value)
        ProbAandB.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<Show>.Value
        ProbAandB.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<Unscaled>.<MidX>.Value
        ProbAandB.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<Unscaled>.<Y>.Value
        ProbAandB.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<ScaleA>.<MidX>.Value
        ProbAandB.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<ScaleA>.<Y>.Value
        ProbAandB.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<ScaleB>.<MidX>.Value
        ProbAandB.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<ScaleB>.<Y>.Value
        ProbAandB.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        ProbAandB.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotA>.<ScaleAB>.<Y>.Value

        ProbAandB.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Text>.Value
        ProbAandB.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbAandB.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbAandB.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Color>.Value)
        ProbAandB.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Show>.Value
        ProbAandB.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Unscaled>.<MidX>.Value
        ProbAandB.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Unscaled>.<Y>.Value
        ProbAandB.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<ScaleA>.<MidX>.Value
        ProbAandB.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<ScaleA>.<Y>.Value
        ProbAandB.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<ScaleB>.<MidX>.Value
        ProbAandB.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<ScaleB>.<Y>.Value
        ProbAandB.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<ScaleAB>.<MidX>.Value
        ProbAandB.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<ScaleAB>.<Y>.Value

        ProbAandB.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Text>.Value
        ProbAandB.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbAandB.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbAandB.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotB>.<Color>.Value)
        ProbAandB.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotB>.<Show>.Value
        ProbAandB.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotB>.<Unscaled>.<MidX>.Value
        ProbAandB.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotB>.<Unscaled>.<Y>.Value
        ProbAandB.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotB>.<ScaleA>.<MidX>.Value
        ProbAandB.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotB>.<ScaleA>.<Y>.Value
        ProbAandB.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotB>.<ScaleB>.<MidX>.Value
        ProbAandB.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotB>.<ScaleB>.<Y>.Value
        ProbAandB.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        ProbAandB.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandB>.<GivenNotB>.<ScaleAB>.<Y>.Value


        ProbAandNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Text>.Value
        ProbAandNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbAandNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbAandNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Color>.Value)
        ProbAandNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Show>.Value
        ProbAandNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Unscaled>.<MidX>.Value
        ProbAandNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<Unscaled>.<Y>.Value
        ProbAandNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<ScaleA>.<MidX>.Value
        ProbAandNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<ScaleA>.<Y>.Value
        ProbAandNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<ScaleB>.<MidX>.Value
        ProbAandNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<ScaleB>.<Y>.Value
        ProbAandNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<ScaleAB>.<MidX>.Value
        ProbAandNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<ScaleAB>.<Y>.Value

        ProbAandNotB.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<Text>.Value
        ProbAandNotB.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbAandNotB.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbAandNotB.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<Color>.Value)
        ProbAandNotB.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<Show>.Value
        ProbAandNotB.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<Unscaled>.<MidX>.Value
        ProbAandNotB.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<Unscaled>.<Y>.Value
        ProbAandNotB.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<ScaleA>.<MidX>.Value
        ProbAandNotB.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<ScaleA>.<Y>.Value
        ProbAandNotB.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<ScaleB>.<MidX>.Value
        ProbAandNotB.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<ScaleB>.<Y>.Value
        ProbAandNotB.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<ScaleAB>.<MidX>.Value
        ProbAandNotB.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenA>.<ScaleAB>.<Y>.Value

        ProbAandNotB.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<Text>.Value
        ProbAandNotB.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbAandNotB.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbAandNotB.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<Color>.Value)
        ProbAandNotB.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<Show>.Value
        ProbAandNotB.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<Unscaled>.<MidX>.Value
        ProbAandNotB.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<Unscaled>.<Y>.Value
        ProbAandNotB.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<ScaleA>.<MidX>.Value
        ProbAandNotB.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<ScaleA>.<Y>.Value
        ProbAandNotB.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<ScaleB>.<MidX>.Value
        ProbAandNotB.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<ScaleB>.<Y>.Value
        ProbAandNotB.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        ProbAandNotB.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotA>.<ScaleAB>.<Y>.Value

        ProbAandNotB.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Text>.Value
        ProbAandNotB.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbAandNotB.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbAandNotB.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Color>.Value)
        ProbAandNotB.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Show>.Value
        ProbAandNotB.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Unscaled>.<MidX>.Value
        ProbAandNotB.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Unscaled>.<Y>.Value
        ProbAandNotB.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<ScaleA>.<MidX>.Value
        ProbAandNotB.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<ScaleA>.<Y>.Value
        ProbAandNotB.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<ScaleB>.<MidX>.Value
        ProbAandNotB.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<ScaleB>.<Y>.Value
        ProbAandNotB.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<ScaleAB>.<MidX>.Value
        ProbAandNotB.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<ScaleAB>.<Y>.Value

        ProbAandNotB.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Text>.Value
        ProbAandNotB.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbAandNotB.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbAandNotB.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotB>.<Color>.Value)
        ProbAandNotB.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotB>.<Show>.Value
        ProbAandNotB.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotB>.<Unscaled>.<MidX>.Value
        ProbAandNotB.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotB>.<Unscaled>.<Y>.Value
        ProbAandNotB.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotB>.<ScaleA>.<MidX>.Value
        ProbAandNotB.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotB>.<ScaleA>.<Y>.Value
        ProbAandNotB.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotB>.<ScaleB>.<MidX>.Value
        ProbAandNotB.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotB>.<ScaleB>.<Y>.Value
        ProbAandNotB.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        ProbAandNotB.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<AandNotB>.<GivenNotB>.<ScaleAB>.<Y>.Value


        ProbNotAandB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Text>.Value
        ProbNotAandB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotAandB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotAandB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Color>.Value)
        ProbNotAandB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Show>.Value
        ProbNotAandB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Unscaled>.<MidX>.Value
        ProbNotAandB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<Unscaled>.<Y>.Value
        ProbNotAandB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<ScaleA>.<MidX>.Value
        ProbNotAandB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<ScaleA>.<Y>.Value
        ProbNotAandB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<ScaleB>.<MidX>.Value
        ProbNotAandB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<ScaleB>.<Y>.Value
        ProbNotAandB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<ScaleAB>.<MidX>.Value
        ProbNotAandB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<ScaleAB>.<Y>.Value

        ProbNotAandB.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<Text>.Value
        ProbNotAandB.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotAandB.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotAandB.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<Color>.Value)
        ProbNotAandB.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<Show>.Value
        ProbNotAandB.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<Unscaled>.<MidX>.Value
        ProbNotAandB.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<Unscaled>.<Y>.Value
        ProbNotAandB.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<ScaleA>.<MidX>.Value
        ProbNotAandB.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<ScaleA>.<Y>.Value
        ProbNotAandB.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<ScaleB>.<MidX>.Value
        ProbNotAandB.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<ScaleB>.<Y>.Value
        ProbNotAandB.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<ScaleAB>.<MidX>.Value
        ProbNotAandB.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenA>.<ScaleAB>.<Y>.Value

        ProbNotAandB.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<Text>.Value
        ProbNotAandB.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotAandB.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotAandB.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<Color>.Value)
        ProbNotAandB.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<Show>.Value
        ProbNotAandB.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<Unscaled>.<MidX>.Value
        ProbNotAandB.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<Unscaled>.<Y>.Value
        ProbNotAandB.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<ScaleA>.<MidX>.Value
        ProbNotAandB.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<ScaleA>.<Y>.Value
        ProbNotAandB.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<ScaleB>.<MidX>.Value
        ProbNotAandB.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<ScaleB>.<Y>.Value
        ProbNotAandB.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        ProbNotAandB.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotA>.<ScaleAB>.<Y>.Value

        ProbNotAandB.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Text>.Value
        ProbNotAandB.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotAandB.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotAandB.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Color>.Value)
        ProbNotAandB.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Show>.Value
        ProbNotAandB.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Unscaled>.<MidX>.Value
        ProbNotAandB.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Unscaled>.<Y>.Value
        ProbNotAandB.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<ScaleA>.<MidX>.Value
        ProbNotAandB.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<ScaleA>.<Y>.Value
        ProbNotAandB.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<ScaleB>.<MidX>.Value
        ProbNotAandB.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<ScaleB>.<Y>.Value
        ProbNotAandB.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<ScaleAB>.<MidX>.Value
        ProbNotAandB.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<ScaleAB>.<Y>.Value

        ProbNotAandB.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Text>.Value
        ProbNotAandB.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotAandB.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotAandB.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotB>.<Color>.Value)
        ProbNotAandB.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotB>.<Show>.Value
        ProbNotAandB.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotB>.<Unscaled>.<MidX>.Value
        ProbNotAandB.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotB>.<Unscaled>.<Y>.Value
        ProbNotAandB.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotB>.<ScaleA>.<MidX>.Value
        ProbNotAandB.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotB>.<ScaleA>.<Y>.Value
        ProbNotAandB.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotB>.<ScaleB>.<MidX>.Value
        ProbNotAandB.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotB>.<ScaleB>.<Y>.Value
        ProbNotAandB.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        ProbNotAandB.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandB>.<GivenNotB>.<ScaleAB>.<Y>.Value


        ProbNotAandNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Text>.Value
        ProbNotAandNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotAandNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotAandNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Color>.Value)
        ProbNotAandNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Show>.Value
        ProbNotAandNotB.Label.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Unscaled>.<X>.Value
        ProbNotAandNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<Unscaled>.<Y>.Value
        ProbNotAandNotB.Label.ScaleA.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<ScaleA>.<X>.Value
        ProbNotAandNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<ScaleA>.<Y>.Value
        ProbNotAandNotB.Label.ScaleB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<ScaleB>.<X>.Value
        ProbNotAandNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<ScaleB>.<Y>.Value
        ProbNotAandNotB.Label.ScaleAB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<ScaleAB>.<X>.Value
        ProbNotAandNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<ScaleAB>.<Y>.Value

        ProbNotAandNotB.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<Text>.Value
        ProbNotAandNotB.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotAandNotB.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotAandNotB.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<Color>.Value)
        ProbNotAandNotB.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<Show>.Value
        ProbNotAandNotB.GivenA.Label.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<Unscaled>.<X>.Value
        ProbNotAandNotB.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<Unscaled>.<Y>.Value
        ProbNotAandNotB.GivenA.Label.ScaleA.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<ScaleA>.<X>.Value
        ProbNotAandNotB.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<ScaleA>.<Y>.Value
        ProbNotAandNotB.GivenA.Label.ScaleB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<ScaleB>.<X>.Value
        ProbNotAandNotB.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<ScaleB>.<Y>.Value
        ProbNotAandNotB.GivenA.Label.ScaleAB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<ScaleAB>.<X>.Value
        ProbNotAandNotB.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenA>.<ScaleAB>.<Y>.Value

        ProbNotAandNotB.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<Text>.Value
        ProbNotAandNotB.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotAandNotB.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotAandNotB.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<Color>.Value)
        ProbNotAandNotB.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<Show>.Value
        ProbNotAandNotB.GivenNotA.Label.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<Unscaled>.<X>.Value
        ProbNotAandNotB.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<Unscaled>.<Y>.Value
        ProbNotAandNotB.GivenNotA.Label.ScaleA.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<ScaleA>.<X>.Value
        ProbNotAandNotB.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<ScaleA>.<Y>.Value
        ProbNotAandNotB.GivenNotA.Label.ScaleB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<ScaleB>.<X>.Value
        ProbNotAandNotB.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<ScaleB>.<Y>.Value
        ProbNotAandNotB.GivenNotA.Label.ScaleAB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<ScaleAB>.<X>.Value
        ProbNotAandNotB.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotA>.<ScaleAB>.<Y>.Value

        ProbNotAandNotB.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Text>.Value
        ProbNotAandNotB.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotAandNotB.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotAandNotB.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Color>.Value)
        ProbNotAandNotB.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Show>.Value
        ProbNotAandNotB.GivenB.Label.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Unscaled>.<X>.Value
        ProbNotAandNotB.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Unscaled>.<Y>.Value
        ProbNotAandNotB.GivenB.Label.ScaleA.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<ScaleA>.<X>.Value
        ProbNotAandNotB.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<ScaleA>.<Y>.Value
        ProbNotAandNotB.GivenB.Label.ScaleB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<ScaleB>.<X>.Value
        ProbNotAandNotB.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<ScaleB>.<Y>.Value
        ProbNotAandNotB.GivenB.Label.ScaleAB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<ScaleAB>.<X>.Value
        ProbNotAandNotB.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<ScaleAB>.<Y>.Value

        ProbNotAandNotB.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Text>.Value
        ProbNotAandNotB.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        ProbNotAandNotB.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        ProbNotAandNotB.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotB>.<Color>.Value)
        ProbNotAandNotB.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotB>.<Show>.Value
        ProbNotAandNotB.GivenNotB.Label.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotB>.<Unscaled>.<X>.Value
        ProbNotAandNotB.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotB>.<Unscaled>.<Y>.Value
        ProbNotAandNotB.GivenNotB.Label.ScaleA.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotB>.<ScaleA>.<X>.Value
        ProbNotAandNotB.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotB>.<ScaleA>.<Y>.Value
        ProbNotAandNotB.GivenNotB.Label.ScaleB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotB>.<ScaleB>.<X>.Value
        ProbNotAandNotB.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotB>.<ScaleB>.<Y>.Value
        ProbNotAandNotB.GivenNotB.Label.ScaleAB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotB>.<ScaleAB>.<X>.Value
        ProbNotAandNotB.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Probability>.<NotAandNotB>.<GivenNotB>.<ScaleAB>.<Y>.Value


        SampsA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Text>.Value
        SampsA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Color>.Value)
        SampsA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Show>.Value
        SampsA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Unscaled>.<MidX>.Value
        SampsA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<Unscaled>.<Y>.Value
        SampsA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<ScaleA>.<MidX>.Value
        SampsA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<ScaleA>.<Y>.Value
        SampsA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<ScaleB>.<MidX>.Value
        SampsA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<ScaleB>.<Y>.Value
        SampsA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<ScaleAB>.<MidX>.Value
        SampsA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<ScaleAB>.<Y>.Value

        SampsA.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<Text>.Value
        SampsA.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsA.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsA.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<Color>.Value)
        SampsA.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<Show>.Value
        SampsA.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<Unscaled>.<MidX>.Value
        SampsA.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<Unscaled>.<Y>.Value
        SampsA.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<ScaleA>.<MidX>.Value
        SampsA.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<ScaleA>.<Y>.Value
        SampsA.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<ScaleB>.<MidX>.Value
        SampsA.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<ScaleB>.<Y>.Value
        SampsA.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<ScaleAB>.<MidX>.Value
        SampsA.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenA>.<ScaleAB>.<Y>.Value

        SampsA.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<Text>.Value
        SampsA.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsA.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsA.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<Color>.Value)
        SampsA.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<Show>.Value
        SampsA.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<Unscaled>.<MidX>.Value
        SampsA.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<Unscaled>.<Y>.Value
        SampsA.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<ScaleA>.<MidX>.Value
        SampsA.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<ScaleA>.<Y>.Value
        SampsA.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<ScaleB>.<MidX>.Value
        SampsA.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<ScaleB>.<Y>.Value
        SampsA.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        SampsA.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotA>.<ScaleAB>.<Y>.Value

        SampsA.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<Text>.Value
        SampsA.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsA.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsA.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<Color>.Value)
        SampsA.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<Show>.Value
        SampsA.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<Unscaled>.<MidX>.Value
        SampsA.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<Unscaled>.<Y>.Value
        SampsA.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<ScaleA>.<MidX>.Value
        SampsA.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<ScaleA>.<Y>.Value
        SampsA.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<ScaleB>.<MidX>.Value
        SampsA.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<ScaleB>.<Y>.Value
        SampsA.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<ScaleAB>.<MidX>.Value
        SampsA.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenB>.<ScaleAB>.<Y>.Value

        SampsA.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<Text>.Value
        SampsA.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsA.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsA.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<Color>.Value)
        SampsA.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<Show>.Value
        SampsA.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<Unscaled>.<MidX>.Value
        SampsA.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<Unscaled>.<Y>.Value
        SampsA.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<ScaleA>.<MidX>.Value
        SampsA.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<ScaleA>.<Y>.Value
        SampsA.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<ScaleB>.<MidX>.Value
        SampsA.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<ScaleB>.<Y>.Value
        SampsA.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        SampsA.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<A>.<GivenNotB>.<ScaleAB>.<Y>.Value


        SampsNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Text>.Value
        SampsNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Color>.Value)
        SampsNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Show>.Value
        SampsNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Unscaled>.<MidX>.Value
        SampsNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<Unscaled>.<Y>.Value
        SampsNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<ScaleA>.<MidX>.Value
        SampsNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<ScaleA>.<Y>.Value
        SampsNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<ScaleB>.<MidX>.Value
        SampsNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<ScaleB>.<Y>.Value
        SampsNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<ScaleAB>.<MidX>.Value
        SampsNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<ScaleAB>.<Y>.Value

        SampsNotA.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<Text>.Value
        SampsNotA.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotA.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotA.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<Color>.Value)
        SampsNotA.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<Show>.Value
        SampsNotA.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<Unscaled>.<MidX>.Value
        SampsNotA.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<Unscaled>.<Y>.Value
        SampsNotA.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<ScaleA>.<MidX>.Value
        SampsNotA.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<ScaleA>.<Y>.Value
        SampsNotA.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<ScaleB>.<MidX>.Value
        SampsNotA.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<ScaleB>.<Y>.Value
        SampsNotA.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<ScaleAB>.<MidX>.Value
        SampsNotA.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenA>.<ScaleAB>.<Y>.Value

        SampsNotA.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<Text>.Value
        SampsNotA.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotA.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotA.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<Color>.Value)
        SampsNotA.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<Show>.Value
        SampsNotA.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<Unscaled>.<MidX>.Value
        SampsNotA.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<Unscaled>.<Y>.Value
        SampsNotA.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<ScaleA>.<MidX>.Value
        SampsNotA.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<ScaleA>.<Y>.Value
        SampsNotA.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<ScaleB>.<MidX>.Value
        SampsNotA.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<ScaleB>.<Y>.Value
        SampsNotA.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        SampsNotA.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotA>.<ScaleAB>.<Y>.Value

        SampsNotA.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Text>.Value
        SampsNotA.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotA.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotA.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Color>.Value)
        SampsNotA.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Show>.Value
        SampsNotA.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Unscaled>.<MidX>.Value
        SampsNotA.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Unscaled>.<Y>.Value
        SampsNotA.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<ScaleA>.<MidX>.Value
        SampsNotA.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<ScaleA>.<Y>.Value
        SampsNotA.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<ScaleB>.<MidX>.Value
        SampsNotA.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<ScaleB>.<Y>.Value
        SampsNotA.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<ScaleAB>.<MidX>.Value
        SampsNotA.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<ScaleAB>.<Y>.Value

        SampsNotA.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Text>.Value
        SampsNotA.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotA.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotA.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotB>.<Color>.Value)
        SampsNotA.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotB>.<Show>.Value
        SampsNotA.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotB>.<Unscaled>.<MidX>.Value
        SampsNotA.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotB>.<Unscaled>.<Y>.Value
        SampsNotA.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotB>.<ScaleA>.<MidX>.Value
        SampsNotA.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotB>.<ScaleA>.<Y>.Value
        SampsNotA.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotB>.<ScaleB>.<MidX>.Value
        SampsNotA.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotB>.<ScaleB>.<Y>.Value
        SampsNotA.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        SampsNotA.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotA>.<GivenNotB>.<ScaleAB>.<Y>.Value


        SampsB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Text>.Value
        SampsB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Color>.Value)
        SampsB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Show>.Value
        SampsB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Unscaled>.<MidX>.Value
        SampsB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<Unscaled>.<Y>.Value
        SampsB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<ScaleA>.<MidX>.Value
        SampsB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<ScaleA>.<Y>.Value
        SampsB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<ScaleB>.<MidX>.Value
        SampsB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<ScaleB>.<Y>.Value
        SampsB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<ScaleAB>.<MidX>.Value
        SampsB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<ScaleAB>.<Y>.Value

        SampsB.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<Text>.Value
        SampsB.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsB.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsB.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<Color>.Value)
        SampsB.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<Show>.Value
        SampsB.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<Unscaled>.<MidX>.Value
        SampsB.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<Unscaled>.<Y>.Value
        SampsB.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<ScaleA>.<MidX>.Value
        SampsB.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<ScaleA>.<Y>.Value
        SampsB.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<ScaleB>.<MidX>.Value
        SampsB.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<ScaleB>.<Y>.Value
        SampsB.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<ScaleAB>.<MidX>.Value
        SampsB.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenA>.<ScaleAB>.<Y>.Value

        SampsB.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<Text>.Value
        SampsB.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsB.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsB.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<Color>.Value)
        SampsB.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<Show>.Value
        SampsB.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<Unscaled>.<MidX>.Value
        SampsB.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<Unscaled>.<Y>.Value
        SampsB.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<ScaleA>.<MidX>.Value
        SampsB.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<ScaleA>.<Y>.Value
        SampsB.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<ScaleB>.<MidX>.Value
        SampsB.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<ScaleB>.<Y>.Value
        SampsB.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        SampsB.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotA>.<ScaleAB>.<Y>.Value

        SampsB.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Text>.Value
        SampsB.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsB.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsB.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Color>.Value)
        SampsB.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Show>.Value
        SampsB.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Unscaled>.<MidX>.Value
        SampsB.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Unscaled>.<Y>.Value
        SampsB.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<ScaleA>.<MidX>.Value
        SampsB.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<ScaleA>.<Y>.Value
        SampsB.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<ScaleB>.<MidX>.Value
        SampsB.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<ScaleB>.<Y>.Value
        SampsB.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<ScaleAB>.<MidX>.Value
        SampsB.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<ScaleAB>.<Y>.Value

        SampsB.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Text>.Value
        SampsB.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsB.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsB.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotB>.<Color>.Value)
        SampsB.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotB>.<Show>.Value
        SampsB.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotB>.<Unscaled>.<MidX>.Value
        SampsB.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotB>.<Unscaled>.<Y>.Value
        SampsB.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotB>.<ScaleA>.<MidX>.Value
        SampsB.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotB>.<ScaleA>.<Y>.Value
        SampsB.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotB>.<ScaleB>.<MidX>.Value
        SampsB.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotB>.<ScaleB>.<Y>.Value
        SampsB.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        SampsB.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<B>.<GivenNotB>.<ScaleAB>.<Y>.Value


        SampsNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Text>.Value
        SampsNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Color>.Value)
        SampsNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Show>.Value
        SampsNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Unscaled>.<MidX>.Value
        SampsNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<Unscaled>.<Y>.Value
        SampsNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<ScaleA>.<MidX>.Value
        SampsNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<ScaleA>.<Y>.Value
        SampsNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<ScaleB>.<MidX>.Value
        SampsNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<ScaleB>.<Y>.Value
        SampsNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<ScaleAB>.<MidX>.Value
        SampsNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<ScaleAB>.<Y>.Value

        SampsNotB.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<Text>.Value
        SampsNotB.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotB.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotB.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<Color>.Value)
        SampsNotB.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<Show>.Value
        SampsNotB.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<Unscaled>.<MidX>.Value
        SampsNotB.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<Unscaled>.<Y>.Value
        SampsNotB.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<ScaleA>.<MidX>.Value
        SampsNotB.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<ScaleA>.<Y>.Value
        SampsNotB.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<ScaleB>.<MidX>.Value
        SampsNotB.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<ScaleB>.<Y>.Value
        SampsNotB.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<ScaleAB>.<MidX>.Value
        SampsNotB.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenA>.<ScaleAB>.<Y>.Value

        SampsNotB.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<Text>.Value
        SampsNotB.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotB.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotB.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<Color>.Value)
        SampsNotB.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<Show>.Value
        SampsNotB.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<Unscaled>.<MidX>.Value
        SampsNotB.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<Unscaled>.<Y>.Value
        SampsNotB.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<ScaleA>.<MidX>.Value
        SampsNotB.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<ScaleA>.<Y>.Value
        SampsNotB.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<ScaleB>.<MidX>.Value
        SampsNotB.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<ScaleB>.<Y>.Value
        SampsNotB.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        SampsNotB.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotA>.<ScaleAB>.<Y>.Value

        SampsNotB.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Text>.Value
        SampsNotB.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotB.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotB.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Color>.Value)
        SampsNotB.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Show>.Value
        SampsNotB.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Unscaled>.<MidX>.Value
        SampsNotB.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Unscaled>.<Y>.Value
        SampsNotB.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<ScaleA>.<MidX>.Value
        SampsNotB.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<ScaleA>.<Y>.Value
        SampsNotB.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<ScaleB>.<MidX>.Value
        SampsNotB.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<ScaleB>.<Y>.Value
        SampsNotB.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<ScaleAB>.<MidX>.Value
        SampsNotB.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<ScaleAB>.<Y>.Value

        SampsNotB.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Text>.Value
        SampsNotB.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotB.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotB.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotB>.<Color>.Value)
        SampsNotB.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotB>.<Show>.Value
        SampsNotB.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotB>.<Unscaled>.<MidX>.Value
        SampsNotB.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotB>.<Unscaled>.<Y>.Value
        SampsNotB.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotB>.<ScaleA>.<MidX>.Value
        SampsNotB.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotB>.<ScaleA>.<Y>.Value
        SampsNotB.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotB>.<ScaleB>.<MidX>.Value
        SampsNotB.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotB>.<ScaleB>.<Y>.Value
        SampsNotB.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        SampsNotB.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotB>.<GivenNotB>.<ScaleAB>.<Y>.Value


        SampsAandB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Text>.Value
        SampsAandB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsAandB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsAandB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Color>.Value)
        SampsAandB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Show>.Value
        SampsAandB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Unscaled>.<MidX>.Value
        SampsAandB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<Unscaled>.<Y>.Value
        SampsAandB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<ScaleA>.<MidX>.Value
        SampsAandB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<ScaleA>.<Y>.Value
        SampsAandB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<ScaleB>.<MidX>.Value
        SampsAandB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<ScaleB>.<Y>.Value
        SampsAandB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<ScaleAB>.<MidX>.Value
        SampsAandB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<ScaleAB>.<Y>.Value

        SampsAandB.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<Text>.Value
        SampsAandB.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsAandB.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsAandB.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<Color>.Value)
        SampsAandB.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<Show>.Value
        SampsAandB.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<Unscaled>.<MidX>.Value
        SampsAandB.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<Unscaled>.<Y>.Value
        SampsAandB.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<ScaleA>.<MidX>.Value
        SampsAandB.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<ScaleA>.<Y>.Value
        SampsAandB.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<ScaleB>.<MidX>.Value
        SampsAandB.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<ScaleB>.<Y>.Value
        SampsAandB.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<ScaleAB>.<MidX>.Value
        SampsAandB.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenA>.<ScaleAB>.<Y>.Value

        SampsAandB.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<Text>.Value
        SampsAandB.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsAandB.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsAandB.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<Color>.Value)
        SampsAandB.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<Show>.Value
        SampsAandB.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<Unscaled>.<MidX>.Value
        SampsAandB.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<Unscaled>.<Y>.Value
        SampsAandB.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<ScaleA>.<MidX>.Value
        SampsAandB.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<ScaleA>.<Y>.Value
        SampsAandB.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<ScaleB>.<MidX>.Value
        SampsAandB.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<ScaleB>.<Y>.Value
        SampsAandB.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        SampsAandB.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotA>.<ScaleAB>.<Y>.Value

        SampsAandB.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Text>.Value
        SampsAandB.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsAandB.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsAandB.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Color>.Value)
        SampsAandB.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Show>.Value
        SampsAandB.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Unscaled>.<MidX>.Value
        SampsAandB.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Unscaled>.<Y>.Value
        SampsAandB.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<ScaleA>.<MidX>.Value
        SampsAandB.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<ScaleA>.<Y>.Value
        SampsAandB.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<ScaleB>.<MidX>.Value
        SampsAandB.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<ScaleB>.<Y>.Value
        SampsAandB.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<ScaleAB>.<MidX>.Value
        SampsAandB.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<ScaleAB>.<Y>.Value

        SampsAandB.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Text>.Value
        SampsAandB.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsAandB.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsAandB.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotB>.<Color>.Value)
        SampsAandB.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotB>.<Show>.Value
        SampsAandB.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotB>.<Unscaled>.<MidX>.Value
        SampsAandB.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotB>.<Unscaled>.<Y>.Value
        SampsAandB.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotB>.<ScaleA>.<MidX>.Value
        SampsAandB.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotB>.<ScaleA>.<Y>.Value
        SampsAandB.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotB>.<ScaleB>.<MidX>.Value
        SampsAandB.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotB>.<ScaleB>.<Y>.Value
        SampsAandB.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        SampsAandB.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandB>.<GivenNotB>.<ScaleAB>.<Y>.Value


        SampsAandNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Text>.Value
        SampsAandNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsAandNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsAandNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Color>.Value)
        SampsAandNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Show>.Value
        SampsAandNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Unscaled>.<MidX>.Value
        SampsAandNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<Unscaled>.<Y>.Value
        SampsAandNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<ScaleA>.<MidX>.Value
        SampsAandNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<ScaleA>.<Y>.Value
        SampsAandNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<ScaleB>.<MidX>.Value
        SampsAandNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<ScaleB>.<Y>.Value
        SampsAandNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<ScaleAB>.<MidX>.Value
        SampsAandNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<ScaleAB>.<Y>.Value

        SampsAandNotB.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<Text>.Value
        SampsAandNotB.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsAandNotB.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsAandNotB.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<Color>.Value)
        SampsAandNotB.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<Show>.Value
        SampsAandNotB.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<Unscaled>.<MidX>.Value
        SampsAandNotB.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<Unscaled>.<Y>.Value
        SampsAandNotB.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<ScaleA>.<MidX>.Value
        SampsAandNotB.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<ScaleA>.<Y>.Value
        SampsAandNotB.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<ScaleB>.<MidX>.Value
        SampsAandNotB.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<ScaleB>.<Y>.Value
        SampsAandNotB.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<ScaleAB>.<MidX>.Value
        SampsAandNotB.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenA>.<ScaleAB>.<Y>.Value

        SampsAandNotB.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<Text>.Value
        SampsAandNotB.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsAandNotB.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsAandNotB.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<Color>.Value)
        SampsAandNotB.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<Show>.Value
        SampsAandNotB.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<Unscaled>.<MidX>.Value
        SampsAandNotB.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<Unscaled>.<Y>.Value
        SampsAandNotB.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<ScaleA>.<MidX>.Value
        SampsAandNotB.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<ScaleA>.<Y>.Value
        SampsAandNotB.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<ScaleB>.<MidX>.Value
        SampsAandNotB.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<ScaleB>.<Y>.Value
        SampsAandNotB.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        SampsAandNotB.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotA>.<ScaleAB>.<Y>.Value

        SampsAandNotB.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Text>.Value
        SampsAandNotB.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsAandNotB.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsAandNotB.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Color>.Value)
        SampsAandNotB.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Show>.Value
        SampsAandNotB.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Unscaled>.<MidX>.Value
        SampsAandNotB.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Unscaled>.<Y>.Value
        SampsAandNotB.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<ScaleA>.<MidX>.Value
        SampsAandNotB.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<ScaleA>.<Y>.Value
        SampsAandNotB.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<ScaleB>.<MidX>.Value
        SampsAandNotB.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<ScaleB>.<Y>.Value
        SampsAandNotB.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<ScaleAB>.<MidX>.Value
        SampsAandNotB.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<ScaleAB>.<Y>.Value

        SampsAandNotB.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Text>.Value
        SampsAandNotB.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsAandNotB.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsAandNotB.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotB>.<Color>.Value)
        SampsAandNotB.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotB>.<Show>.Value
        SampsAandNotB.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotB>.<Unscaled>.<MidX>.Value
        SampsAandNotB.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotB>.<Unscaled>.<Y>.Value
        SampsAandNotB.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotB>.<ScaleA>.<MidX>.Value
        SampsAandNotB.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotB>.<ScaleA>.<Y>.Value
        SampsAandNotB.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotB>.<ScaleB>.<MidX>.Value
        SampsAandNotB.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotB>.<ScaleB>.<Y>.Value
        SampsAandNotB.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        SampsAandNotB.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<AandNotB>.<GivenNotB>.<ScaleAB>.<Y>.Value


        SampsNotAandB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Text>.Value
        SampsNotAandB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotAandB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotAandB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Color>.Value)
        SampsNotAandB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Show>.Value
        SampsNotAandB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Unscaled>.<MidX>.Value
        SampsNotAandB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<Unscaled>.<Y>.Value
        SampsNotAandB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<ScaleA>.<MidX>.Value
        SampsNotAandB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<ScaleA>.<Y>.Value
        SampsNotAandB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<ScaleB>.<MidX>.Value
        SampsNotAandB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<ScaleB>.<Y>.Value
        SampsNotAandB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<ScaleAB>.<MidX>.Value
        SampsNotAandB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<ScaleAB>.<Y>.Value

        SampsNotAandB.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<Text>.Value
        SampsNotAandB.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotAandB.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotAandB.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<Color>.Value)
        SampsNotAandB.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<Show>.Value
        SampsNotAandB.GivenA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<Unscaled>.<MidX>.Value
        SampsNotAandB.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<Unscaled>.<Y>.Value
        SampsNotAandB.GivenA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<ScaleA>.<MidX>.Value
        SampsNotAandB.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<ScaleA>.<Y>.Value
        SampsNotAandB.GivenA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<ScaleB>.<MidX>.Value
        SampsNotAandB.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<ScaleB>.<Y>.Value
        SampsNotAandB.GivenA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<ScaleAB>.<MidX>.Value
        SampsNotAandB.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenA>.<ScaleAB>.<Y>.Value

        SampsNotAandB.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<Text>.Value
        SampsNotAandB.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotAandB.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotAandB.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<Color>.Value)
        SampsNotAandB.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<Show>.Value
        SampsNotAandB.GivenNotA.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<Unscaled>.<MidX>.Value
        SampsNotAandB.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<Unscaled>.<Y>.Value
        SampsNotAandB.GivenNotA.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<ScaleA>.<MidX>.Value
        SampsNotAandB.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<ScaleA>.<Y>.Value
        SampsNotAandB.GivenNotA.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<ScaleB>.<MidX>.Value
        SampsNotAandB.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<ScaleB>.<Y>.Value
        SampsNotAandB.GivenNotA.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<ScaleAB>.<MidX>.Value
        SampsNotAandB.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotA>.<ScaleAB>.<Y>.Value

        SampsNotAandB.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Text>.Value
        SampsNotAandB.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotAandB.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotAandB.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Color>.Value)
        SampsNotAandB.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Show>.Value
        SampsNotAandB.GivenB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Unscaled>.<MidX>.Value
        SampsNotAandB.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Unscaled>.<Y>.Value
        SampsNotAandB.GivenB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<ScaleA>.<MidX>.Value
        SampsNotAandB.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<ScaleA>.<Y>.Value
        SampsNotAandB.GivenB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<ScaleB>.<MidX>.Value
        SampsNotAandB.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<ScaleB>.<Y>.Value
        SampsNotAandB.GivenB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<ScaleAB>.<MidX>.Value
        SampsNotAandB.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<ScaleAB>.<Y>.Value

        SampsNotAandB.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Text>.Value
        SampsNotAandB.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotAandB.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotAandB.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotB>.<Color>.Value)
        SampsNotAandB.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotB>.<Show>.Value
        SampsNotAandB.GivenNotB.Label.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotB>.<Unscaled>.<MidX>.Value
        SampsNotAandB.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotB>.<Unscaled>.<Y>.Value
        SampsNotAandB.GivenNotB.Label.ScaleA.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotB>.<ScaleA>.<MidX>.Value
        SampsNotAandB.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotB>.<ScaleA>.<Y>.Value
        SampsNotAandB.GivenNotB.Label.ScaleB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotB>.<ScaleB>.<MidX>.Value
        SampsNotAandB.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotB>.<ScaleB>.<Y>.Value
        SampsNotAandB.GivenNotB.Label.ScaleAB.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotB>.<ScaleAB>.<MidX>.Value
        SampsNotAandB.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandB>.<GivenNotB>.<ScaleAB>.<Y>.Value


        SampsNotAandNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Text>.Value
        SampsNotAandNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotAandNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotAandNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Color>.Value)
        SampsNotAandNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Show>.Value
        SampsNotAandNotB.Label.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Unscaled>.<X>.Value
        SampsNotAandNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<Unscaled>.<Y>.Value
        SampsNotAandNotB.Label.ScaleA.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<ScaleA>.<X>.Value
        SampsNotAandNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<ScaleA>.<Y>.Value
        SampsNotAandNotB.Label.ScaleB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<ScaleB>.<X>.Value
        SampsNotAandNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<ScaleB>.<Y>.Value
        SampsNotAandNotB.Label.ScaleAB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<ScaleAB>.<X>.Value
        SampsNotAandNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<ScaleAB>.<Y>.Value

        SampsNotAandNotB.GivenA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<Text>.Value
        SampsNotAandNotB.GivenA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotAandNotB.GivenA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotAandNotB.GivenA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<Color>.Value)
        SampsNotAandNotB.GivenA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<Show>.Value
        SampsNotAandNotB.GivenA.Label.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<Unscaled>.<X>.Value
        SampsNotAandNotB.GivenA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<Unscaled>.<Y>.Value
        SampsNotAandNotB.GivenA.Label.ScaleA.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<ScaleA>.<X>.Value
        SampsNotAandNotB.GivenA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<ScaleA>.<Y>.Value
        SampsNotAandNotB.GivenA.Label.ScaleB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<ScaleB>.<X>.Value
        SampsNotAandNotB.GivenA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<ScaleB>.<Y>.Value
        SampsNotAandNotB.GivenA.Label.ScaleAB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<ScaleAB>.<X>.Value
        SampsNotAandNotB.GivenA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenA>.<ScaleAB>.<Y>.Value

        SampsNotAandNotB.GivenNotA.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<Text>.Value
        SampsNotAandNotB.GivenNotA.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotAandNotB.GivenNotA.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotAandNotB.GivenNotA.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<Color>.Value)
        SampsNotAandNotB.GivenNotA.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<Show>.Value
        SampsNotAandNotB.GivenNotA.Label.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<Unscaled>.<X>.Value
        SampsNotAandNotB.GivenNotA.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<Unscaled>.<Y>.Value
        SampsNotAandNotB.GivenNotA.Label.ScaleA.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<ScaleA>.<X>.Value
        SampsNotAandNotB.GivenNotA.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<ScaleA>.<Y>.Value
        SampsNotAandNotB.GivenNotA.Label.ScaleB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<ScaleB>.<X>.Value
        SampsNotAandNotB.GivenNotA.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<ScaleB>.<Y>.Value
        SampsNotAandNotB.GivenNotA.Label.ScaleAB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<ScaleAB>.<X>.Value
        SampsNotAandNotB.GivenNotA.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotA>.<ScaleAB>.<Y>.Value

        SampsNotAandNotB.GivenB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Text>.Value
        SampsNotAandNotB.GivenB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotAandNotB.GivenB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotAandNotB.GivenB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Color>.Value)
        SampsNotAandNotB.GivenB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Show>.Value
        SampsNotAandNotB.GivenB.Label.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Unscaled>.<X>.Value
        SampsNotAandNotB.GivenB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Unscaled>.<Y>.Value
        SampsNotAandNotB.GivenB.Label.ScaleA.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<ScaleA>.<X>.Value
        SampsNotAandNotB.GivenB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<ScaleA>.<Y>.Value
        SampsNotAandNotB.GivenB.Label.ScaleB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<ScaleB>.<X>.Value
        SampsNotAandNotB.GivenB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<ScaleB>.<Y>.Value
        SampsNotAandNotB.GivenB.Label.ScaleAB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<ScaleAB>.<X>.Value
        SampsNotAandNotB.GivenB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<ScaleAB>.<Y>.Value

        SampsNotAandNotB.GivenNotB.Label.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Text>.Value
        SampsNotAandNotB.GivenNotB.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Prefix>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotB>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotB>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenB>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        SampsNotAandNotB.GivenNotB.Label.Font = New Font(myFontName, myFontSize, myFontStyle)
        SampsNotAandNotB.GivenNotB.Label.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotB>.<Color>.Value)
        SampsNotAandNotB.GivenNotB.Label.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotB>.<Show>.Value
        SampsNotAandNotB.GivenNotB.Label.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotB>.<Unscaled>.<X>.Value
        SampsNotAandNotB.GivenNotB.Label.Unscaled.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotB>.<Unscaled>.<Y>.Value
        SampsNotAandNotB.GivenNotB.Label.ScaleA.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotB>.<ScaleA>.<X>.Value
        SampsNotAandNotB.GivenNotB.Label.ScaleA.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotB>.<ScaleA>.<Y>.Value
        SampsNotAandNotB.GivenNotB.Label.ScaleB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotB>.<ScaleB>.<X>.Value
        SampsNotAandNotB.GivenNotB.Label.ScaleB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotB>.<ScaleB>.<Y>.Value
        SampsNotAandNotB.GivenNotB.Label.ScaleAB.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotB>.<ScaleAB>.<X>.Value
        SampsNotAandNotB.GivenNotB.Label.ScaleAB.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<NotAandNotB>.<GivenNotB>.<ScaleAB>.<Y>.Value


        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Prefix>.Value <> Nothing Then SampleSize.Prefix = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Prefix>.Value

        AnnotSampleSize.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Text>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        AnnotSampleSize.Font = New Font(myFontName, myFontSize, myFontStyle)
        AnnotSampleSize.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Color>.Value)
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<X>.Value <> Nothing Then AnnotSampleSize.Unscaled.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<X>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<MidX>.Value <> Nothing Then AnnotSampleSize.Unscaled.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<MidX>.Value
        AnnotSampleSize.ScaleA.MidX = AnnotSampleSize.Unscaled.MidX
        AnnotSampleSize.ScaleB.MidX = AnnotSampleSize.Unscaled.MidX
        AnnotSampleSize.ScaleAB.MidX = AnnotSampleSize.Unscaled.MidX
        AnnotSampleSize.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<Show>.Value
        AnnotSampleSize.Unscaled.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<SampleSize>.<BaseY>.Value
        AnnotSampleSize.ScaleA.BaseY = AnnotSampleSize.Unscaled.BaseY
        AnnotSampleSize.ScaleB.BaseY = AnnotSampleSize.Unscaled.BaseY
        AnnotSampleSize.ScaleAB.BaseY = AnnotSampleSize.Unscaled.BaseY

        AnnotConditionalSampleSize.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Text>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        AnnotConditionalSampleSize.Font = New Font(myFontName, myFontSize, myFontStyle)
        AnnotConditionalSampleSize.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Color>.Value)
        AnnotConditionalSampleSize.Unscaled.EndX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<EndX>.Value
        AnnotConditionalSampleSize.Unscaled.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<BaseY>.Value
        AnnotConditionalSampleSize.ScaleA.EndX = AnnotConditionalSampleSize.Unscaled.EndX
        AnnotConditionalSampleSize.ScaleA.BaseY = AnnotConditionalSampleSize.Unscaled.BaseY
        AnnotConditionalSampleSize.ScaleB.EndX = AnnotConditionalSampleSize.Unscaled.EndX
        AnnotConditionalSampleSize.ScaleB.BaseY = AnnotConditionalSampleSize.Unscaled.BaseY
        AnnotConditionalSampleSize.ScaleAB.EndX = AnnotConditionalSampleSize.Unscaled.EndX
        AnnotConditionalSampleSize.ScaleAB.BaseY = AnnotConditionalSampleSize.Unscaled.BaseY
        AnnotConditionalSampleSize.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Samples>.<ConditionalSampleSize>.<Show>.Value

        Settings.Condition = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Name>.Value
        myFontStyle = FontStyle.Regular
        myFontSize = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Font>.<Size>.Value
        myFontName = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Font>.<Name>.Value
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Font>.<Bold>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Bold
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Font>.<Italic>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Italic
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Font>.<Underline>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Underline
        If XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Font>.<Strikeout>.Value = True Then myFontStyle = myFontStyle Or FontStyle.Strikeout
        AnnotCondition.Font = New Font(myFontName, myFontSize, myFontStyle)
        AnnotCondition.Color = Color.FromArgb(XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Color>.Value)
        AnnotCondition.Show = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<Show>.Value

        AnnotCondition.None.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<Text>.Value
        AnnotCondition.None.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<MidX>.Value
        AnnotCondition.None.MidY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<MidY>.Value
        AnnotCondition.None.EndX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<EndX>.Value
        AnnotCondition.None.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<BaseY>.Value
        AnnotCondition.None.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<X>.Value
        AnnotCondition.None.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<Y>.Value
        AnnotCondition.None.XPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<XPositionReference>.Value
        AnnotCondition.None.YPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<None>.<YPositionReference>.Value

        AnnotCondition.EventATrue.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<Text>.Value
        AnnotCondition.EventATrue.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<MidX>.Value
        AnnotCondition.EventATrue.MidY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<MidY>.Value
        AnnotCondition.EventATrue.EndX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<EndX>.Value
        AnnotCondition.EventATrue.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<BaseY>.Value
        AnnotCondition.EventATrue.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<X>.Value
        AnnotCondition.EventATrue.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<Y>.Value
        AnnotCondition.EventATrue.XPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<XPositionReference>.Value
        AnnotCondition.EventATrue.YPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventATrue>.<YPositionReference>.Value

        AnnotCondition.EventAFalse.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<Text>.Value
        AnnotCondition.EventAFalse.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<MidX>.Value
        AnnotCondition.EventAFalse.MidY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<MidY>.Value
        AnnotCondition.EventAFalse.EndX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<EndX>.Value
        AnnotCondition.EventAFalse.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<BaseY>.Value
        AnnotCondition.EventAFalse.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<X>.Value
        AnnotCondition.EventAFalse.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<Y>.Value
        AnnotCondition.EventAFalse.XPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<XPositionReference>.Value
        AnnotCondition.EventAFalse.YPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventAFalse>.<YPositionReference>.Value

        AnnotCondition.EventBTrue.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<Text>.Value
        AnnotCondition.EventBTrue.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<MidX>.Value
        AnnotCondition.EventBTrue.MidY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<MidY>.Value
        AnnotCondition.EventBTrue.EndX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<EndX>.Value
        AnnotCondition.EventBTrue.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<BaseY>.Value
        AnnotCondition.EventBTrue.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<X>.Value
        AnnotCondition.EventBTrue.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<Y>.Value
        AnnotCondition.EventBTrue.XPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<XPositionReference>.Value
        AnnotCondition.EventBTrue.YPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBTrue>.<YPositionReference>.Value

        AnnotCondition.EventBFalse.Text = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<Text>.Value
        AnnotCondition.EventBFalse.MidX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<MidX>.Value
        AnnotCondition.EventBFalse.MidY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<MidY>.Value
        AnnotCondition.EventBFalse.EndX = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<EndX>.Value
        AnnotCondition.EventBFalse.BaseY = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<BaseY>.Value
        AnnotCondition.EventBFalse.X = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<X>.Value
        AnnotCondition.EventBFalse.Y = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<Y>.Value
        AnnotCondition.EventBFalse.XPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<XPositionReference>.Value
        AnnotCondition.EventBFalse.YPositionReference = XDoc.<BayesModel>.<Diagram>.<Annotation>.<Condition>.<EventBFalse>.<YPositionReference>.Value

        FixDuplicateRanks(1) 'Ensure there is only one parameter of Rank 1
        FixDuplicateRanks(2) 'Ensure there is only one parameter of Rank 2
        FixDuplicateRanks(3) 'Ensure there is only one parameter of Rank 3

        'UpdateAccuracy()
        'UpdatePrecision()
        'UpdateSensitivity()
        'UpdateSpecificity()
        'UpdatePrevalence()
        UpdatePerformanceMeasures()

    End Sub

    Private Sub FixDuplicateRanks(ByVal RankNo As Integer)
        'If a duplicate Rank of RankNo value is found, its value is incremented.
        'This method is used to ensure there ios only one Rank1 parameter, one ank2 parameter and one Rank3 parameter.

        Dim RankFound As Boolean = False 'When a parameter of the specified rank is found, RankFound is set to True.

        If ProbA.Rank = RankNo Then
            If RankFound Then
                ProbA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotA.Rank = RankNo Then
            If RankFound Then
                ProbNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbB.Rank = RankNo Then
            If RankFound Then
                ProbB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotB.Rank = RankNo Then
            If RankFound Then
                ProbNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbAandB.Rank = RankNo Then
            If RankFound Then
                ProbAandB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbAandNotB.Rank = RankNo Then
            If RankFound Then
                ProbAandNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotAandB.Rank = RankNo Then
            If RankFound Then
                ProbNotAandB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotAandNotB.Rank = RankNo Then
            If RankFound Then
                ProbNotAandNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If

        If ProbA.GivenA.Rank = RankNo Then
            If RankFound Then
                ProbA.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotA.GivenA.Rank = RankNo Then
            If RankFound Then
                ProbNotA.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbB.GivenA.Rank = RankNo Then
            If RankFound Then
                ProbB.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotB.GivenA.Rank = RankNo Then
            If RankFound Then
                ProbNotB.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbAandB.GivenA.Rank = RankNo Then
            If RankFound Then
                ProbAandB.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbAandNotB.GivenA.Rank = RankNo Then
            If RankFound Then
                ProbAandNotB.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotAandB.GivenA.Rank = RankNo Then
            If RankFound Then
                ProbNotAandB.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotAandNotB.GivenA.Rank = RankNo Then
            If RankFound Then
                ProbNotAandNotB.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If

        If ProbA.GivenNotA.Rank = RankNo Then
            If RankFound Then
                ProbA.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotA.GivenNotA.Rank = RankNo Then
            If RankFound Then
                ProbNotA.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbB.GivenNotA.Rank = RankNo Then
            If RankFound Then
                ProbB.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotB.GivenNotA.Rank = RankNo Then
            If RankFound Then
                ProbNotB.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbAandB.GivenNotA.Rank = RankNo Then
            If RankFound Then
                ProbAandB.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbAandNotB.GivenNotA.Rank = RankNo Then
            If RankFound Then
                ProbAandNotB.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotAandB.GivenNotA.Rank = RankNo Then
            If RankFound Then
                ProbNotAandB.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotAandNotB.GivenNotA.Rank = RankNo Then
            If RankFound Then
                ProbNotAandNotB.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If

        If ProbA.GivenB.Rank = RankNo Then
            If RankFound Then
                ProbA.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotA.GivenB.Rank = RankNo Then
            If RankFound Then
                ProbNotA.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbB.GivenB.Rank = RankNo Then
            If RankFound Then
                ProbB.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotB.GivenB.Rank = RankNo Then
            If RankFound Then
                ProbNotB.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbAandB.GivenB.Rank = RankNo Then
            If RankFound Then
                ProbAandB.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbAandNotB.GivenB.Rank = RankNo Then
            If RankFound Then
                ProbAandNotB.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotAandB.GivenB.Rank = RankNo Then
            If RankFound Then
                ProbNotAandB.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotAandNotB.GivenB.Rank = RankNo Then
            If RankFound Then
                ProbNotAandNotB.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If

        If ProbA.GivenNotB.Rank = RankNo Then
            If RankFound Then
                ProbA.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotA.GivenNotB.Rank = RankNo Then
            If RankFound Then
                ProbNotA.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbB.GivenNotB.Rank = RankNo Then
            If RankFound Then
                ProbB.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotB.GivenNotB.Rank = RankNo Then
            If RankFound Then
                ProbNotB.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbAandB.GivenNotB.Rank = RankNo Then
            If RankFound Then
                ProbAandB.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbAandNotB.GivenNotB.Rank = RankNo Then
            If RankFound Then
                ProbAandNotB.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotAandB.GivenNotB.Rank = RankNo Then
            If RankFound Then
                ProbNotAandB.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If ProbNotAandNotB.GivenNotB.Rank = RankNo Then
            If RankFound Then
                ProbNotAandNotB.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If


        If SampsA.Rank = RankNo Then
            If RankFound Then
                SampsA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotA.Rank = RankNo Then
            If RankFound Then
                SampsNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsB.Rank = RankNo Then
            If RankFound Then
                SampsB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotB.Rank = RankNo Then
            If RankFound Then
                SampsNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsAandB.Rank = RankNo Then
            If RankFound Then
                SampsAandB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsAandNotB.Rank = RankNo Then
            If RankFound Then
                SampsAandNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotAandB.Rank = RankNo Then
            If RankFound Then
                SampsNotAandB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotAandNotB.Rank = RankNo Then
            If RankFound Then
                SampsNotAandNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If

        If SampsA.GivenA.Rank = RankNo Then
            If RankFound Then
                SampsA.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotA.GivenA.Rank = RankNo Then
            If RankFound Then
                SampsNotA.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsB.GivenA.Rank = RankNo Then
            If RankFound Then
                SampsB.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotB.GivenA.Rank = RankNo Then
            If RankFound Then
                SampsNotB.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsAandB.GivenA.Rank = RankNo Then
            If RankFound Then
                SampsAandB.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsAandNotB.GivenA.Rank = RankNo Then
            If RankFound Then
                SampsAandNotB.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotAandB.GivenA.Rank = RankNo Then
            If RankFound Then
                SampsNotAandB.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotAandNotB.GivenA.Rank = RankNo Then
            If RankFound Then
                SampsNotAandNotB.GivenA.Rank += 1
            Else
                RankFound = True
            End If
        End If

        If SampsA.GivenNotA.Rank = RankNo Then
            If RankFound Then
                SampsA.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotA.GivenNotA.Rank = RankNo Then
            If RankFound Then
                SampsNotA.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsB.GivenNotA.Rank = RankNo Then
            If RankFound Then
                SampsB.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotB.GivenNotA.Rank = RankNo Then
            If RankFound Then
                SampsNotB.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsAandB.GivenNotA.Rank = RankNo Then
            If RankFound Then
                SampsAandB.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsAandNotB.GivenNotA.Rank = RankNo Then
            If RankFound Then
                SampsAandNotB.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotAandB.GivenNotA.Rank = RankNo Then
            If RankFound Then
                SampsNotAandB.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotAandNotB.GivenNotA.Rank = RankNo Then
            If RankFound Then
                SampsNotAandNotB.GivenNotA.Rank += 1
            Else
                RankFound = True
            End If
        End If

        If SampsA.GivenB.Rank = RankNo Then
            If RankFound Then
                SampsA.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotA.GivenB.Rank = RankNo Then
            If RankFound Then
                SampsNotA.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsB.GivenB.Rank = RankNo Then
            If RankFound Then
                SampsB.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotB.GivenB.Rank = RankNo Then
            If RankFound Then
                SampsNotB.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsAandB.GivenB.Rank = RankNo Then
            If RankFound Then
                SampsAandB.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsAandNotB.GivenB.Rank = RankNo Then
            If RankFound Then
                SampsAandNotB.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotAandB.GivenB.Rank = RankNo Then
            If RankFound Then
                SampsNotAandB.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotAandNotB.GivenB.Rank = RankNo Then
            If RankFound Then
                SampsNotAandNotB.GivenB.Rank += 1
            Else
                RankFound = True
            End If
        End If

        If SampsA.GivenNotB.Rank = RankNo Then
            If RankFound Then
                SampsA.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotA.GivenNotB.Rank = RankNo Then
            If RankFound Then
                SampsNotA.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsB.GivenNotB.Rank = RankNo Then
            If RankFound Then
                SampsB.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotB.GivenNotB.Rank = RankNo Then
            If RankFound Then
                SampsNotB.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsAandB.GivenNotB.Rank = RankNo Then
            If RankFound Then
                SampsAandB.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsAandNotB.GivenNotB.Rank = RankNo Then
            If RankFound Then
                SampsAandNotB.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotAandB.GivenNotB.Rank = RankNo Then
            If RankFound Then
                SampsNotAandB.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If
        If SampsNotAandNotB.GivenNotB.Rank = RankNo Then
            If RankFound Then
                SampsNotAandNotB.GivenNotB.Rank += 1
            Else
                RankFound = True
            End If
        End If

    End Sub

    Public Sub Clear()
        'Clear the Bayes Model.

        Name = "Bayes Model"
        Label = "Bayes Model"
        Description = ""
        InputInfoType = "P(B|A), P(A), P(B)"
        'ProbabilityMeasure = "Decimal"
        Settings.ProbabilityMeasure = "Decimal"
        'DecimalFormat = "F3" 'Three decimal places
        Settings.DecimalFormat = "F3" 'Three decimal places
        'PercentFormat = "F2" 'Two decimal places
        Settings.PercentFormat = "F2" 'Two decimal places
        'SamplesFormat = "N2" 'Thousands separator, 2 decimal places
        Settings.SamplesFormat = "N2" 'Thousands separator, 2 decimal places
        'SampleSize = 10000
        'SampleSize.Value = 10000
        SampleSize.DefinedValue = 10000 'Setting a DefinedValue also sets the Rank to 1.

        ShowProbabilities = True
        ShowSampleCounts = True

        EventA.Name = "Event A"
        EventA.Description = ""
        EventA.NotName = "Event Not A"

        'UndefineValues() 'Flag all values having a Rank number greater than 3 as Undefined.
        UndefineValuesAbove(4) 'Flag all values having a Rank number greater than 4 as Undefined.

        '_eventAProb = 0.01 'Set the variable value to avoid the property calculations. (If this variable is set to zero, later divide by zero errors will result.)
        'EventAProb.Value = 0.01 'Set the variable value to avoid the property calculations. (If this variable is set to zero, later divide by zero errors will result.)
        'ProbA.Value = 0.01 'Set the variable value to avoid the property calculations. (If this variable is set to zero, later divide by zero errors will result.)
        ProbA.Value = 0.1 'Set the variable value to avoid the property calculations. (If this variable is set to zero, later divide by zero errors will result.)

        EventB.Name = "Event B"
        EventB.Description = ""
        EventB.NotName = "Event Not B"
        '_eventBProb = 0.01 'Set the variable value to avoid the property calculations. (If this variable is set to zero, later divide by zero errors will result.)
        'ProbB.Value = 0.01 'Set the variable value to avoid the property calculations. (If this variable is set to zero, later divide by zero errors will result.)
        ProbB.Value = 0.1 'Set the variable value to avoid the property calculations. (If this variable is set to zero, later divide by zero errors will result.)

        'ProbAandB = 0.0 'Setting this property value recalculates _probBgivenA, _probBgivenNotA and _probAgivenB
        'ProbAandB.Value = 0.0 'Setting this property value recalculates _probBgivenA, _probBgivenNotA and _probAgivenB
        ProbAandB.Value = 0.05 'Setting this property value recalculates _probBgivenA, _probBgivenNotA and _probAgivenB
        'ProbBgivenA = 0
        'ProbBgivenNotA = 0
        'ProbAgivenB = 0



        Diagram.LineColor = Color.Black
        Diagram.LineThickness = 3
        Diagram.FillColor = Color.LightGoldenrodYellow
        'Diagram.Height = 600
        Diagram.Height = 620
        Diagram.Width = 800

        EventA.LineColor = Color.Red
        EventA.FillColor = Color.MistyRose
        EventA.Shape = "Ellipse"
        EventA.LineThickness = 4
        EventA.Unscaled.XMin = 100
        EventA.Unscaled.XMax = 500
        'EventA.Unscaled.YMin = 120
        EventA.Unscaled.YMin = 100
        'EventA.Unscaled.YMax = 520
        EventA.Unscaled.YMax = 500
        EventA.ScaleA.XMin = 100
        EventA.ScaleA.XMax = 500
        'EventA.ScaleA.YMin = 120
        EventA.ScaleA.YMin = 100
        'EventA.ScaleA.YMax = 520
        EventA.ScaleA.YMax = 500
        EventA.ScaleB.XMin = 100
        EventA.ScaleB.XMax = 500
        'EventA.ScaleB.YMin = 120
        EventA.ScaleB.YMin = 100
        'EventA.ScaleB.YMax = 520
        EventA.ScaleB.YMax = 500
        EventA.ScaleAB.XMin = 100
        EventA.ScaleAB.XMax = 500
        'EventA.ScaleAB.YMin = 120
        EventA.ScaleAB.YMin = 100
        'EventA.ScaleAB.YMax = 520
        EventA.ScaleAB.YMax = 500

        EventB.LineColor = Color.Blue
        EventB.FillColor = Color.LightCyan
        EventB.Shape = "Ellipse"
        EventB.LineThickness = 4
        EventB.Unscaled.XMin = 300
        EventB.Unscaled.XMax = 700
        'EventB.Unscaled.YMin = 120
        EventB.Unscaled.YMin = 100
        'EventB.Unscaled.YMax = 520
        EventB.Unscaled.YMax = 500
        EventB.ScaleA.XMin = 300
        EventB.ScaleA.XMax = 700
        'EventB.ScaleA.YMin = 120
        EventB.ScaleA.YMin = 100
        'EventB.ScaleA.YMax = 520
        EventB.ScaleA.YMax = 500
        EventB.ScaleB.XMin = 300
        EventB.ScaleB.XMax = 700
        'EventB.ScaleB.YMin = 120
        EventB.ScaleB.YMin = 100
        'EventB.ScaleB.YMax = 520
        EventB.ScaleB.YMax = 500
        EventB.ScaleAB.XMin = 300
        EventB.ScaleAB.XMax = 700
        'EventB.ScaleAB.YMin = 120
        EventB.ScaleAB.YMin = 100
        'EventB.ScaleAB.YMax = 520
        EventB.ScaleAB.YMax = 500

        EventAandBFillColor = Color.Thistle

        HighlightRegion.Color = Color.LightGreen
        HighlightRegion.A = False
        HighlightRegion.NotA = False
        HighlightRegion.B = False
        HighlightRegion.NotB = False
        HighlightRegion.AandB = False
        HighlightRegion.AandNotB = False
        HighlightRegion.NotAandB = False
        HighlightRegion.NotAandNotB = False

        ZeroProbRegion.Color = Color.White
        ZeroProbRegion.A = False
        ZeroProbRegion.NotA = False
        ZeroProbRegion.B = False
        ZeroProbRegion.AandB = False
        ZeroProbRegion.AandNotB = False
        ZeroProbRegion.NotAandB = False
        ZeroProbRegion.NotAandNotB = False

        Dim myFontStyleBold As FontStyle = FontStyle.Regular Or FontStyle.Bold
        AnnotTitle.Text = ""
        AnnotTitle.Font = New Font("Arial", 12, myFontStyleBold)
        AnnotTitle.Color = Color.Black
        'AnnotTitle.X = -1 'Auto
        'AnnotTitle.Y = -1 'Auto
        AnnotTitle.Unscaled.X = -1 'Auto
        AnnotTitle.Unscaled.Y = -1 'Auto
        AnnotTitle.ScaleA.X = -1 'Auto
        AnnotTitle.ScaleA.Y = -1 'Auto
        AnnotTitle.ScaleB.X = -1 'Auto
        AnnotTitle.ScaleB.Y = -1 'Auto
        AnnotTitle.ScaleAB.X = -1 'Auto
        AnnotTitle.ScaleAB.Y = -1 'Auto

        AnnotDescr.Text = ""
        AnnotDescr.Font = New Font("Arial", 11, myFontStyleBold)
        AnnotDescr.Color = Color.Black
        'AnnotDescr.X = -1 'Auto
        'AnnotDescr.Y = -1 'Auto
        AnnotDescr.Unscaled.X = -1 'Auto
        AnnotDescr.Unscaled.Y = -1 'Auto
        AnnotDescr.ScaleA.X = -1 'Auto
        AnnotDescr.ScaleA.Y = -1 'Auto
        AnnotDescr.ScaleB.X = -1 'Auto
        AnnotDescr.ScaleB.Y = -1 'Auto
        AnnotDescr.ScaleAB.X = -1 'Auto
        AnnotDescr.ScaleAB.Y = -1 'Auto

        'AnnotEventA.Text = ""
        'AnnotEventA.Unscaled.Text = "Event A"
        'AnnotEventA.Unscaled.Font = New Font("Arial", 12, myFontStyleBold)
        'AnnotEventA.Unscaled.Color = Color.Red
        'AnnotEventA.Unscaled.X = -1 'Auto
        'AnnotEventA.Unscaled.Y = -1 'Auto
        AnnotEventA.Text = "Event A"
        AnnotEventA.Font = New Font("Arial", 12, myFontStyleBold)
        AnnotEventA.Color = Color.Red
        AnnotEventA.X = -1 'Auto
        AnnotEventA.Y = -1 'Auto
        AnnotEventA.Unscaled.X = -1 'Auto
        AnnotEventA.Unscaled.Y = -1 'Auto
        AnnotEventA.ScaleA.X = -1 'Auto
        AnnotEventA.ScaleA.Y = -1 'Auto
        AnnotEventA.ScaleB.X = -1 'Auto
        AnnotEventA.ScaleB.Y = -1 'Auto
        AnnotEventA.ScaleAB.X = -1 'Auto
        AnnotEventA.ScaleAB.Y = -1 'Auto


        'AnnotEventB.Unscaled.Text = "Event B"
        'AnnotEventB.Unscaled.Font = New Font("Arial", 12, myFontStyleBold)
        'AnnotEventB.Unscaled.Color = Color.Blue
        'AnnotEventB.Unscaled.X = -1 'Auto
        'AnnotEventB.Unscaled.Y = -1 'Auto
        AnnotEventB.Text = "Event B"
        AnnotEventB.Font = New Font("Arial", 12, myFontStyleBold)
        AnnotEventB.Color = Color.Blue
        AnnotEventB.X = -1 'Auto
        AnnotEventB.Y = -1 'Auto
        AnnotEventB.Unscaled.X = -1 'Auto
        AnnotEventB.Unscaled.Y = -1 'Auto
        AnnotEventB.ScaleA.X = -1 'Auto
        AnnotEventB.ScaleA.Y = -1 'Auto
        AnnotEventB.ScaleB.X = -1 'Auto
        AnnotEventB.ScaleB.Y = -1 'Auto
        AnnotEventB.ScaleAB.X = -1 'Auto
        AnnotEventB.ScaleAB.Y = -1 'Auto

    End Sub

    'Public Sub CalcProbAgivenB()
    '    'Use Bayes theorem to calculate the probability of Event A given Event B.

    '    Select Case InputInfoType
    '        'Case "P(A), P(B), P(B|A)"
    '        Case "P(B|A), P(A), P(B)"
    '            ProbA.GivenB.Value = ProbB.GivenA.Value * ProbA.Value / ProbB.Value

    '        Case "P(B|A), P(A), P(B|NotA)"
    '            ProbA.GivenB.Value = ProbB.GivenA.Value * ProbA.Value / (ProbB.GivenA.Value * ProbA.Value + ProbB.GivenNotA.Value * (1 - ProbA.Value))

    '        Case "Sample Counts (TP, TN, FP, FN)"
    '            'Dim SampleSize As Double = SampsAandB.Value + SampsNotAandB.Value + SampsNotAandNotB.Value + SampsAandNotB.Value
    '            'Dim ProbAVal As Double = (SampsAandB.Value + SampsAandNotB.Value) / SampleSize
    '            'Dim ProbBVal As Double = (SampsAandB.Value + SampsNotAandB.Value) / SampleSize
    '            ProbA.GivenB.Value = SampsAandB.Value / (SampsAandB.Value + SampsNotAandB.Value)
    '        Case Else
    '            RaiseEvent ErrorMessage("Unknown Input Information Type: " & InputInfoType & vbCrLf)
    '    End Select
    'End Sub



#Region "Diagram Methods" '====================================================================================================================================================================

    Public Sub ClearHighlights()
        'Clear all highlighted regions.
        HighlightRegion.A = False
        HighlightRegion.NotA = False
        HighlightRegion.B = False
        HighlightRegion.NotB = False
        HighlightRegion.AandB = False
        HighlightRegion.AandNotB = False
        HighlightRegion.NotAandB = False
        HighlightRegion.NotAandNotB = False
    End Sub

    Public Sub ClearZeroProbRegions()
        'Clear all zero probability regions.
        ZeroProbRegion.A = False
        ZeroProbRegion.NotA = False
        ZeroProbRegion.B = False
        ZeroProbRegion.NotB = False
        ZeroProbRegion.AandB = False
        ZeroProbRegion.AandNotB = False
        ZeroProbRegion.NotAandB = False
        ZeroProbRegion.NotAandNotB = False
    End Sub

#End Region 'Diagram Methods ------------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region "Annotation Methods" '=================================================================================================================================================================

    Public Sub DefaultAnnotText()
        'Set default text for the Bayes Diagram annotation.
        AnnotTitle.Text = Label
        AnnotDescr.Text = Description
        AnnotEventA.Text = EventA.Name
        AnnotEventB.Text = EventB.Name
    End Sub
    Public Sub DefaultTitleAnnotPositions()
        'Set default positions of the Bayes Diagram Title annotation.

        Dim DiagMidX As Integer = Diagram.Width / 2 'Get the X midpoint of the Diagram.
        Dim EventAMidX As Integer = EventA.Unscaled.XMin + (EventA.Unscaled.XMax - EventA.Unscaled.XMin) / 2 'Get the X midpoint of the Event A shape.
        Dim EventBMidX As Integer = EventB.Unscaled.XMin + (EventB.Unscaled.XMax - EventB.Unscaled.XMin) / 2 'Get the X midpoint of the Event B shape.

        Dim EventABMidX As Integer 'The X midpoint of the Event A and Event B shape overlap.
        If EventA.Unscaled.XMax > EventB.Unscaled.XMin Then
            EventABMidX = (EventA.Unscaled.XMax - EventB.Unscaled.XMin) / 2
        Else
            EventABMidX = (EventB.Unscaled.XMin - EventA.Unscaled.XMax) / 2
        End If

        Dim EventABTopY As Integer 'The Y position of the top of events A and B shapes
        If EventA.Unscaled.YMin <= EventB.Unscaled.YMin Then
            EventABTopY = EventA.Unscaled.YMin
        Else
            EventABTopY = EventB.Unscaled.YMin
        End If

        'Set the default position of the Diagram title.
        'AnnotTitle.MidX = DiagMidX
        'AnnotTitle.Y = 20
        AnnotTitle.Unscaled.MidX = DiagMidX
        AnnotTitle.Unscaled.Y = 20
        AnnotTitle.ScaleA.MidX = DiagMidX
        AnnotTitle.ScaleA.Y = 20
        AnnotTitle.ScaleB.MidX = DiagMidX
        AnnotTitle.ScaleB.Y = 20
        AnnotTitle.ScaleAB.MidX = DiagMidX
        AnnotTitle.ScaleAB.Y = 20

        'Set the default position of the Diagram description.
        'AnnotDescr.MidX = DiagMidX
        'AnnotDescr.Y = -1 'Set to -1: the Y position will be set to just below the Title text.
        AnnotDescr.Unscaled.MidX = DiagMidX
        AnnotDescr.Unscaled.Y = -1 'Set to -1: the Y position will be set to just below the Title text.
        AnnotDescr.ScaleA.MidX = DiagMidX
        AnnotDescr.ScaleA.Y = -1 'Set to -1: the Y position will be set to just below the Title text.
        AnnotDescr.ScaleB.MidX = DiagMidX
        AnnotDescr.ScaleB.Y = -1 'Set to -1: the Y position will be set to just below the Title text.
        AnnotDescr.ScaleAB.MidX = DiagMidX
        AnnotDescr.ScaleAB.Y = -1 'Set to -1: the Y position will be set to just below the Title text.

        'Set the default position of the Event A text:
        AnnotEventA.Unscaled.MidX = EventAMidX 'The X midpoint of the Event A shape
        AnnotEventA.Unscaled.BaseY = EventA.Unscaled.YMin - 30 '30 pixels above the top of the Event A shape
        AnnotEventA.ScaleA.MidX = EventAMidX 'The X midpoint of the Event A shape
        AnnotEventA.ScaleA.BaseY = EventA.Unscaled.YMin - 30 '30 pixels above the top of the Event A shape
        AnnotEventA.ScaleB.MidX = EventAMidX 'The X midpoint of the Event A shape
        AnnotEventA.ScaleB.BaseY = EventA.Unscaled.YMin - 30 '30 pixels above the top of the Event A shape
        AnnotEventA.ScaleAB.MidX = EventAMidX 'The X midpoint of the Event A shape
        AnnotEventA.ScaleAB.BaseY = EventA.Unscaled.YMin - 30 '30 pixels above the top of the Event A shape

        'Set the default position of the Event B text:
        AnnotEventB.Unscaled.MidX = EventBMidX 'The X midpoint of the Event B shape
        AnnotEventB.Unscaled.BaseY = EventB.Unscaled.YMin - 30 '30 pixels above the top of the Event B shape.
        AnnotEventB.ScaleA.MidX = EventBMidX 'The X midpoint of the Event B shape
        AnnotEventB.ScaleA.BaseY = EventB.Unscaled.YMin - 30 '30 pixels above the top of the Event B shape.
        AnnotEventB.ScaleB.MidX = EventBMidX 'The X midpoint of the Event B shape
        AnnotEventB.ScaleB.BaseY = EventB.Unscaled.YMin - 30 '30 pixels above the top of the Event B shape.
        AnnotEventB.ScaleAB.MidX = EventBMidX 'The X midpoint of the Event B shape
        AnnotEventB.ScaleAB.BaseY = EventB.Unscaled.YMin - 30 '30 pixels above the top of the Event B shape.

    End Sub

    Public Sub DefaultTitlePosition()
        'Set the default position for the Title text.
        Dim DiagMidX As Integer = Diagram.Width / 2 'Get the X midpoint of the Diagram.

        'AnnotTitle.MidX = DiagMidX
        'AnnotTitle.Y = 10
        AnnotTitle.Unscaled.MidX = DiagMidX
        AnnotTitle.Unscaled.Y = 10
        AnnotTitle.ScaleA.MidX = DiagMidX
        AnnotTitle.ScaleA.Y = 10
        AnnotTitle.ScaleB.MidX = DiagMidX
        AnnotTitle.ScaleB.Y = 10
        AnnotTitle.ScaleAB.MidX = DiagMidX
        AnnotTitle.ScaleAB.Y = 10
    End Sub

    Public Sub DefaultDescrPosition()
        'Set the default position for the Description text.
        'AnnotDescr.X = AnnotTitle.X
        'AnnotDescr.MidX = AnnotTitle.MidX
        AnnotDescr.Unscaled.X = AnnotTitle.Unscaled.X
        AnnotDescr.Unscaled.MidX = AnnotTitle.Unscaled.MidX
        AnnotDescr.ScaleA.X = AnnotTitle.ScaleA.X
        AnnotDescr.ScaleA.MidX = AnnotTitle.ScaleA.MidX
        AnnotDescr.ScaleB.X = AnnotTitle.ScaleB.X
        AnnotDescr.ScaleB.MidX = AnnotTitle.ScaleB.MidX
        AnnotDescr.ScaleAB.X = AnnotTitle.ScaleAB.X
        AnnotDescr.ScaleAB.MidX = AnnotTitle.ScaleAB.MidX

        Dim TextHeight As Integer = TextRenderer.MeasureText(AnnotDescr.Text, AnnotDescr.Font).Height
        'AnnotDescr.Y = AnnotTitle.Y + TextHeight
        AnnotDescr.Unscaled.Y = AnnotTitle.Unscaled.Y + TextHeight
        AnnotDescr.ScaleA.Y = AnnotTitle.ScaleA.Y + TextHeight
        AnnotDescr.ScaleB.Y = AnnotTitle.ScaleB.Y + TextHeight
        AnnotDescr.ScaleAB.Y = AnnotTitle.ScaleAB.Y + TextHeight
    End Sub

    Public Sub DefaultEventAandBPositions()
        'Set the default position for the Event A text.
        Dim EventAMidX As Integer = EventA.Unscaled.XMin + (EventA.Unscaled.XMax - EventA.Unscaled.XMin) / 2 'Get the X midpoint of the Event A shape.
        Dim EventBMidX As Integer = EventB.Unscaled.XMin + (EventB.Unscaled.XMax - EventB.Unscaled.XMin) / 2 'Get the X midpoint of the Event B shape.

        AnnotEventA.Unscaled.MidX = EventAMidX 'The X midpoint of the Event A shape
        AnnotEventB.Unscaled.MidX = EventBMidX 'The X midpoint of the Event B shape
        AnnotEventA.ScaleA.MidX = EventAMidX 'The X midpoint of the Event A shape
        AnnotEventB.ScaleA.MidX = EventBMidX 'The X midpoint of the Event B shape
        AnnotEventA.ScaleB.MidX = EventAMidX 'The X midpoint of the Event A shape
        AnnotEventB.ScaleB.MidX = EventBMidX 'The X midpoint of the Event B shape
        AnnotEventA.ScaleAB.MidX = EventAMidX 'The X midpoint of the Event A shape
        AnnotEventB.ScaleAB.MidX = EventBMidX 'The X midpoint of the Event B shape

        AnnotEventA.Unscaled.Y = EventA.Unscaled.YMin - 30 '30 pixels above the top of the Event A shape
        AnnotEventB.Unscaled.Y = EventB.Unscaled.YMin - 30 '30 pixels above the top of the Event B shape.
        AnnotEventA.ScaleA.Y = EventA.Unscaled.YMin - 30 '30 pixels above the top of the Event A shape
        AnnotEventB.ScaleA.Y = EventB.Unscaled.YMin - 30 '30 pixels above the top of the Event B shape.
        AnnotEventA.ScaleB.Y = EventA.Unscaled.YMin - 30 '30 pixels above the top of the Event A shape
        AnnotEventB.ScaleB.Y = EventB.Unscaled.YMin - 30 '30 pixels above the top of the Event B shape.
        AnnotEventA.ScaleAB.Y = EventA.Unscaled.YMin - 30 '30 pixels above the top of the Event A shape
        AnnotEventB.ScaleAB.Y = EventB.Unscaled.YMin - 30 '30 pixels above the top of the Event B shape.

        Dim EventATextHeight As Integer = TextRenderer.MeasureText(AnnotEventA.Text, AnnotEventA.Font).Height
        Dim EventBTextHeight As Integer = TextRenderer.MeasureText(AnnotEventB.Text, AnnotEventB.Font).Height
        Dim MaxTextHeight As Integer
        If EventATextHeight >= EventBTextHeight Then MaxTextHeight = EventATextHeight Else MaxTextHeight = EventBTextHeight

        If Math.Abs(AnnotEventA.Unscaled.Y - AnnotEventB.Unscaled.Y) < MaxTextHeight Then
            'Adjust Event A and Event B X position if there is an overlap in text.
            Dim EventATextWidth As Integer = TextRenderer.MeasureText(AnnotEventA.Text, AnnotEventA.Font).Width
            Dim EventBTextWidth As Integer = TextRenderer.MeasureText(AnnotEventB.Text, AnnotEventB.Font).Width
            Dim EventAandBGap As Integer = AnnotEventB.Unscaled.X - AnnotEventA.Unscaled.X - EventATextWidth / 2 - EventBTextWidth / 2
            Dim MinGap As Integer = 20 'The minimum gap required between the labels
            If EventAandBGap < MinGap Then 'Ensure there is a 20 pixel gap between the labels
                AnnotEventA.Unscaled.X = AnnotEventA.Unscaled.X + EventAandBGap - MinGap / 2 'Note: EventAandBGap is negative or < 20
                AnnotEventB.Unscaled.X = AnnotEventB.Unscaled.X - EventAandBGap + MinGap / 2
                AnnotEventA.ScaleA.X = AnnotEventA.Unscaled.X
                AnnotEventB.ScaleA.X = AnnotEventB.Unscaled.X
                AnnotEventA.ScaleB.X = AnnotEventA.Unscaled.X
                AnnotEventB.ScaleB.X = AnnotEventB.Unscaled.X
                AnnotEventA.ScaleAB.X = AnnotEventA.Unscaled.X
                AnnotEventB.ScaleAB.X = AnnotEventB.Unscaled.X
            End If
        End If
    End Sub


    Public Sub DefaultProbAnnotPosn()
        'Get the default probability and sample count annotation positions

        DefaultAnnotProbAPosn() 'Position defined using MidX and Y
        DefaultAnnotSampsAPosn() 'Position defined using MidX and Y
        DefaultAnnotProbNotAPosn() 'Position defined using MidX and Y
        DefaultAnnotSampsNotAPosn() 'Position defined using MidX and Y

        DefaultAnnotProbBPosn() 'Position defined using MidX and Y
        DefaultAnnotSampsBPosn() 'Position defined using MidX and Y
        DefaultAnnotProbNotBPosn() 'Position defined using MidX and Y
        DefaultAnnotSampsNotBPosn() 'Position defined using MidX and Y

        DefaultAnnotProbAandBPosn() 'Position defined using MidX and Y
        DefaultAnnotSampsAandBPosn() 'Position defined using MidX and Y
        DefaultAnnotProbAandNotBPosn() 'Position defined using MidX and Y
        DefaultAnnotSampsAandNotBPosn() 'Position defined using MidX and Y
        DefaultAnnotProbNotAandBPosn() 'Position defined using MidX and Y
        DefaultAnnotSampsNotAandBPosn() 'Position defined using MidX and Y
        DefaultAnnotProbNotAandNotBPosn() 'Position defined using X and Y
        DefaultAnnotSampsNotAandNotBPosn() 'Position defined using X and Y

        DefaultAnnotConditionPosn() 'Position defined using EndX and BaseY

        DefaultAnnotSampleSizePosn() 'Position defined using X and BaseY - Also set the Conditional sample size annotation position.

    End Sub

    Public Sub CheckAnnotPositions()
        'Check annotation positions.

        'Check probability annotations:
        If ProbA.Label.Unscaled.X = -1 Or ProbA.Label.Unscaled.Y = -1 Then
            DefaultAnnotProbAPosn()
        Else
            If ProbA.Label.ScaleA.X = -1 Then ProbA.Label.ScaleA.MidX = ProbA.Label.Unscaled.MidX
            If ProbA.Label.ScaleA.Y = -1 Then ProbA.Label.ScaleA.Y = ProbA.Label.Unscaled.Y
            If ProbA.Label.ScaleB.X = -1 Then ProbA.Label.ScaleB.MidX = ProbA.Label.Unscaled.MidX
            If ProbA.Label.ScaleB.Y = -1 Then ProbA.Label.ScaleB.Y = ProbA.Label.Unscaled.Y
            If ProbA.Label.ScaleAB.X = -1 Then ProbA.Label.ScaleAB.MidX = ProbA.Label.Unscaled.MidX
            If ProbA.Label.ScaleAB.Y = -1 Then ProbA.Label.ScaleAB.Y = ProbA.Label.Unscaled.Y
        End If
        If ProbNotA.Label.Unscaled.X = -1 Or ProbNotA.Label.Unscaled.Y = -1 Then
            DefaultAnnotProbNotAPosn()
        Else
            If ProbNotA.Label.ScaleA.X = -1 Then ProbNotA.Label.ScaleA.MidX = ProbNotA.Label.Unscaled.MidX
            If ProbNotA.Label.ScaleA.Y = -1 Then ProbNotA.Label.ScaleA.Y = ProbNotA.Label.Unscaled.Y
            If ProbNotA.Label.ScaleB.X = -1 Then ProbNotA.Label.ScaleB.MidX = ProbNotA.Label.Unscaled.MidX
            If ProbNotA.Label.ScaleB.Y = -1 Then ProbNotA.Label.ScaleB.Y = ProbNotA.Label.Unscaled.Y
            If ProbNotA.Label.ScaleAB.X = -1 Then ProbNotA.Label.ScaleAB.MidX = ProbNotA.Label.Unscaled.MidX
            If ProbNotA.Label.ScaleAB.Y = -1 Then ProbNotA.Label.ScaleAB.Y = ProbNotA.Label.Unscaled.Y
        End If
        If ProbB.Label.Unscaled.X = -1 Or ProbB.Label.Unscaled.Y = -1 Then
            DefaultAnnotProbBPosn()
        Else
            If ProbB.Label.ScaleA.X = -1 Then ProbB.Label.ScaleA.MidX = ProbB.Label.Unscaled.MidX
            If ProbB.Label.ScaleA.Y = -1 Then ProbB.Label.ScaleA.Y = ProbB.Label.Unscaled.Y
            If ProbB.Label.ScaleB.X = -1 Then ProbB.Label.ScaleB.MidX = ProbB.Label.Unscaled.MidX
            If ProbB.Label.ScaleB.Y = -1 Then ProbB.Label.ScaleB.Y = ProbB.Label.Unscaled.Y
            If ProbB.Label.ScaleAB.X = -1 Then ProbB.Label.ScaleAB.MidX = ProbB.Label.Unscaled.MidX
            If ProbB.Label.ScaleAB.Y = -1 Then ProbB.Label.ScaleAB.Y = ProbB.Label.Unscaled.Y
        End If
        If ProbNotB.Label.Unscaled.X = -1 Or ProbNotB.Label.Unscaled.Y = -1 Then
            DefaultAnnotProbNotBPosn()
        Else
            If ProbNotB.Label.ScaleA.X = -1 Then ProbNotB.Label.ScaleA.MidX = ProbNotB.Label.Unscaled.MidX
            If ProbNotB.Label.ScaleA.Y = -1 Then ProbNotB.Label.ScaleA.Y = ProbNotB.Label.Unscaled.Y
            If ProbNotB.Label.ScaleB.X = -1 Then ProbNotB.Label.ScaleB.MidX = ProbNotB.Label.Unscaled.MidX
            If ProbNotB.Label.ScaleB.Y = -1 Then ProbNotB.Label.ScaleB.Y = ProbNotB.Label.Unscaled.Y
            If ProbNotB.Label.ScaleAB.X = -1 Then ProbNotB.Label.ScaleAB.MidX = ProbNotB.Label.Unscaled.MidX
            If ProbNotB.Label.ScaleAB.Y = -1 Then ProbNotB.Label.ScaleAB.Y = ProbNotB.Label.Unscaled.Y
        End If
        If ProbAandB.Label.Unscaled.X = -1 Or ProbAandB.Label.Unscaled.Y = -1 Then
            DefaultAnnotProbAandBPosn()
        Else
            If ProbAandB.Label.ScaleA.X = -1 Then ProbAandB.Label.ScaleA.MidX = ProbAandB.Label.Unscaled.MidX
            If ProbAandB.Label.ScaleA.Y = -1 Then ProbAandB.Label.ScaleA.Y = ProbAandB.Label.Unscaled.Y
            If ProbAandB.Label.ScaleB.X = -1 Then ProbAandB.Label.ScaleB.MidX = ProbAandB.Label.Unscaled.MidX
            If ProbAandB.Label.ScaleB.Y = -1 Then ProbAandB.Label.ScaleB.Y = ProbAandB.Label.Unscaled.Y
            If ProbAandB.Label.ScaleAB.X = -1 Then ProbAandB.Label.ScaleAB.MidX = ProbAandB.Label.Unscaled.MidX
            If ProbAandB.Label.ScaleAB.Y = -1 Then ProbAandB.Label.ScaleAB.Y = ProbAandB.Label.Unscaled.Y
        End If
        If ProbAandNotB.Label.Unscaled.X = -1 Or ProbAandNotB.Label.Unscaled.Y = -1 Then
            DefaultAnnotProbAandNotBPosn()
        Else
            If ProbAandNotB.Label.ScaleA.X = -1 Then ProbAandNotB.Label.ScaleA.MidX = ProbAandNotB.Label.Unscaled.MidX
            If ProbAandNotB.Label.ScaleA.Y = -1 Then ProbAandNotB.Label.ScaleA.Y = ProbAandNotB.Label.Unscaled.Y
            If ProbAandNotB.Label.ScaleB.X = -1 Then ProbAandNotB.Label.ScaleB.MidX = ProbAandNotB.Label.Unscaled.MidX
            If ProbAandNotB.Label.ScaleB.Y = -1 Then ProbAandNotB.Label.ScaleB.Y = ProbAandNotB.Label.Unscaled.Y
            If ProbAandNotB.Label.ScaleAB.X = -1 Then ProbAandNotB.Label.ScaleAB.MidX = ProbAandNotB.Label.Unscaled.MidX
            If ProbAandNotB.Label.ScaleAB.Y = -1 Then ProbAandNotB.Label.ScaleAB.Y = ProbAandNotB.Label.Unscaled.Y
        End If
        If ProbNotAandB.Label.Unscaled.X = -1 Or ProbNotAandB.Label.Unscaled.Y = -1 Then
            DefaultAnnotProbNotAandBPosn()
        Else
            If ProbNotAandB.Label.ScaleA.X = -1 Then ProbNotAandB.Label.ScaleA.MidX = ProbNotAandB.Label.Unscaled.MidX
            If ProbNotAandB.Label.ScaleA.Y = -1 Then ProbNotAandB.Label.ScaleA.Y = ProbNotAandB.Label.Unscaled.Y
            If ProbNotAandB.Label.ScaleB.X = -1 Then ProbNotAandB.Label.ScaleB.MidX = ProbNotAandB.Label.Unscaled.MidX
            If ProbNotAandB.Label.ScaleB.Y = -1 Then ProbNotAandB.Label.ScaleB.Y = ProbNotAandB.Label.Unscaled.Y
            If ProbNotAandB.Label.ScaleAB.X = -1 Then ProbNotAandB.Label.ScaleAB.MidX = ProbNotAandB.Label.Unscaled.MidX
            If ProbNotAandB.Label.ScaleAB.Y = -1 Then ProbNotAandB.Label.ScaleAB.Y = ProbNotAandB.Label.Unscaled.Y
        End If
        If ProbNotAandNotB.Label.Unscaled.X = -1 Or ProbNotAandNotB.Label.Unscaled.Y = -1 Then
            DefaultAnnotProbNotAandNotBPosn()
        Else
            If ProbNotAandNotB.Label.ScaleA.X = -1 Then ProbNotAandNotB.Label.ScaleA.X = ProbNotAandNotB.Label.Unscaled.X
            If ProbNotAandNotB.Label.ScaleA.Y = -1 Then ProbNotAandNotB.Label.ScaleA.Y = ProbNotAandNotB.Label.Unscaled.Y
            If ProbNotAandNotB.Label.ScaleB.X = -1 Then ProbNotAandNotB.Label.ScaleB.X = ProbNotAandNotB.Label.Unscaled.X
            If ProbNotAandNotB.Label.ScaleB.Y = -1 Then ProbNotAandNotB.Label.ScaleB.Y = ProbNotAandNotB.Label.Unscaled.Y
            If ProbNotAandNotB.Label.ScaleAB.X = -1 Then ProbNotAandNotB.Label.ScaleAB.X = ProbNotAandNotB.Label.Unscaled.X
            If ProbNotAandNotB.Label.ScaleAB.Y = -1 Then ProbNotAandNotB.Label.ScaleAB.Y = ProbNotAandNotB.Label.Unscaled.Y
        End If

        'Check sample count annotations:
        If SampsA.Label.Unscaled.X = -1 Or SampsA.Label.Unscaled.Y = -1 Then
            DefaultAnnotSampsAPosn()
        Else
            If SampsA.Label.ScaleA.X = -1 Then SampsA.Label.ScaleA.MidX = SampsA.Label.Unscaled.MidX
            If SampsA.Label.ScaleA.Y = -1 Then SampsA.Label.ScaleA.Y = SampsA.Label.Unscaled.Y
            If SampsA.Label.ScaleB.X = -1 Then SampsA.Label.ScaleB.MidX = SampsA.Label.Unscaled.MidX
            If SampsA.Label.ScaleB.Y = -1 Then SampsA.Label.ScaleB.Y = SampsA.Label.Unscaled.Y
            If SampsA.Label.ScaleAB.X = -1 Then SampsA.Label.ScaleAB.MidX = SampsA.Label.Unscaled.MidX
            If SampsA.Label.ScaleAB.Y = -1 Then SampsA.Label.ScaleAB.Y = SampsA.Label.Unscaled.Y
        End If
        If SampsNotA.Label.Unscaled.X = -1 Or SampsNotA.Label.Unscaled.Y = -1 Then
            DefaultAnnotSampsNotAPosn()
        Else
            If SampsNotA.Label.ScaleA.X = -1 Then SampsNotA.Label.ScaleA.MidX = SampsNotA.Label.Unscaled.MidX
            If SampsNotA.Label.ScaleA.Y = -1 Then SampsNotA.Label.ScaleA.Y = SampsNotA.Label.Unscaled.Y
            If SampsNotA.Label.ScaleB.X = -1 Then SampsNotA.Label.ScaleB.MidX = SampsNotA.Label.Unscaled.MidX
            If SampsNotA.Label.ScaleB.Y = -1 Then SampsNotA.Label.ScaleB.Y = SampsNotA.Label.Unscaled.Y
            If SampsNotA.Label.ScaleAB.X = -1 Then SampsNotA.Label.ScaleAB.MidX = SampsNotA.Label.Unscaled.MidX
            If SampsNotA.Label.ScaleAB.Y = -1 Then SampsNotA.Label.ScaleAB.Y = SampsNotA.Label.Unscaled.Y
        End If
        If SampsB.Label.Unscaled.X = -1 Or SampsB.Label.Unscaled.Y = -1 Then
            DefaultAnnotSampsBPosn()
        Else
            If SampsB.Label.ScaleA.X = -1 Then SampsB.Label.ScaleA.MidX = SampsB.Label.Unscaled.MidX
            If SampsB.Label.ScaleA.Y = -1 Then SampsB.Label.ScaleA.Y = SampsB.Label.Unscaled.Y
            If SampsB.Label.ScaleB.X = -1 Then SampsB.Label.ScaleB.MidX = SampsB.Label.Unscaled.MidX
            If SampsB.Label.ScaleB.Y = -1 Then SampsB.Label.ScaleB.Y = SampsB.Label.Unscaled.Y
            If SampsB.Label.ScaleAB.X = -1 Then SampsB.Label.ScaleAB.MidX = SampsB.Label.Unscaled.MidX
            If SampsB.Label.ScaleAB.Y = -1 Then SampsB.Label.ScaleAB.Y = SampsB.Label.Unscaled.Y
        End If
        If SampsNotB.Label.Unscaled.X = -1 Or SampsNotB.Label.Unscaled.Y = -1 Then
            DefaultAnnotSampsNotBPosn()
        Else
            If SampsNotB.Label.ScaleA.X = -1 Then SampsNotB.Label.ScaleA.MidX = SampsNotB.Label.Unscaled.MidX
            If SampsNotB.Label.ScaleA.Y = -1 Then SampsNotB.Label.ScaleA.Y = SampsNotB.Label.Unscaled.Y
            If SampsNotB.Label.ScaleB.X = -1 Then SampsNotB.Label.ScaleB.MidX = SampsNotB.Label.Unscaled.MidX
            If SampsNotB.Label.ScaleB.Y = -1 Then SampsNotB.Label.ScaleB.Y = SampsNotB.Label.Unscaled.Y
            If SampsNotB.Label.ScaleAB.X = -1 Then SampsNotB.Label.ScaleAB.MidX = SampsNotB.Label.Unscaled.MidX
            If SampsNotB.Label.ScaleAB.Y = -1 Then SampsNotB.Label.ScaleAB.Y = SampsNotB.Label.Unscaled.Y
        End If
        If SampsAandB.Label.Unscaled.X = -1 Or SampsAandB.Label.Unscaled.Y = -1 Then
            DefaultAnnotSampsAandBPosn()
        Else
            If SampsAandB.Label.ScaleA.X = -1 Then SampsAandB.Label.ScaleA.MidX = SampsAandB.Label.Unscaled.MidX
            If SampsAandB.Label.ScaleA.Y = -1 Then SampsAandB.Label.ScaleA.Y = SampsAandB.Label.Unscaled.Y
            If SampsAandB.Label.ScaleB.X = -1 Then SampsAandB.Label.ScaleB.MidX = SampsAandB.Label.Unscaled.MidX
            If SampsAandB.Label.ScaleB.Y = -1 Then SampsAandB.Label.ScaleB.Y = SampsAandB.Label.Unscaled.Y
            If SampsAandB.Label.ScaleAB.X = -1 Then SampsAandB.Label.ScaleAB.MidX = SampsAandB.Label.Unscaled.MidX
            If SampsAandB.Label.ScaleAB.Y = -1 Then SampsAandB.Label.ScaleAB.Y = SampsAandB.Label.Unscaled.Y
        End If
        If SampsAandNotB.Label.Unscaled.X = -1 Or SampsAandNotB.Label.Unscaled.Y = -1 Then
            DefaultAnnotSampsAandNotBPosn()
        Else
            If SampsAandNotB.Label.ScaleA.X = -1 Then SampsAandNotB.Label.ScaleA.MidX = SampsAandNotB.Label.Unscaled.MidX
            If SampsAandNotB.Label.ScaleA.Y = -1 Then SampsAandNotB.Label.ScaleA.Y = SampsAandNotB.Label.Unscaled.Y
            If SampsAandNotB.Label.ScaleB.X = -1 Then SampsAandNotB.Label.ScaleB.MidX = SampsAandNotB.Label.Unscaled.MidX
            If SampsAandNotB.Label.ScaleB.Y = -1 Then SampsAandNotB.Label.ScaleB.Y = SampsAandNotB.Label.Unscaled.Y
            If SampsAandNotB.Label.ScaleAB.X = -1 Then SampsAandNotB.Label.ScaleAB.MidX = SampsAandNotB.Label.Unscaled.MidX
            If SampsAandNotB.Label.ScaleAB.Y = -1 Then SampsAandNotB.Label.ScaleAB.Y = SampsAandNotB.Label.Unscaled.Y
        End If
        If SampsNotAandB.Label.Unscaled.X = -1 Or SampsNotAandB.Label.Unscaled.Y = -1 Then
            DefaultAnnotSampsNotAandBPosn()
        Else
            If SampsNotAandB.Label.ScaleA.X = -1 Then SampsNotAandB.Label.ScaleA.MidX = SampsNotAandB.Label.Unscaled.MidX
            If SampsNotAandB.Label.ScaleA.Y = -1 Then SampsNotAandB.Label.ScaleA.Y = SampsNotAandB.Label.Unscaled.Y
            If SampsNotAandB.Label.ScaleB.X = -1 Then SampsNotAandB.Label.ScaleB.MidX = SampsNotAandB.Label.Unscaled.MidX
            If SampsNotAandB.Label.ScaleB.Y = -1 Then SampsNotAandB.Label.ScaleB.Y = SampsNotAandB.Label.Unscaled.Y
            If SampsNotAandB.Label.ScaleAB.X = -1 Then SampsNotAandB.Label.ScaleAB.MidX = SampsNotAandB.Label.Unscaled.MidX
            If SampsNotAandB.Label.ScaleAB.Y = -1 Then SampsNotAandB.Label.ScaleAB.Y = SampsNotAandB.Label.Unscaled.Y
        End If
        If SampsNotAandNotB.Label.Unscaled.X = -1 Or SampsNotAandNotB.Label.Unscaled.Y = -1 Then
            DefaultAnnotSampsNotAandNotBPosn()
        Else
            If SampsNotAandNotB.Label.ScaleA.X = -1 Then SampsNotAandNotB.Label.ScaleA.X = SampsNotAandNotB.Label.Unscaled.X
            If SampsNotAandNotB.Label.ScaleA.Y = -1 Then SampsNotAandNotB.Label.ScaleA.Y = SampsNotAandNotB.Label.Unscaled.Y
            If SampsNotAandNotB.Label.ScaleB.X = -1 Then SampsNotAandNotB.Label.ScaleB.X = SampsNotAandNotB.Label.Unscaled.X
            If SampsNotAandNotB.Label.ScaleB.Y = -1 Then SampsNotAandNotB.Label.ScaleB.Y = SampsNotAandNotB.Label.Unscaled.Y
            If SampsNotAandNotB.Label.ScaleAB.X = -1 Then SampsNotAandNotB.Label.ScaleAB.X = SampsNotAandNotB.Label.Unscaled.X
            If SampsNotAandNotB.Label.ScaleAB.Y = -1 Then SampsNotAandNotB.Label.ScaleAB.Y = SampsNotAandNotB.Label.Unscaled.Y
        End If

        'Check sample count annotations:
        'If AnnotSampleSize.X = -1 Or AnnotSampleSize.Y = -1 Then DefaultAnnotSampleSizePosn()
        'If AnnotSampleSize.X = -1 Or AnnotSampleSize.Y = -1 Or AnnotConditionalSampleSize.X = -1 Or AnnotConditionalSampleSize.Y = -1 Then DefaultAnnotSampleSizePosn()
        If AnnotSampleSize.Unscaled.X = -1 Or AnnotSampleSize.Unscaled.Y = -1 Or AnnotConditionalSampleSize.Unscaled.X = -1 Or AnnotConditionalSampleSize.Unscaled.Y = -1 Then DefaultAnnotSampleSizePosn()

        'Check Condition annotation:
        Dim Recalc As Boolean = False
        If AnnotCondition.None.X = -1 Then Recalc = True
        If AnnotCondition.None.Y = -1 Then Recalc = True
        If AnnotCondition.EventATrue.X = -1 Then Recalc = True
        If AnnotCondition.EventATrue.Y = -1 Then Recalc = True
        If AnnotCondition.EventAFalse.X = -1 Then Recalc = True
        If AnnotCondition.EventAFalse.Y = -1 Then Recalc = True
        If AnnotCondition.EventBTrue.X = -1 Then Recalc = True
        If AnnotCondition.EventBTrue.Y = -1 Then Recalc = True
        If AnnotCondition.EventBFalse.X = -1 Then Recalc = True
        If AnnotCondition.EventBFalse.Y = -1 Then Recalc = True
        If Recalc Then DefaultAnnotConditionPosn()

    End Sub

    Public Sub DefaultAnnotProbAPosn()
        'Get the default annotation position for the Event A probability.
        ProbA.Label.Unscaled.MidX = EventA.Unscaled.XMin + (EventA.Unscaled.XMax - EventA.Unscaled.XMin) / 2 'Set the X mid point in the middle of the Event A shape.
        ProbA.Label.Unscaled.Y = EventA.Unscaled.YMin + 10 '10 pixels below the top of the Event A shape.

        'Copy the unscaled location to the scaled location versions:
        ProbA.Label.ScaleA.MidX = ProbA.Label.Unscaled.MidX
        ProbA.Label.ScaleA.Y = ProbA.Label.Unscaled.Y
        ProbA.Label.ScaleB.MidX = ProbA.Label.Unscaled.MidX
        ProbA.Label.ScaleB.Y = ProbA.Label.Unscaled.Y
        ProbA.Label.ScaleAB.MidX = ProbA.Label.Unscaled.MidX
        ProbA.Label.ScaleAB.Y = ProbA.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        ProbA.GivenA.Label.Unscaled.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenA.Label.Unscaled.Y = ProbA.Label.Unscaled.Y
        ProbA.GivenA.Label.ScaleA.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenA.Label.ScaleA.Y = ProbA.Label.Unscaled.Y
        ProbA.GivenA.Label.ScaleB.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenA.Label.ScaleB.Y = ProbA.Label.Unscaled.Y
        ProbA.GivenA.Label.ScaleAB.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenA.Label.ScaleAB.Y = ProbA.Label.Unscaled.Y

        ProbA.GivenNotA.Label.Unscaled.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenNotA.Label.Unscaled.Y = ProbA.Label.Unscaled.Y
        ProbA.GivenNotA.Label.ScaleA.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenNotA.Label.ScaleA.Y = ProbA.Label.Unscaled.Y
        ProbA.GivenNotA.Label.ScaleB.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenNotA.Label.ScaleB.Y = ProbA.Label.Unscaled.Y
        ProbA.GivenNotA.Label.ScaleAB.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenNotA.Label.ScaleAB.Y = ProbA.Label.Unscaled.Y

        ProbA.GivenB.Label.Unscaled.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenB.Label.Unscaled.Y = ProbA.Label.Unscaled.Y
        ProbA.GivenB.Label.ScaleA.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenB.Label.ScaleA.Y = ProbA.Label.Unscaled.Y
        ProbA.GivenB.Label.ScaleB.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenB.Label.ScaleB.Y = ProbA.Label.Unscaled.Y
        ProbA.GivenB.Label.ScaleAB.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenB.Label.ScaleAB.Y = ProbA.Label.Unscaled.Y

        ProbA.GivenNotB.Label.Unscaled.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenNotB.Label.Unscaled.Y = ProbA.Label.Unscaled.Y
        ProbA.GivenNotB.Label.ScaleA.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenNotB.Label.ScaleA.Y = ProbA.Label.Unscaled.Y
        ProbA.GivenNotB.Label.ScaleB.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenNotB.Label.ScaleB.Y = ProbA.Label.Unscaled.Y
        ProbA.GivenNotB.Label.ScaleAB.MidX = ProbA.Label.Unscaled.MidX
        ProbA.GivenNotB.Label.ScaleAB.Y = ProbA.Label.Unscaled.Y

    End Sub

    'Public Sub DefaultAnnotProbAPosn(ByRef ProbCoord As Coord)
    '    'Get the default position for the Event A probability annotation.
    '    ProbCoord.MidX = EventA.XMin + (EventA.XMax - EventA.XMin) / 2 'Set the X mid point in the middle of the Event A shape.
    '    ProbCoord.Y = EventA.YMin + 10 '10 pixels below the top of the Event A shape.
    'End Sub

    Public Sub DefaultAnnotSampsAPosn()
        'Get the default annotation position for the Event A sample count.

        'Dim TextHeight As Integer = TextRenderer.MeasureText(SampsA.Label.Text & SampString(ProbA.Value * SampleSize), SampsA.Label.Font).Height
        Dim TextHeight As Integer = TextRenderer.MeasureText(SampsA.Label.Text & SampString(ProbA.Value * SampleSize.Value), SampsA.Label.Font).Height

        If ProbA.Label.Unscaled.X = -1 Then
            SampsA.Label.Unscaled.MidX = EventA.Unscaled.XMin + (EventA.Unscaled.XMax - EventA.Unscaled.XMin) / 2 'Set the X mid point in the middle of the Event A shape.
        Else
            SampsA.Label.Unscaled.MidX = ProbA.Label.Unscaled.MidX 'Set the X mid point same as AnnotProbAX.
        End If

        If ProbA.Label.Unscaled.Y = -1 Then
            SampsA.Label.Unscaled.Y = EventA.Unscaled.YMin + 10 + TextHeight  'Below the Event A probability annotation.
        Else
            SampsA.Label.Unscaled.Y = ProbA.Label.Unscaled.Y + TextHeight  'Below the Event A probability annotation.
        End If

        'Copy the unscaled location to the scaled location versions:
        SampsA.Label.ScaleA.MidX = SampsA.Label.Unscaled.MidX
        SampsA.Label.ScaleA.Y = SampsA.Label.Unscaled.Y
        SampsA.Label.ScaleB.MidX = SampsA.Label.Unscaled.MidX
        SampsA.Label.ScaleB.Y = SampsA.Label.Unscaled.Y
        SampsA.Label.ScaleAB.MidX = SampsA.Label.Unscaled.MidX
        SampsA.Label.ScaleAB.Y = SampsA.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        SampsA.GivenA.Label.Unscaled.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenA.Label.Unscaled.Y = SampsA.Label.Unscaled.Y
        SampsA.GivenA.Label.ScaleA.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenA.Label.ScaleA.Y = SampsA.Label.Unscaled.Y
        SampsA.GivenA.Label.ScaleB.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenA.Label.ScaleB.Y = SampsA.Label.Unscaled.Y
        SampsA.GivenA.Label.ScaleAB.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenA.Label.ScaleAB.Y = SampsA.Label.Unscaled.Y

        SampsA.GivenNotA.Label.Unscaled.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenNotA.Label.Unscaled.Y = SampsA.Label.Unscaled.Y
        SampsA.GivenNotA.Label.ScaleA.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenNotA.Label.ScaleA.Y = SampsA.Label.Unscaled.Y
        SampsA.GivenNotA.Label.ScaleB.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenNotA.Label.ScaleB.Y = SampsA.Label.Unscaled.Y
        SampsA.GivenNotA.Label.ScaleAB.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenNotA.Label.ScaleAB.Y = SampsA.Label.Unscaled.Y

        SampsA.GivenB.Label.Unscaled.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenB.Label.Unscaled.Y = SampsA.Label.Unscaled.Y
        SampsA.GivenB.Label.ScaleA.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenB.Label.ScaleA.Y = SampsA.Label.Unscaled.Y
        SampsA.GivenB.Label.ScaleB.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenB.Label.ScaleB.Y = SampsA.Label.Unscaled.Y
        SampsA.GivenB.Label.ScaleAB.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenB.Label.ScaleAB.Y = SampsA.Label.Unscaled.Y

        SampsA.GivenNotB.Label.Unscaled.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenNotB.Label.Unscaled.Y = SampsA.Label.Unscaled.Y
        SampsA.GivenNotB.Label.ScaleA.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenNotB.Label.ScaleA.Y = SampsA.Label.Unscaled.Y
        SampsA.GivenNotB.Label.ScaleB.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenNotB.Label.ScaleB.Y = SampsA.Label.Unscaled.Y
        SampsA.GivenNotB.Label.ScaleAB.MidX = SampsA.Label.Unscaled.MidX
        SampsA.GivenNotB.Label.ScaleAB.Y = SampsA.Label.Unscaled.Y

    End Sub

    'Public Sub DefaultAnnotSampsAPosn(ByRef ProbCoord As Coord, ByRef SampsCoord As Coord)

    'End Sub

    Public Sub DefaultAnnotProbNotAPosn()
        'Get the default annotation position for the Event Not A probability.
        ProbNotA.Label.Unscaled.MidX = EventA.Unscaled.XMin + (EventA.Unscaled.XMax - EventA.Unscaled.XMin) / 2 'Set the X mid point in the middle of the Event A shape.
        ProbNotA.Label.Unscaled.Y = EventA.Unscaled.YMax + 10 '10 pixels below the bottom of the Event A shape.

        'Copy the unscaled location to the scaled location versions:
        ProbNotA.Label.ScaleA.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.Label.ScaleA.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.Label.ScaleB.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.Label.ScaleB.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.Label.ScaleAB.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.Label.ScaleAB.Y = ProbNotA.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        ProbNotA.GivenA.Label.Unscaled.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenA.Label.Unscaled.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.GivenA.Label.ScaleA.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenA.Label.ScaleA.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.GivenA.Label.ScaleB.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenA.Label.ScaleB.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.GivenA.Label.ScaleAB.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenA.Label.ScaleAB.Y = ProbNotA.Label.Unscaled.Y

        ProbNotA.GivenNotA.Label.Unscaled.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenNotA.Label.Unscaled.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.GivenNotA.Label.ScaleA.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenNotA.Label.ScaleA.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.GivenNotA.Label.ScaleB.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenNotA.Label.ScaleB.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.GivenNotA.Label.ScaleAB.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenNotA.Label.ScaleAB.Y = ProbNotA.Label.Unscaled.Y

        ProbNotA.GivenB.Label.Unscaled.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenB.Label.Unscaled.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.GivenB.Label.ScaleA.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenB.Label.ScaleA.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.GivenB.Label.ScaleB.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenB.Label.ScaleB.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.GivenB.Label.ScaleAB.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenB.Label.ScaleAB.Y = ProbNotA.Label.Unscaled.Y

        ProbNotA.GivenNotB.Label.Unscaled.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenNotB.Label.Unscaled.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.GivenNotB.Label.ScaleA.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenNotB.Label.ScaleA.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.GivenNotB.Label.ScaleB.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenNotB.Label.ScaleB.Y = ProbNotA.Label.Unscaled.Y
        ProbNotA.GivenNotB.Label.ScaleAB.MidX = ProbNotA.Label.Unscaled.MidX
        ProbNotA.GivenNotB.Label.ScaleAB.Y = ProbNotA.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotSampsNotAPosn()
        'Get the default annotation position for the Event Not A sample count.

        'Dim TextHeight As Integer = TextRenderer.MeasureText(SampsNotA.Label.Text & SampString((1 - ProbA.Value) * SampleSize), SampsNotA.Label.Font).Height
        Dim TextHeight As Integer = TextRenderer.MeasureText(SampsNotA.Label.Text & SampString((1 - ProbA.Value) * SampleSize.Value), SampsNotA.Label.Font).Height

        If ProbNotA.Label.Unscaled.X = -1 Then
            SampsNotA.Label.Unscaled.MidX = EventA.Unscaled.XMin + (EventA.Unscaled.XMax - EventA.Unscaled.XMin) / 2 'Set the X mid point in the middle of the Event A shape.
        Else
            SampsNotA.Label.Unscaled.MidX = ProbNotA.Label.Unscaled.MidX 'Set the X mid point same as AnnotProbNotAX
        End If

        If ProbNotA.Label.Unscaled.Y = -1 Then
            SampsNotA.Label.Unscaled.Y = EventA.Unscaled.YMax + 10 + TextHeight 'Below the Event Not A probability annotation.
        Else
            SampsNotA.Label.Unscaled.Y = ProbNotA.Label.Unscaled.Y + TextHeight  'Below the Event Not A probability annotation.
        End If

        'Copy the unscaled location to the scaled location versions:
        SampsNotA.Label.ScaleA.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.Label.ScaleA.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.Label.ScaleB.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.Label.ScaleB.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.Label.ScaleAB.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.Label.ScaleAB.Y = SampsNotA.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        SampsNotA.GivenA.Label.Unscaled.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenA.Label.Unscaled.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.GivenA.Label.ScaleA.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenA.Label.ScaleA.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.GivenA.Label.ScaleB.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenA.Label.ScaleB.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.GivenA.Label.ScaleAB.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenA.Label.ScaleAB.Y = SampsNotA.Label.Unscaled.Y

        SampsNotA.GivenNotA.Label.Unscaled.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenNotA.Label.Unscaled.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.GivenNotA.Label.ScaleA.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenNotA.Label.ScaleA.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.GivenNotA.Label.ScaleB.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenNotA.Label.ScaleB.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.GivenNotA.Label.ScaleAB.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenNotA.Label.ScaleAB.Y = SampsNotA.Label.Unscaled.Y

        SampsNotA.GivenB.Label.Unscaled.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenB.Label.Unscaled.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.GivenB.Label.ScaleA.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenB.Label.ScaleA.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.GivenB.Label.ScaleB.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenB.Label.ScaleB.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.GivenB.Label.ScaleAB.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenB.Label.ScaleAB.Y = SampsNotA.Label.Unscaled.Y

        SampsNotA.GivenNotB.Label.Unscaled.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenNotB.Label.Unscaled.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.GivenNotB.Label.ScaleA.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenNotB.Label.ScaleA.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.GivenNotB.Label.ScaleB.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenNotB.Label.ScaleB.Y = SampsNotA.Label.Unscaled.Y
        SampsNotA.GivenNotB.Label.ScaleAB.MidX = SampsNotA.Label.Unscaled.MidX
        SampsNotA.GivenNotB.Label.ScaleAB.Y = SampsNotA.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotProbBPosn()
        'Get the default annotation position for the Event B probability.

        ProbB.Label.Unscaled.MidX = EventB.Unscaled.XMin + (EventB.Unscaled.XMax - EventB.Unscaled.XMin) / 2 'Set the X mid point in the middle of the Event B shape.
        ProbB.Label.Unscaled.Y = EventB.Unscaled.YMin + 10 '10 pixels below the top of the Event B shape.

        'Copy the unscaled location to the scaled location versions:
        ProbB.Label.ScaleA.MidX = ProbB.Label.Unscaled.MidX
        ProbB.Label.ScaleA.Y = ProbB.Label.Unscaled.Y
        ProbB.Label.ScaleB.MidX = ProbB.Label.Unscaled.MidX
        ProbB.Label.ScaleB.Y = ProbB.Label.Unscaled.Y
        ProbB.Label.ScaleAB.MidX = ProbB.Label.Unscaled.MidX
        ProbB.Label.ScaleAB.Y = ProbB.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        ProbB.GivenA.Label.Unscaled.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenA.Label.Unscaled.Y = ProbB.Label.Unscaled.Y
        ProbB.GivenA.Label.ScaleA.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenA.Label.ScaleA.Y = ProbB.Label.Unscaled.Y
        ProbB.GivenA.Label.ScaleB.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenA.Label.ScaleB.Y = ProbB.Label.Unscaled.Y
        ProbB.GivenA.Label.ScaleAB.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenA.Label.ScaleAB.Y = ProbB.Label.Unscaled.Y

        ProbB.GivenNotA.Label.Unscaled.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenNotA.Label.Unscaled.Y = ProbB.Label.Unscaled.Y
        ProbB.GivenNotA.Label.ScaleA.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenNotA.Label.ScaleA.Y = ProbB.Label.Unscaled.Y
        ProbB.GivenNotA.Label.ScaleB.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenNotA.Label.ScaleB.Y = ProbB.Label.Unscaled.Y
        ProbB.GivenNotA.Label.ScaleAB.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenNotA.Label.ScaleAB.Y = ProbB.Label.Unscaled.Y

        ProbB.GivenB.Label.Unscaled.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenB.Label.Unscaled.Y = ProbB.Label.Unscaled.Y
        ProbB.GivenB.Label.ScaleA.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenB.Label.ScaleA.Y = ProbB.Label.Unscaled.Y
        ProbB.GivenB.Label.ScaleB.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenB.Label.ScaleB.Y = ProbB.Label.Unscaled.Y
        ProbB.GivenB.Label.ScaleAB.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenB.Label.ScaleAB.Y = ProbB.Label.Unscaled.Y

        ProbB.GivenNotB.Label.Unscaled.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenNotB.Label.Unscaled.Y = ProbB.Label.Unscaled.Y
        ProbB.GivenNotB.Label.ScaleA.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenNotB.Label.ScaleA.Y = ProbB.Label.Unscaled.Y
        ProbB.GivenNotB.Label.ScaleB.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenNotB.Label.ScaleB.Y = ProbB.Label.Unscaled.Y
        ProbB.GivenNotB.Label.ScaleAB.MidX = ProbB.Label.Unscaled.MidX
        ProbB.GivenNotB.Label.ScaleAB.Y = ProbB.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotSampsBPosn()
        'Get the default annotation position for the Event B sample count.

        'Dim TextHeight As Integer = TextRenderer.MeasureText(SampsB.Label.Text & SampString(ProbB.Value * SampleSize), SampsB.Label.Font).Height
        Dim TextHeight As Integer = TextRenderer.MeasureText(SampsB.Label.Text & SampString(ProbB.Value * SampleSize.Value), SampsB.Label.Font).Height

        If ProbB.Label.Unscaled.X = -1 Then
            SampsB.Label.Unscaled.MidX = EventB.Unscaled.XMin + (EventB.Unscaled.XMax - EventB.Unscaled.XMin) / 2 'Set the X mid point in the middle of the Event B shape.
        Else
            SampsB.Label.Unscaled.MidX = ProbB.Label.Unscaled.MidX 'Set the X mid point same as AnnotProbBX.
        End If

        If ProbB.Label.Unscaled.Y = -1 Then
            SampsB.Label.Unscaled.Y = EventB.Unscaled.YMin + 10 + TextHeight  'Below the Event B probability annotation.
        Else
            SampsB.Label.Unscaled.Y = ProbB.Label.Unscaled.Y + TextHeight  'Below the Event B probability annotation.
        End If

        'Copy the unscaled location to the scaled location versions:
        SampsB.Label.ScaleA.MidX = SampsB.Label.Unscaled.MidX
        SampsB.Label.ScaleA.Y = SampsB.Label.Unscaled.Y
        SampsB.Label.ScaleB.MidX = SampsB.Label.Unscaled.MidX
        SampsB.Label.ScaleB.Y = SampsB.Label.Unscaled.Y
        SampsB.Label.ScaleAB.MidX = SampsB.Label.Unscaled.MidX
        SampsB.Label.ScaleAB.Y = SampsB.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        SampsB.GivenA.Label.Unscaled.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenA.Label.Unscaled.Y = SampsB.Label.Unscaled.Y
        SampsB.GivenA.Label.ScaleA.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenA.Label.ScaleA.Y = SampsB.Label.Unscaled.Y
        SampsB.GivenA.Label.ScaleB.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenA.Label.ScaleB.Y = SampsB.Label.Unscaled.Y
        SampsB.GivenA.Label.ScaleAB.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenA.Label.ScaleAB.Y = SampsB.Label.Unscaled.Y

        SampsB.GivenNotA.Label.Unscaled.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenNotA.Label.Unscaled.Y = SampsB.Label.Unscaled.Y
        SampsB.GivenNotA.Label.ScaleA.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenNotA.Label.ScaleA.Y = SampsB.Label.Unscaled.Y
        SampsB.GivenNotA.Label.ScaleB.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenNotA.Label.ScaleB.Y = SampsB.Label.Unscaled.Y
        SampsB.GivenNotA.Label.ScaleAB.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenNotA.Label.ScaleAB.Y = SampsB.Label.Unscaled.Y

        SampsB.GivenB.Label.Unscaled.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenB.Label.Unscaled.Y = SampsB.Label.Unscaled.Y
        SampsB.GivenB.Label.ScaleA.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenB.Label.ScaleA.Y = SampsB.Label.Unscaled.Y
        SampsB.GivenB.Label.ScaleB.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenB.Label.ScaleB.Y = SampsB.Label.Unscaled.Y
        SampsB.GivenB.Label.ScaleAB.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenB.Label.ScaleAB.Y = SampsB.Label.Unscaled.Y

        SampsB.GivenNotB.Label.Unscaled.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenNotB.Label.Unscaled.Y = SampsB.Label.Unscaled.Y
        SampsB.GivenNotB.Label.ScaleA.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenNotB.Label.ScaleA.Y = SampsB.Label.Unscaled.Y
        SampsB.GivenNotB.Label.ScaleB.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenNotB.Label.ScaleB.Y = SampsB.Label.Unscaled.Y
        SampsB.GivenNotB.Label.ScaleAB.MidX = SampsB.Label.Unscaled.MidX
        SampsB.GivenNotB.Label.ScaleAB.Y = SampsB.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotProbNotBPosn()
        'Get the default annotation position for the Event Not B probability.
        ProbNotB.Label.Unscaled.MidX = EventB.Unscaled.XMin + (EventB.Unscaled.XMax - EventB.Unscaled.XMin) / 2 'Set the X mid point in the middle of the Event B shape.
        ProbNotB.Label.Unscaled.Y = EventB.Unscaled.YMax + 10 '10 pixels below the bottom of the Event B shape.

        'Copy the unscaled location to the scaled location versions:
        ProbNotB.Label.ScaleA.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.Label.ScaleA.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.Label.ScaleB.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.Label.ScaleB.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.Label.ScaleAB.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.Label.ScaleAB.Y = ProbNotB.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        ProbNotB.GivenA.Label.Unscaled.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenA.Label.Unscaled.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.GivenA.Label.ScaleA.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenA.Label.ScaleA.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.GivenA.Label.ScaleB.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenA.Label.ScaleB.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.GivenA.Label.ScaleAB.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenA.Label.ScaleAB.Y = ProbNotB.Label.Unscaled.Y

        ProbNotB.GivenNotA.Label.Unscaled.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenNotA.Label.Unscaled.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.GivenNotA.Label.ScaleA.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenNotA.Label.ScaleA.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.GivenNotA.Label.ScaleB.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenNotA.Label.ScaleB.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.GivenNotA.Label.ScaleAB.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenNotA.Label.ScaleAB.Y = ProbNotB.Label.Unscaled.Y

        ProbNotB.GivenB.Label.Unscaled.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenB.Label.Unscaled.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.GivenB.Label.ScaleA.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenB.Label.ScaleA.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.GivenB.Label.ScaleB.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenB.Label.ScaleB.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.GivenB.Label.ScaleAB.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenB.Label.ScaleAB.Y = ProbNotB.Label.Unscaled.Y

        ProbNotB.GivenNotB.Label.Unscaled.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenNotB.Label.Unscaled.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.GivenNotB.Label.ScaleA.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenNotB.Label.ScaleA.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.GivenNotB.Label.ScaleB.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenNotB.Label.ScaleB.Y = ProbNotB.Label.Unscaled.Y
        ProbNotB.GivenNotB.Label.ScaleAB.MidX = ProbNotB.Label.Unscaled.MidX
        ProbNotB.GivenNotB.Label.ScaleAB.Y = ProbNotB.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotSampsNotBPosn()
        'Get the default annotation position for the Event Not B sample count.
        'Dim TextHeight As Integer = TextRenderer.MeasureText(SampsNotB.Label.Text & SampString((1 - ProbB.Value) * SampleSize), SampsNotB.Label.Font).Height
        Dim TextHeight As Integer = TextRenderer.MeasureText(SampsNotB.Label.Text & SampString((1 - ProbB.Value) * SampleSize.Value), SampsNotB.Label.Font).Height

        If ProbNotB.Label.Unscaled.X = -1 Then
            SampsNotB.Label.Unscaled.MidX = EventB.Unscaled.XMin + (EventB.Unscaled.XMax - EventB.Unscaled.XMin) / 2 'Set the X mid point in the middle of the Event B shape.
        Else
            SampsNotB.Label.Unscaled.MidX = ProbNotB.Label.Unscaled.MidX 'Set the X mid point same as AnnotProbNotBX
        End If

        If ProbNotB.Label.Unscaled.Y = -1 Then
            SampsNotB.Label.Unscaled.Y = EventB.Unscaled.YMax + 10 + TextHeight 'Below the Event Not B probability annotation.
        Else
            SampsNotB.Label.Unscaled.Y = ProbNotB.Label.Unscaled.Y + TextHeight  'Below the Event Not B probability annotation.
        End If

        'Copy the unscaled location to the scaled location versions:
        SampsNotB.Label.ScaleA.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.Label.ScaleA.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.Label.ScaleB.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.Label.ScaleB.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.Label.ScaleAB.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.Label.ScaleAB.Y = SampsNotB.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        SampsNotB.GivenA.Label.Unscaled.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenA.Label.Unscaled.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.GivenA.Label.ScaleA.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenA.Label.ScaleA.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.GivenA.Label.ScaleB.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenA.Label.ScaleB.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.GivenA.Label.ScaleAB.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenA.Label.ScaleAB.Y = SampsNotB.Label.Unscaled.Y

        SampsNotB.GivenNotA.Label.Unscaled.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenNotA.Label.Unscaled.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.GivenNotA.Label.ScaleA.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenNotA.Label.ScaleA.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.GivenNotA.Label.ScaleB.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenNotA.Label.ScaleB.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.GivenNotA.Label.ScaleAB.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenNotA.Label.ScaleAB.Y = SampsNotB.Label.Unscaled.Y

        SampsNotB.GivenB.Label.Unscaled.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenB.Label.Unscaled.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.GivenB.Label.ScaleA.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenB.Label.ScaleA.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.GivenB.Label.ScaleB.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenB.Label.ScaleB.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.GivenB.Label.ScaleAB.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenB.Label.ScaleAB.Y = SampsNotB.Label.Unscaled.Y

        SampsNotB.GivenNotB.Label.Unscaled.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenNotB.Label.Unscaled.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.GivenNotB.Label.ScaleA.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenNotB.Label.ScaleA.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.GivenNotB.Label.ScaleB.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenNotB.Label.ScaleB.Y = SampsNotB.Label.Unscaled.Y
        SampsNotB.GivenNotB.Label.ScaleAB.MidX = SampsNotB.Label.Unscaled.MidX
        SampsNotB.GivenNotB.Label.ScaleAB.Y = SampsNotB.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotProbAandBPosn()
        'Get the default annotation position for the A and B probability
        Dim MidAY = EventA.Unscaled.YMin + (EventA.Unscaled.YMax - EventA.Unscaled.YMin) / 2
        Dim MidBY = EventB.Unscaled.YMin + (EventB.Unscaled.YMax - EventB.Unscaled.YMin) / 2
        Dim TextHeight As Integer = TextRenderer.MeasureText(ProbAandB.Label.Text & ProbString(ProbAandB.Value), ProbAandB.Label.Font).Height
        ProbAandB.Label.Unscaled.Y = (MidAY + MidBY) / 2 - TextHeight '/ 2
        ProbAandB.Label.Unscaled.MidX = (EventA.Unscaled.XMax + EventB.Unscaled.XMin) / 2

        'Copy the unscaled location to the scaled location versions:
        ProbAandB.Label.ScaleA.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.Label.ScaleA.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.Label.ScaleB.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.Label.ScaleB.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.Label.ScaleAB.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.Label.ScaleAB.Y = ProbAandB.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        ProbAandB.GivenA.Label.Unscaled.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenA.Label.Unscaled.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.GivenA.Label.ScaleA.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenA.Label.ScaleA.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.GivenA.Label.ScaleB.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenA.Label.ScaleB.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.GivenA.Label.ScaleAB.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenA.Label.ScaleAB.Y = ProbAandB.Label.Unscaled.Y

        ProbAandB.GivenNotA.Label.Unscaled.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenNotA.Label.Unscaled.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.GivenNotA.Label.ScaleA.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenNotA.Label.ScaleA.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.GivenNotA.Label.ScaleB.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenNotA.Label.ScaleB.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.GivenNotA.Label.ScaleAB.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenNotA.Label.ScaleAB.Y = ProbAandB.Label.Unscaled.Y

        ProbAandB.GivenB.Label.Unscaled.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenB.Label.Unscaled.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.GivenB.Label.ScaleA.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenB.Label.ScaleA.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.GivenB.Label.ScaleB.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenB.Label.ScaleB.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.GivenB.Label.ScaleAB.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenB.Label.ScaleAB.Y = ProbAandB.Label.Unscaled.Y

        ProbAandB.GivenNotB.Label.Unscaled.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenNotB.Label.Unscaled.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.GivenNotB.Label.ScaleA.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenNotB.Label.ScaleA.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.GivenNotB.Label.ScaleB.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenNotB.Label.ScaleB.Y = ProbAandB.Label.Unscaled.Y
        ProbAandB.GivenNotB.Label.ScaleAB.MidX = ProbAandB.Label.Unscaled.MidX
        ProbAandB.GivenNotB.Label.ScaleAB.Y = ProbAandB.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotSampsAandBPosn()
        'Get the default annotation position for the A and B sample count
        Dim MidAY = EventA.Unscaled.YMin + (EventA.Unscaled.YMax - EventA.Unscaled.YMin) / 2
        Dim MidBY = EventB.Unscaled.YMin + (EventB.Unscaled.YMax - EventB.Unscaled.YMin) / 2
        'Dim TextHeight As Integer = TextRenderer.MeasureText(SampsAandB.Label.Text & SampString(ProbAandB.Value * SampleSize), SampsAandB.Label.Font).Height
        Dim TextHeight As Integer = TextRenderer.MeasureText(SampsAandB.Label.Text & SampString(ProbAandB.Value * SampleSize.Value), SampsAandB.Label.Font).Height

        SampsAandB.Label.Unscaled.Y = (MidAY + MidBY) / 2 '+ TextHeight / 2
        SampsAandB.Label.Unscaled.MidX = (EventA.Unscaled.XMax + EventB.Unscaled.XMin) / 2

        'Copy the unscaled location to the scaled location versions:
        SampsAandB.Label.ScaleA.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.Label.ScaleA.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.Label.ScaleB.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.Label.ScaleB.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.Label.ScaleAB.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.Label.ScaleAB.Y = SampsAandB.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        SampsAandB.GivenA.Label.Unscaled.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenA.Label.Unscaled.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.GivenA.Label.ScaleA.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenA.Label.ScaleA.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.GivenA.Label.ScaleB.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenA.Label.ScaleB.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.GivenA.Label.ScaleAB.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenA.Label.ScaleAB.Y = SampsAandB.Label.Unscaled.Y

        SampsAandB.GivenNotA.Label.Unscaled.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenNotA.Label.Unscaled.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.GivenNotA.Label.ScaleA.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenNotA.Label.ScaleA.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.GivenNotA.Label.ScaleB.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenNotA.Label.ScaleB.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.GivenNotA.Label.ScaleAB.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenNotA.Label.ScaleAB.Y = SampsAandB.Label.Unscaled.Y

        SampsAandB.GivenB.Label.Unscaled.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenB.Label.Unscaled.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.GivenB.Label.ScaleA.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenB.Label.ScaleA.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.GivenB.Label.ScaleB.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenB.Label.ScaleB.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.GivenB.Label.ScaleAB.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenB.Label.ScaleAB.Y = SampsAandB.Label.Unscaled.Y

        SampsAandB.GivenNotB.Label.Unscaled.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenNotB.Label.Unscaled.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.GivenNotB.Label.ScaleA.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenNotB.Label.ScaleA.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.GivenNotB.Label.ScaleB.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenNotB.Label.ScaleB.Y = SampsAandB.Label.Unscaled.Y
        SampsAandB.GivenNotB.Label.ScaleAB.MidX = SampsAandB.Label.Unscaled.MidX
        SampsAandB.GivenNotB.Label.ScaleAB.Y = SampsAandB.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotProbAandNotBPosn()
        'Get the default annotation position for the A and Not B probability

        Dim TextHeight As Integer = TextRenderer.MeasureText(ProbAandNotB.Label.Text & ProbString((ProbA.Value - ProbAandB.Value)), ProbAandNotB.Label.Font).Height
        If EventA.Unscaled.XMax > EventB.Unscaled.XMin Then
            ProbAandNotB.Label.Unscaled.MidX = EventA.Unscaled.XMin + (EventB.Unscaled.XMin - EventA.Unscaled.XMin) / 2
        Else
            ProbAandNotB.Label.Unscaled.MidX = EventA.Unscaled.XMin + (EventA.Unscaled.XMax - EventA.Unscaled.XMin) / 2
        End If
        ProbAandNotB.Label.Unscaled.Y = EventA.Unscaled.YMin + (EventA.Unscaled.YMax - EventA.Unscaled.YMin) / 2 - TextHeight '/ 2

        'Copy the unscaled location to the scaled location versions:
        ProbAandNotB.Label.ScaleA.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.Label.ScaleA.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.Label.ScaleB.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.Label.ScaleB.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.Label.ScaleAB.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.Label.ScaleAB.Y = ProbAandNotB.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        ProbAandNotB.GivenA.Label.Unscaled.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenA.Label.Unscaled.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.GivenA.Label.ScaleA.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenA.Label.ScaleA.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.GivenA.Label.ScaleB.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenA.Label.ScaleB.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.GivenA.Label.ScaleAB.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenA.Label.ScaleAB.Y = ProbAandNotB.Label.Unscaled.Y

        ProbAandNotB.GivenNotA.Label.Unscaled.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenNotA.Label.Unscaled.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.GivenNotA.Label.ScaleA.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenNotA.Label.ScaleA.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.GivenNotA.Label.ScaleB.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenNotA.Label.ScaleB.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.GivenNotA.Label.ScaleAB.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenNotA.Label.ScaleAB.Y = ProbAandNotB.Label.Unscaled.Y

        ProbAandNotB.GivenB.Label.Unscaled.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenB.Label.Unscaled.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.GivenB.Label.ScaleA.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenB.Label.ScaleA.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.GivenB.Label.ScaleB.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenB.Label.ScaleB.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.GivenB.Label.ScaleAB.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenB.Label.ScaleAB.Y = ProbAandNotB.Label.Unscaled.Y

        ProbAandNotB.GivenNotB.Label.Unscaled.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenNotB.Label.Unscaled.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.GivenNotB.Label.ScaleA.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenNotB.Label.ScaleA.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.GivenNotB.Label.ScaleB.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenNotB.Label.ScaleB.Y = ProbAandNotB.Label.Unscaled.Y
        ProbAandNotB.GivenNotB.Label.ScaleAB.MidX = ProbAandNotB.Label.Unscaled.MidX
        ProbAandNotB.GivenNotB.Label.ScaleAB.Y = ProbAandNotB.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotSampsAandNotBPosn()
        'Get the default annotation position for the A and Not B sample count
        'Dim TextHeight As Integer = TextRenderer.MeasureText(SampsAandNotB.Label.Text & SampString((ProbA.Value - ProbAandB.Value) * SampleSize), SampsAandNotB.Label.Font).Height
        Dim TextHeight As Integer = TextRenderer.MeasureText(SampsAandNotB.Label.Text & SampString((ProbA.Value - ProbAandB.Value) * SampleSize.Value), SampsAandNotB.Label.Font).Height

        If EventA.Unscaled.XMax > EventB.Unscaled.XMin Then
            SampsAandNotB.Label.Unscaled.MidX = EventA.Unscaled.XMin + (EventB.Unscaled.XMin - EventA.Unscaled.XMin) / 2
        Else
            SampsAandNotB.Label.Unscaled.MidX = EventA.Unscaled.XMin + (EventA.Unscaled.XMax - EventA.Unscaled.XMin) / 2
        End If
        SampsAandNotB.Label.Unscaled.Y = EventA.Unscaled.YMin + (EventA.Unscaled.YMax - EventA.Unscaled.YMin) / 2

        'Copy the unscaled location to the scaled location versions:
        SampsAandNotB.Label.ScaleA.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.Label.ScaleA.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.Label.ScaleB.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.Label.ScaleB.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.Label.ScaleAB.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.Label.ScaleAB.Y = SampsAandNotB.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        SampsAandNotB.GivenA.Label.Unscaled.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenA.Label.Unscaled.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.GivenA.Label.ScaleA.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenA.Label.ScaleA.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.GivenA.Label.ScaleB.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenA.Label.ScaleB.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.GivenA.Label.ScaleAB.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenA.Label.ScaleAB.Y = SampsAandNotB.Label.Unscaled.Y

        SampsAandNotB.GivenNotA.Label.Unscaled.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenNotA.Label.Unscaled.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.GivenNotA.Label.ScaleA.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenNotA.Label.ScaleA.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.GivenNotA.Label.ScaleB.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenNotA.Label.ScaleB.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.GivenNotA.Label.ScaleAB.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenNotA.Label.ScaleAB.Y = SampsAandNotB.Label.Unscaled.Y

        SampsAandNotB.GivenB.Label.Unscaled.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenB.Label.Unscaled.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.GivenB.Label.ScaleA.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenB.Label.ScaleA.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.GivenB.Label.ScaleB.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenB.Label.ScaleB.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.GivenB.Label.ScaleAB.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenB.Label.ScaleAB.Y = SampsAandNotB.Label.Unscaled.Y

        SampsAandNotB.GivenNotB.Label.Unscaled.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenNotB.Label.Unscaled.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.GivenNotB.Label.ScaleA.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenNotB.Label.ScaleA.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.GivenNotB.Label.ScaleB.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenNotB.Label.ScaleB.Y = SampsAandNotB.Label.Unscaled.Y
        SampsAandNotB.GivenNotB.Label.ScaleAB.MidX = SampsAandNotB.Label.Unscaled.MidX
        SampsAandNotB.GivenNotB.Label.ScaleAB.Y = SampsAandNotB.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotProbNotAandBPosn()
        'Get the default annotation position for the Not A and B probability
        Dim TextHeight As Integer = TextRenderer.MeasureText(ProbNotAandB.Label.Text & ProbString((ProbB.Value - ProbAandB.Value)), ProbNotAandB.Label.Font).Height
        If EventA.Unscaled.XMax > EventB.Unscaled.XMin Then
            ProbNotAandB.Label.Unscaled.MidX = EventA.Unscaled.XMax + (EventB.Unscaled.XMax - EventA.Unscaled.XMax) / 2
        Else
            ProbNotAandB.Label.Unscaled.MidX = EventB.Unscaled.XMin + (EventB.Unscaled.XMax - EventB.Unscaled.XMin) / 2
        End If
        ProbNotAandB.Label.Unscaled.Y = EventB.Unscaled.YMin + (EventB.Unscaled.YMax - EventB.Unscaled.YMin) / 2 - TextHeight '/ 2

        'Copy the unscaled location to the scaled location versions:
        ProbNotAandB.Label.ScaleA.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.Label.ScaleA.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.Label.ScaleB.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.Label.ScaleB.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.Label.ScaleAB.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.Label.ScaleAB.Y = ProbNotAandB.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        ProbNotAandB.GivenA.Label.Unscaled.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenA.Label.Unscaled.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.GivenA.Label.ScaleA.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenA.Label.ScaleA.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.GivenA.Label.ScaleB.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenA.Label.ScaleB.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.GivenA.Label.ScaleAB.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenA.Label.ScaleAB.Y = ProbNotAandB.Label.Unscaled.Y

        ProbNotAandB.GivenNotA.Label.Unscaled.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenNotA.Label.Unscaled.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.GivenNotA.Label.ScaleA.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenNotA.Label.ScaleA.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.GivenNotA.Label.ScaleB.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenNotA.Label.ScaleB.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.GivenNotA.Label.ScaleAB.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenNotA.Label.ScaleAB.Y = ProbNotAandB.Label.Unscaled.Y

        ProbNotAandB.GivenB.Label.Unscaled.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenB.Label.Unscaled.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.GivenB.Label.ScaleA.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenB.Label.ScaleA.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.GivenB.Label.ScaleB.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenB.Label.ScaleB.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.GivenB.Label.ScaleAB.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenB.Label.ScaleAB.Y = ProbNotAandB.Label.Unscaled.Y

        ProbNotAandB.GivenNotB.Label.Unscaled.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenNotB.Label.Unscaled.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.GivenNotB.Label.ScaleA.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenNotB.Label.ScaleA.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.GivenNotB.Label.ScaleB.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenNotB.Label.ScaleB.Y = ProbNotAandB.Label.Unscaled.Y
        ProbNotAandB.GivenNotB.Label.ScaleAB.MidX = ProbNotAandB.Label.Unscaled.MidX
        ProbNotAandB.GivenNotB.Label.ScaleAB.Y = ProbNotAandB.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotSampsNotAandBPosn()
        'Get the default annotation position for the Not A and B sample count
        'Dim TextHeight As Integer = TextRenderer.MeasureText(SampsNotAandB.Label.Text & SampString((ProbB.Value - ProbAandB.Value) * SampleSize), SampsNotAandB.Label.Font).Height
        Dim TextHeight As Integer = TextRenderer.MeasureText(SampsNotAandB.Label.Text & SampString((ProbB.Value - ProbAandB.Value) * SampleSize.Value), SampsNotAandB.Label.Font).Height

        If EventA.Unscaled.XMax > EventB.Unscaled.XMin Then
            SampsNotAandB.Label.Unscaled.MidX = EventA.Unscaled.XMax + (EventB.Unscaled.XMax - EventA.Unscaled.XMax) / 2
        Else
            SampsNotAandB.Label.Unscaled.MidX = EventB.Unscaled.XMin + (EventB.Unscaled.XMax - EventB.Unscaled.XMin) / 2
        End If
        SampsNotAandB.Label.Unscaled.Y = EventB.Unscaled.YMin + (EventB.Unscaled.YMax - EventB.Unscaled.YMin) / 2

        'Copy the unscaled location to the scaled location versions:
        SampsNotAandB.Label.ScaleA.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.Label.ScaleA.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.Label.ScaleB.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.Label.ScaleB.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.Label.ScaleAB.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.Label.ScaleAB.Y = SampsNotAandB.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        SampsNotAandB.GivenA.Label.Unscaled.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenA.Label.Unscaled.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.GivenA.Label.ScaleA.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenA.Label.ScaleA.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.GivenA.Label.ScaleB.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenA.Label.ScaleB.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.GivenA.Label.ScaleAB.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenA.Label.ScaleAB.Y = SampsNotAandB.Label.Unscaled.Y

        SampsNotAandB.GivenNotA.Label.Unscaled.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenNotA.Label.Unscaled.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.GivenNotA.Label.ScaleA.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenNotA.Label.ScaleA.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.GivenNotA.Label.ScaleB.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenNotA.Label.ScaleB.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.GivenNotA.Label.ScaleAB.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenNotA.Label.ScaleAB.Y = SampsNotAandB.Label.Unscaled.Y

        SampsNotAandB.GivenB.Label.Unscaled.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenB.Label.Unscaled.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.GivenB.Label.ScaleA.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenB.Label.ScaleA.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.GivenB.Label.ScaleB.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenB.Label.ScaleB.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.GivenB.Label.ScaleAB.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenB.Label.ScaleAB.Y = SampsNotAandB.Label.Unscaled.Y

        SampsNotAandB.GivenNotB.Label.Unscaled.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenNotB.Label.Unscaled.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.GivenNotB.Label.ScaleA.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenNotB.Label.ScaleA.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.GivenNotB.Label.ScaleB.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenNotB.Label.ScaleB.Y = SampsNotAandB.Label.Unscaled.Y
        SampsNotAandB.GivenNotB.Label.ScaleAB.MidX = SampsNotAandB.Label.Unscaled.MidX
        SampsNotAandB.GivenNotB.Label.ScaleAB.Y = SampsNotAandB.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotProbNotAandNotBPosn()
        'Get the default aonnotation position for the Not A and Not B probability.

        Dim TextHeight As Integer = TextRenderer.MeasureText(ProbNotAandNotB.Label.Text & ProbString(1 - ProbA.Value - ProbB.Value + ProbAandB.Value), ProbNotAandNotB.Label.Font).Height
        Dim TextWidth As Integer = TextRenderer.MeasureText(ProbNotAandNotB.Label.Text & ProbString(1 - ProbA.Value - ProbB.Value + ProbAandB.Value), ProbNotAandNotB.Label.Font).Width
        'Dim SampCountTextHeight As Integer = TextRenderer.MeasureText(SampsNotAandNotB.Label.Text & SampString((1 - ProbA.Value - ProbB.Value + ProbAandB.Value) * SampleSize), SampsNotAandNotB.Label.Font).Height
        Dim SampCountTextHeight As Integer = TextRenderer.MeasureText(SampsNotAandNotB.Label.Text & SampString((1 - ProbA.Value - ProbB.Value + ProbAandB.Value) * SampleSize.Value), SampsNotAandNotB.Label.Font).Height

        'Dim SampSizeTextHeight As Integer = TextRenderer.MeasureText(AnnotSampleSize.Text & SampString(SampleSize), AnnotSampleSize.Font).Height

        ProbNotAandNotB.Label.Unscaled.X = 10 'The X position is the start of the text, not the mid point. This is set to 10 pixels from the left of the diagram.
        'ProbNotAandNotB.Label.Unscaled.Y = Diagram.Height - SampSizeTextHeight - 10 - SampSizeTextHeight - SampCountTextHeight - TextHeight 'Leave a sufficient gap for the corresponding sample count with a blank line above the Sample Size annotation.
        ProbNotAandNotB.Label.Unscaled.Y = Diagram.Height - 10 - SampCountTextHeight - TextHeight 'Display above the corresponding sample count annotation.

        'Copy the unscaled location to the scaled location versions:
        ProbNotAandNotB.Label.ScaleA.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.Label.ScaleA.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.Label.ScaleB.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.Label.ScaleB.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.Label.ScaleAB.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.Label.ScaleAB.Y = ProbNotAandNotB.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        ProbNotAandNotB.GivenA.Label.Unscaled.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenA.Label.Unscaled.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.GivenA.Label.ScaleA.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenA.Label.ScaleA.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.GivenA.Label.ScaleB.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenA.Label.ScaleB.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.GivenA.Label.ScaleAB.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenA.Label.ScaleAB.Y = ProbNotAandNotB.Label.Unscaled.Y

        ProbNotAandNotB.GivenNotA.Label.Unscaled.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenNotA.Label.Unscaled.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.GivenNotA.Label.ScaleA.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenNotA.Label.ScaleA.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.GivenNotA.Label.ScaleB.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenNotA.Label.ScaleB.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.GivenNotA.Label.ScaleAB.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenNotA.Label.ScaleAB.Y = ProbNotAandNotB.Label.Unscaled.Y

        ProbNotAandNotB.GivenB.Label.Unscaled.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenB.Label.Unscaled.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.GivenB.Label.ScaleA.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenB.Label.ScaleA.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.GivenB.Label.ScaleB.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenB.Label.ScaleB.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.GivenB.Label.ScaleAB.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenB.Label.ScaleAB.Y = ProbNotAandNotB.Label.Unscaled.Y

        ProbNotAandNotB.GivenNotB.Label.Unscaled.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenNotB.Label.Unscaled.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.GivenNotB.Label.ScaleA.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenNotB.Label.ScaleA.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.GivenNotB.Label.ScaleB.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenNotB.Label.ScaleB.Y = ProbNotAandNotB.Label.Unscaled.Y
        ProbNotAandNotB.GivenNotB.Label.ScaleAB.X = ProbNotAandNotB.Label.Unscaled.X
        ProbNotAandNotB.GivenNotB.Label.ScaleAB.Y = ProbNotAandNotB.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotSampsNotAandNotBPosn()
        'Get the default aonnotation position for the Not A and Not B probability.

        'Dim TextHeight As Integer = TextRenderer.MeasureText(SampsNotAandNotB.Label.Text & SampString((1 - ProbA.Value - ProbB.Value + ProbAandB.Value) * SampleSize), SampsNotAandNotB.Label.Font).Height
        Dim TextHeight As Integer = TextRenderer.MeasureText(SampsNotAandNotB.Label.Text & SampString((1 - ProbA.Value - ProbB.Value + ProbAandB.Value) * SampleSize.Value), SampsNotAandNotB.Label.Font).Height

        'Dim TextWidth As Integer = TextRenderer.MeasureText(SampsNotAandNotB.Label.Text & SampString((1 - ProbA.Value - ProbB.Value + ProbAandB.Value) * SampleSize), SampsNotAandNotB.Label.Font).Width
        'Dim SampSizeTextHeight As Integer = TextRenderer.MeasureText(AnnotSampleSize.Text & SampString(SampleSize), AnnotSampleSize.Font).Height

        SampsNotAandNotB.Label.Unscaled.X = 10 'The X position is the start of the text, not the mid point. This is set to 10 pixels from the left of the diagram.
        'SampsNotAandNotB.Label.Unscaled.Y = Diagram.Height - SampSizeTextHeight - 10 - SampSizeTextHeight - TextHeight 'Leave a blank line above the Sample Size annotation.
        SampsNotAandNotB.Label.Unscaled.Y = Diagram.Height - 10 - TextHeight '10 pixels above the botton of the diagram.

        'Copy the unscaled location to the scaled location versions:
        SampsNotAandNotB.Label.ScaleA.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.Label.ScaleA.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.Label.ScaleB.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.Label.ScaleB.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.Label.ScaleAB.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.Label.ScaleAB.Y = SampsNotAandNotB.Label.Unscaled.Y

        'Copy the locations to the Conditional probabilities:
        SampsNotAandNotB.GivenA.Label.Unscaled.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenA.Label.Unscaled.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.GivenA.Label.ScaleA.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenA.Label.ScaleA.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.GivenA.Label.ScaleB.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenA.Label.ScaleB.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.GivenA.Label.ScaleAB.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenA.Label.ScaleAB.Y = SampsNotAandNotB.Label.Unscaled.Y

        SampsNotAandNotB.GivenNotA.Label.Unscaled.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenNotA.Label.Unscaled.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.GivenNotA.Label.ScaleA.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenNotA.Label.ScaleA.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.GivenNotA.Label.ScaleB.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenNotA.Label.ScaleB.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.GivenNotA.Label.ScaleAB.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenNotA.Label.ScaleAB.Y = SampsNotAandNotB.Label.Unscaled.Y

        SampsNotAandNotB.GivenB.Label.Unscaled.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenB.Label.Unscaled.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.GivenB.Label.ScaleA.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenB.Label.ScaleA.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.GivenB.Label.ScaleB.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenB.Label.ScaleB.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.GivenB.Label.ScaleAB.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenB.Label.ScaleAB.Y = SampsNotAandNotB.Label.Unscaled.Y

        SampsNotAandNotB.GivenNotB.Label.Unscaled.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenNotB.Label.Unscaled.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.GivenNotB.Label.ScaleA.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenNotB.Label.ScaleA.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.GivenNotB.Label.ScaleB.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenNotB.Label.ScaleB.Y = SampsNotAandNotB.Label.Unscaled.Y
        SampsNotAandNotB.GivenNotB.Label.ScaleAB.X = SampsNotAandNotB.Label.Unscaled.X
        SampsNotAandNotB.GivenNotB.Label.ScaleAB.Y = SampsNotAandNotB.Label.Unscaled.Y

    End Sub

    Public Sub DefaultAnnotSampleSizePosn()
        'Get the default annotation position for the Sample Size.

        'OLD CODE:
        AnnotSampleSize.Unscaled.MidX = Diagram.Width / 2 'Display the Sample Size in the middle of the Probability Diagram.
        AnnotSampleSize.Unscaled.BaseY = Diagram.Height - 10 '10 pixels above the botton of the diagram.
        AnnotSampleSize.ScaleA.MidX = AnnotSampleSize.Unscaled.MidX
        AnnotSampleSize.ScaleA.BaseY = AnnotSampleSize.Unscaled.BaseY
        AnnotSampleSize.ScaleB.MidX = AnnotSampleSize.Unscaled.MidX
        AnnotSampleSize.ScaleB.BaseY = AnnotSampleSize.Unscaled.BaseY
        AnnotSampleSize.ScaleAB.MidX = AnnotSampleSize.Unscaled.MidX
        AnnotSampleSize.ScaleAB.BaseY = AnnotSampleSize.Unscaled.BaseY


        AnnotConditionalSampleSize.Unscaled.EndX = Diagram.Width - 10 '10 pixels from the right of the Probability Diagram.
        AnnotConditionalSampleSize.Unscaled.BaseY = Diagram.Height - 10 '10 pixels above the botton of the diagram.
        AnnotConditionalSampleSize.ScaleA.EndX = AnnotConditionalSampleSize.Unscaled.EndX
        AnnotConditionalSampleSize.ScaleA.BaseY = AnnotConditionalSampleSize.Unscaled.BaseY
        AnnotConditionalSampleSize.ScaleB.EndX = AnnotConditionalSampleSize.Unscaled.EndX
        AnnotConditionalSampleSize.ScaleB.BaseY = AnnotConditionalSampleSize.Unscaled.BaseY
        AnnotConditionalSampleSize.ScaleAB.EndX = AnnotConditionalSampleSize.Unscaled.EndX
        AnnotConditionalSampleSize.ScaleAB.BaseY = AnnotConditionalSampleSize.Unscaled.BaseY

        'NEW CODE:
        SampleSize.Label.Unscaled.MidX = Diagram.Width / 2 'Display the Sample Size in the middle of the Probability Diagram.
        SampleSize.Label.Unscaled.BaseY = Diagram.Height - 10 '10 pixels above the botton of the diagram.
        SampleSize.Label.ScaleA.MidX = SampleSize.Label.Unscaled.MidX
        SampleSize.Label.ScaleA.BaseY = SampleSize.Label.Unscaled.BaseY
        SampleSize.Label.ScaleB.MidX = SampleSize.Label.Unscaled.MidX
        SampleSize.Label.ScaleB.BaseY = SampleSize.Label.Unscaled.BaseY
        SampleSize.Label.ScaleAB.MidX = SampleSize.Label.Unscaled.MidX
        SampleSize.Label.ScaleAB.BaseY = SampleSize.Label.Unscaled.BaseY

        SampleSize.GivenA.Label.Unscaled.EndX = Diagram.Width / 2 'Display the Sample Size in the middle of the Probability Diagram.
        SampleSize.GivenA.Label.Unscaled.BaseY = Diagram.Height - 10 '10 pixels above the botton of the diagram.
        SampleSize.GivenA.Label.ScaleA.EndX = SampleSize.GivenA.Label.Unscaled.EndX
        SampleSize.GivenA.Label.ScaleA.BaseY = SampleSize.GivenA.Label.Unscaled.BaseY
        SampleSize.GivenA.Label.ScaleB.EndX = SampleSize.GivenA.Label.Unscaled.EndX
        SampleSize.GivenA.Label.ScaleB.BaseY = SampleSize.GivenA.Label.Unscaled.BaseY
        SampleSize.GivenA.Label.ScaleAB.EndX = SampleSize.GivenA.Label.Unscaled.EndX
        SampleSize.GivenA.Label.ScaleAB.BaseY = SampleSize.GivenA.Label.Unscaled.BaseY

        SampleSize.GivenNotA.Label.Unscaled.EndX = Diagram.Width / 2 'Display the Sample Size in the middle of the Probability Diagram.
        SampleSize.GivenNotA.Label.Unscaled.BaseY = Diagram.Height - 10 '10 pixels above the botton of the diagram.
        SampleSize.GivenNotA.Label.ScaleA.EndX = SampleSize.GivenNotA.Label.Unscaled.EndX
        SampleSize.GivenNotA.Label.ScaleA.BaseY = SampleSize.GivenNotA.Label.Unscaled.BaseY
        SampleSize.GivenNotA.Label.ScaleB.EndX = SampleSize.GivenNotA.Label.Unscaled.EndX
        SampleSize.GivenNotA.Label.ScaleB.BaseY = SampleSize.GivenNotA.Label.Unscaled.BaseY
        SampleSize.GivenNotA.Label.ScaleAB.EndX = SampleSize.GivenNotA.Label.Unscaled.EndX
        SampleSize.GivenNotA.Label.ScaleAB.BaseY = SampleSize.GivenNotA.Label.Unscaled.BaseY

        SampleSize.GivenB.Label.Unscaled.EndX = Diagram.Width / 2 'Display the Sample Size in the middle of the Probability Diagram.
        SampleSize.GivenB.Label.Unscaled.BaseY = Diagram.Height - 10 '10 pixels above the botton of the diagram.
        SampleSize.GivenB.Label.ScaleA.EndX = SampleSize.GivenB.Label.Unscaled.EndX
        SampleSize.GivenB.Label.ScaleA.BaseY = SampleSize.GivenB.Label.Unscaled.BaseY
        SampleSize.GivenB.Label.ScaleB.EndX = SampleSize.GivenB.Label.Unscaled.EndX
        SampleSize.GivenB.Label.ScaleB.BaseY = SampleSize.GivenB.Label.Unscaled.BaseY
        SampleSize.GivenB.Label.ScaleAB.EndX = SampleSize.GivenB.Label.Unscaled.EndX
        SampleSize.GivenB.Label.ScaleAB.BaseY = SampleSize.GivenB.Label.Unscaled.BaseY

        SampleSize.GivenNotB.Label.Unscaled.EndX = Diagram.Width / 2 'Display the Sample Size in the middle of the Probability Diagram.
        SampleSize.GivenNotB.Label.Unscaled.BaseY = Diagram.Height - 10 '10 pixels above the botton of the diagram.
        SampleSize.GivenNotB.Label.ScaleA.EndX = SampleSize.GivenNotB.Label.Unscaled.EndX
        SampleSize.GivenNotB.Label.ScaleA.BaseY = SampleSize.GivenNotB.Label.Unscaled.BaseY
        SampleSize.GivenNotB.Label.ScaleB.EndX = SampleSize.GivenNotB.Label.Unscaled.EndX
        SampleSize.GivenNotB.Label.ScaleB.BaseY = SampleSize.GivenNotB.Label.Unscaled.BaseY
        SampleSize.GivenNotB.Label.ScaleAB.EndX = SampleSize.GivenNotB.Label.Unscaled.EndX
        SampleSize.GivenNotB.Label.ScaleAB.BaseY = SampleSize.GivenNotB.Label.Unscaled.BaseY

    End Sub

    Public Sub DefaultAnnotConditionPosn()
        'Get the default annotation position for the category condition.

        Dim CondSampSizeTextHeight As Integer = TextRenderer.MeasureText(AnnotConditionalSampleSize.Text & SampString(ConditionalSampleSize), AnnotConditionalSampleSize.Font).Height 'The height of the conditional sample size annotation.

        AnnotCondition.None.EndX = Diagram.Width - 10 '10 pixels from the right of the Probability Diagram.
        'AnnotCondition.None.BaseY = Diagram.Height - 10 '10 pixels above the botton of the diagram.
        AnnotCondition.None.BaseY = Diagram.Height - 10 - CondSampSizeTextHeight 'Display above the Conditional Sample Size annotation.
        AnnotCondition.EventATrue.EndX = Diagram.Width - 10
        'AnnotCondition.EventATrue.BaseY = Diagram.Height - 10
        AnnotCondition.EventATrue.BaseY = Diagram.Height - 10 - CondSampSizeTextHeight
        AnnotCondition.EventAFalse.EndX = Diagram.Width - 10
        'AnnotCondition.EventAFalse.BaseY = Diagram.Height - 10
        AnnotCondition.EventAFalse.BaseY = Diagram.Height - 10 - CondSampSizeTextHeight
        AnnotCondition.EventBTrue.EndX = Diagram.Width - 10
        'AnnotCondition.EventBTrue.BaseY = Diagram.Height - 10
        AnnotCondition.EventBTrue.BaseY = Diagram.Height - 10 - CondSampSizeTextHeight
        AnnotCondition.EventBFalse.EndX = Diagram.Width - 10
        'AnnotCondition.EventBFalse.BaseY = Diagram.Height - 10
        AnnotCondition.EventBFalse.BaseY = Diagram.Height - 10 - CondSampSizeTextHeight

    End Sub

    Private Function SampString(ByRef Samples As Double) As String
        'Return the formatted sample count text corrersponding to the given sample count value.
        'The SamplesFormat setting in Bayes will be used for formatting.
        'Return Format(Samples, SamplesFormat)
        Return Format(Samples, Settings.SamplesFormat)
    End Function

    Private Function ProbString(ByRef DecimalProb As Double) As String
        'Return the formatted probability text corrersponding to the given decimal probability value.
        'The ProbabilityMeasure, DecimalFormat and PercentFormat settings in Bayes will be used for formatting.
        'If ProbabilityMeasure = "Decimal" Then
        If Settings.ProbabilityMeasure = "Decimal" Then
            'Return Format(DecimalProb, DecimalFormat)
            Return Format(DecimalProb, Settings.DecimalFormat)
            'ElseIf ProbabilityMeasure = "Percent" Then
        ElseIf Settings.ProbabilityMeasure = "Percent" Then
            'Return Format(DecimalProb * 100, PercentFormat) & "%"
            Return Format(DecimalProb * 100, Settings.PercentFormat) & "%"
        Else
            'RaiseEvent ErrorMessage("Unknown probability measure: " & ProbabilityMeasure & vbCrLf)
            RaiseEvent ErrorMessage("Unknown probability measure: " & Settings.ProbabilityMeasure & vbCrLf)
        End If
    End Function

    Public Sub DefaultProbPrefixes()
        'Set the default probability prefixes.
        ProbA.Prefix = "P(A) = "
        ProbA.GivenA.Prefix = "P(A|A) = "
        ProbA.GivenNotA.Prefix = "P(A|NotA) = "
        ProbA.GivenB.Prefix = "P(A|B) = "
        ProbA.GivenNotB.Prefix = "P(A|NotB) = "

        ProbNotA.Prefix = "P(NotA) = "
        ProbNotA.GivenA.Prefix = "P(NotA|A) = "
        ProbNotA.GivenNotA.Prefix = "P(NotA|NotA) = "
        ProbNotA.GivenB.Prefix = "P(NotA|B) = "
        ProbNotA.GivenNotB.Prefix = "P(NotA|NotB) = "

        ProbB.Prefix = "P(B) = "
        ProbB.GivenA.Prefix = "P(B|A) = "
        ProbB.GivenNotA.Prefix = "P(B|NotA) = "
        ProbB.GivenB.Prefix = "P(B|B) = "
        ProbB.GivenNotB.Prefix = "P(B|NotB) = "

        ProbNotB.Prefix = "P(NotB) = "
        ProbNotB.GivenA.Prefix = "P(NotB|A) = "
        ProbNotB.GivenNotA.Prefix = "P(NotB|NotA) = "
        ProbNotB.GivenB.Prefix = "P(NotB|B) = "
        ProbNotB.GivenNotB.Prefix = "P(NotB|NotB) = "

        ProbAandB.Prefix = "P(AandB) = "
        ProbAandB.GivenA.Prefix = "P(AandB|A) = "
        ProbAandB.GivenNotA.Prefix = "P(AandB|NotA) = "
        ProbAandB.GivenB.Prefix = "P(AandB|B) = "
        ProbAandB.GivenNotB.Prefix = "P(AandB|NotB) = "

        ProbAandNotB.Prefix = "P(AandNotB) = "
        ProbAandNotB.GivenA.Prefix = "P(AandNotB|A) = "
        ProbAandNotB.GivenNotA.Prefix = "P(AandNotB|NotA) = "
        ProbAandNotB.GivenB.Prefix = "P(AandNotB|B) = "
        ProbAandNotB.GivenNotB.Prefix = "P(AandNotB|NotB) = "

        ProbNotAandB.Prefix = "P(NotAandB) = "
        ProbNotAandB.GivenA.Prefix = "P(NotAandB|A) = "
        ProbNotAandB.GivenNotA.Prefix = "P(NotAandB|NotA) = "
        ProbNotAandB.GivenB.Prefix = "P(NotAandB|B) = "
        ProbNotAandB.GivenNotB.Prefix = "P(NotAandB|NotB) = "

        ProbNotAandNotB.Prefix = "P(NotAandNotB) = "
        ProbNotAandNotB.GivenA.Prefix = "P(NotAandNotB|A) = "
        ProbNotAandNotB.GivenNotA.Prefix = "P(NotAandNotB|NotA) = "
        ProbNotAandNotB.GivenB.Prefix = "P(NotAandNotB|B) = "
        ProbNotAandNotB.GivenNotB.Prefix = "P(NotAandNotB|NotB) = "

    End Sub

    Public Sub DefaultSamplePrefixes()
        'Set the default sample count prefixes.

        SampsA.Prefix = "n(A) = "
        SampsA.GivenA.Prefix = "n(A|A) = "
        SampsA.GivenNotA.Prefix = "n(A|NotA) = "
        SampsA.GivenB.Prefix = "n(A|B) = "
        SampsA.GivenNotB.Prefix = "n(A|NotB) = "

        SampsNotA.Prefix = "n(NotA) = "
        SampsNotA.GivenA.Prefix = "n(NotA|A) = "
        SampsNotA.GivenNotA.Prefix = "n(NotA|NotA) = "
        SampsNotA.GivenB.Prefix = "n(NotA|B) = "
        SampsNotA.GivenNotB.Prefix = "n(NotA|NotB) = "

        SampsB.Prefix = "n(B) = "
        SampsB.GivenA.Prefix = "n(B|A) = "
        SampsB.GivenNotA.Prefix = "n(B|NotA) = "
        SampsB.GivenB.Prefix = "n(B|B) = "
        SampsB.GivenNotB.Prefix = "n(B|NotB) = "

        SampsNotB.Prefix = "n(NotB) = "
        SampsNotB.GivenA.Prefix = "n(NotB|A) = "
        SampsNotB.GivenNotA.Prefix = "n(NotB|NotA) = "
        SampsNotB.GivenB.Prefix = "n(NotB|B) = "
        SampsNotB.GivenNotB.Prefix = "n(NotB|NotB) = "

        SampsAandB.Prefix = "n(AandB) = "
        SampsAandB.GivenA.Prefix = "n(AandB|A) = "
        SampsAandB.GivenNotA.Prefix = "n(AandB|NotA) = "
        SampsAandB.GivenB.Prefix = "n(AandB|B) = "
        SampsAandB.GivenNotB.Prefix = "n(AandB|NotB) = "

        SampsAandNotB.Prefix = "n(AandNotB) = "
        SampsAandNotB.GivenA.Prefix = "n(AandNotB|A) = "
        SampsAandNotB.GivenNotA.Prefix = "n(AandNotB|NotA) = "
        SampsAandNotB.GivenB.Prefix = "n(AandNotB|B) = "
        SampsAandNotB.GivenNotB.Prefix = "n(AandNotB|NotB) = "

        SampsNotAandB.Prefix = "n(NotAandB) = "
        SampsNotAandB.GivenA.Prefix = "n(NotAandB|A) = "
        SampsNotAandB.GivenNotA.Prefix = "n(NotAandB|NotA) = "
        SampsNotAandB.GivenB.Prefix = "n(NotAandB|B) = "
        SampsNotAandB.GivenNotB.Prefix = "n(NotAandB|NotB) = "

        SampsNotAandNotB.Prefix = "n(NotAandNotB) = "
        SampsNotAandNotB.GivenA.Prefix = "n(NotAandNotB|A) = "
        SampsNotAandNotB.GivenNotA.Prefix = "n(NotAandNotB|NotA) = "
        SampsNotAandNotB.GivenB.Prefix = "n(NotAandNotB|B) = "
        SampsNotAandNotB.GivenNotB.Prefix = "n(NotAandNotB|NotB) = "

        'AnnotSampleSize.Text = "Sample Size = "
        SampleSize.Prefix = "Sample Size = "
        SampleSize.GivenA.Prefix = "Conditional Sample Size = "
        SampleSize.GivenNotA.Prefix = "Conditional Sample Size = "
        SampleSize.GivenB.Prefix = "Conditional Sample Size = "
        SampleSize.GivenNotB.Prefix = "Conditional Sample Size = "

    End Sub

    Public Sub DefaultAnnotColors()
        'Set default annotation colors.

        'ProbA.Label.Unscaled.Color = Color.Red
        'ProbA.Label.ScaleA.Color = Color.Red
        'ProbA.Label.ScaleB.Color = Color.Red
        'ProbA.Label.ScaleAB.Color = Color.Red
        ProbA.Label.Color = Color.Red
        ProbA.GivenA.Label.Color = Color.Red
        ProbA.GivenNotA.Label.Color = Color.Red
        ProbA.GivenB.Label.Color = Color.Red
        ProbA.GivenNotB.Label.Color = Color.Red

        SampsA.Label.Color = Color.Red
        SampsA.GivenA.Label.Color = Color.Red
        SampsA.GivenNotA.Label.Color = Color.Red
        SampsA.GivenB.Label.Color = Color.Red
        SampsA.GivenNotB.Label.Color = Color.Red

        ProbNotA.Label.Color = Color.Red
        ProbNotA.GivenA.Label.Color = Color.Red
        ProbNotA.GivenNotA.Label.Color = Color.Red
        ProbNotA.GivenB.Label.Color = Color.Red
        ProbNotA.GivenNotB.Label.Color = Color.Red

        SampsNotA.Label.Color = Color.Red
        SampsNotA.GivenA.Label.Color = Color.Red
        SampsNotA.GivenNotA.Label.Color = Color.Red
        SampsNotA.GivenB.Label.Color = Color.Red
        SampsNotA.GivenNotB.Label.Color = Color.Red

        ProbB.Label.Color = Color.Blue
        ProbB.GivenA.Label.Color = Color.Blue
        ProbB.GivenNotA.Label.Color = Color.Blue
        ProbB.GivenB.Label.Color = Color.Blue
        ProbB.GivenNotB.Label.Color = Color.Blue

        SampsB.Label.Color = Color.Blue
        SampsB.GivenA.Label.Color = Color.Blue
        SampsB.GivenNotA.Label.Color = Color.Blue
        SampsB.GivenB.Label.Color = Color.Blue
        SampsB.GivenNotB.Label.Color = Color.Blue

        ProbNotB.Label.Color = Color.Blue
        ProbNotB.GivenA.Label.Color = Color.Blue
        ProbNotB.GivenNotA.Label.Color = Color.Blue
        ProbNotB.GivenB.Label.Color = Color.Blue
        ProbNotB.GivenNotB.Label.Color = Color.Blue

        SampsNotB.Label.Color = Color.Blue
        SampsNotB.GivenA.Label.Color = Color.Blue
        SampsNotB.GivenNotA.Label.Color = Color.Blue
        SampsNotB.GivenB.Label.Color = Color.Blue
        SampsNotB.GivenNotB.Label.Color = Color.Blue

        ProbAandB.Label.Color = Color.Purple
        ProbAandB.GivenA.Label.Color = Color.Purple
        ProbAandB.GivenNotA.Label.Color = Color.Purple
        ProbAandB.GivenB.Label.Color = Color.Purple
        ProbAandB.GivenNotB.Label.Color = Color.Purple

        SampsAandB.Label.Color = Color.Purple
        SampsAandB.GivenA.Label.Color = Color.Purple
        SampsAandB.GivenNotA.Label.Color = Color.Purple
        SampsAandB.GivenB.Label.Color = Color.Purple
        SampsAandB.GivenNotB.Label.Color = Color.Purple

        ProbAandNotB.Label.Color = Color.Red
        ProbAandNotB.GivenA.Label.Color = Color.Red
        ProbAandNotB.GivenNotA.Label.Color = Color.Red
        ProbAandNotB.GivenB.Label.Color = Color.Red
        ProbAandNotB.GivenNotB.Label.Color = Color.Red

        SampsAandNotB.Label.Color = Color.Red
        SampsAandNotB.GivenA.Label.Color = Color.Red
        SampsAandNotB.GivenNotA.Label.Color = Color.Red
        SampsAandNotB.GivenB.Label.Color = Color.Red
        SampsAandNotB.GivenNotB.Label.Color = Color.Red

        ProbNotAandB.Label.Color = Color.Blue
        ProbNotAandB.GivenA.Label.Color = Color.Blue
        ProbNotAandB.GivenNotA.Label.Color = Color.Blue
        ProbNotAandB.GivenB.Label.Color = Color.Blue
        ProbNotAandB.GivenNotB.Label.Color = Color.Blue

        SampsNotAandB.Label.Color = Color.Blue
        SampsNotAandB.GivenA.Label.Color = Color.Blue
        SampsNotAandB.GivenNotA.Label.Color = Color.Blue
        SampsNotAandB.GivenB.Label.Color = Color.Blue
        SampsNotAandB.GivenNotB.Label.Color = Color.Blue

        ProbNotAandNotB.Label.Color = Color.Black
        ProbNotAandNotB.GivenA.Label.Color = Color.Black
        ProbNotAandNotB.GivenNotA.Label.Color = Color.Black
        ProbNotAandNotB.GivenB.Label.Color = Color.Black
        ProbNotAandNotB.GivenNotB.Label.Color = Color.Black

        SampsNotAandNotB.Label.Color = Color.Black
        SampsNotAandNotB.GivenA.Label.Color = Color.Black
        SampsNotAandNotB.GivenNotA.Label.Color = Color.Black
        SampsNotAandNotB.GivenB.Label.Color = Color.Black
        SampsNotAandNotB.GivenNotB.Label.Color = Color.Black

    End Sub

    'Public Sub SetDecimalFormat(ByVal Fmt As String)
    '    'Set the decimal format for all probability values

    '    ProbA.DecimalFormat = Fmt
    '    ProbA.GivenA.DecimalFormat = Fmt
    '    ProbA.GivenNotA.DecimalFormat = Fmt
    '    ProbA.GivenB.DecimalFormat = Fmt
    '    ProbA.GivenNotB.DecimalFormat = Fmt

    '    ProbNotA.DecimalFormat = Fmt
    '    ProbNotA.GivenA.DecimalFormat = Fmt
    '    ProbNotA.GivenNotA.DecimalFormat = Fmt
    '    ProbNotA.GivenB.DecimalFormat = Fmt
    '    ProbNotA.GivenNotB.DecimalFormat = Fmt

    '    ProbB.DecimalFormat = Fmt
    '    ProbB.GivenA.DecimalFormat = Fmt
    '    ProbB.GivenNotA.DecimalFormat = Fmt
    '    ProbB.GivenB.DecimalFormat = Fmt
    '    ProbB.GivenNotB.DecimalFormat = Fmt

    '    ProbNotB.DecimalFormat = Fmt
    '    ProbNotB.GivenA.DecimalFormat = Fmt
    '    ProbNotB.GivenNotA.DecimalFormat = Fmt
    '    ProbNotB.GivenB.DecimalFormat = Fmt
    '    ProbNotB.GivenNotB.DecimalFormat = Fmt

    '    ProbAandB.DecimalFormat = Fmt
    '    ProbAandB.GivenA.DecimalFormat = Fmt
    '    ProbAandB.GivenNotA.DecimalFormat = Fmt
    '    ProbAandB.GivenB.DecimalFormat = Fmt
    '    ProbAandB.GivenNotB.DecimalFormat = Fmt

    '    ProbAandNotB.DecimalFormat = Fmt
    '    ProbAandNotB.GivenA.DecimalFormat = Fmt
    '    ProbAandNotB.GivenNotA.DecimalFormat = Fmt
    '    ProbAandNotB.GivenB.DecimalFormat = Fmt
    '    ProbAandNotB.GivenNotB.DecimalFormat = Fmt

    '    ProbNotAandB.DecimalFormat = Fmt
    '    ProbNotAandB.GivenA.DecimalFormat = Fmt
    '    ProbNotAandB.GivenNotA.DecimalFormat = Fmt
    '    ProbNotAandB.GivenB.DecimalFormat = Fmt
    '    ProbNotAandB.GivenNotB.DecimalFormat = Fmt

    '    ProbNotAandNotB.DecimalFormat = Fmt
    '    ProbNotAandNotB.GivenA.DecimalFormat = Fmt
    '    ProbNotAandNotB.GivenNotA.DecimalFormat = Fmt
    '    ProbNotAandNotB.GivenB.DecimalFormat = Fmt
    '    ProbNotAandNotB.GivenNotB.DecimalFormat = Fmt

    'End Sub

    'Public Sub SetPercentFormat(ByVal Fmt As String)
    '    'Set the percent format for all probability values

    '    ProbA.PercentFormat = Fmt
    '    ProbA.GivenA.PercentFormat = Fmt
    '    ProbA.GivenNotA.PercentFormat = Fmt
    '    ProbA.GivenB.PercentFormat = Fmt
    '    ProbA.GivenNotB.PercentFormat = Fmt

    '    ProbNotA.PercentFormat = Fmt
    '    ProbNotA.GivenA.PercentFormat = Fmt
    '    ProbNotA.GivenNotA.PercentFormat = Fmt
    '    ProbNotA.GivenB.PercentFormat = Fmt
    '    ProbNotA.GivenNotB.PercentFormat = Fmt

    '    ProbB.PercentFormat = Fmt
    '    ProbB.GivenA.PercentFormat = Fmt
    '    ProbB.GivenNotA.PercentFormat = Fmt
    '    ProbB.GivenB.PercentFormat = Fmt
    '    ProbB.GivenNotB.PercentFormat = Fmt

    '    ProbNotB.PercentFormat = Fmt
    '    ProbNotB.GivenA.PercentFormat = Fmt
    '    ProbNotB.GivenNotA.PercentFormat = Fmt
    '    ProbNotB.GivenB.PercentFormat = Fmt
    '    ProbNotB.GivenNotB.PercentFormat = Fmt

    '    ProbAandB.PercentFormat = Fmt
    '    ProbAandB.GivenA.PercentFormat = Fmt
    '    ProbAandB.GivenNotA.PercentFormat = Fmt
    '    ProbAandB.GivenB.PercentFormat = Fmt
    '    ProbAandB.GivenNotB.PercentFormat = Fmt

    '    ProbAandNotB.PercentFormat = Fmt
    '    ProbAandNotB.GivenA.PercentFormat = Fmt
    '    ProbAandNotB.GivenNotA.PercentFormat = Fmt
    '    ProbAandNotB.GivenB.PercentFormat = Fmt
    '    ProbAandNotB.GivenNotB.PercentFormat = Fmt

    '    ProbNotAandB.PercentFormat = Fmt
    '    ProbNotAandB.GivenA.PercentFormat = Fmt
    '    ProbNotAandB.GivenNotA.PercentFormat = Fmt
    '    ProbNotAandB.GivenB.PercentFormat = Fmt
    '    ProbNotAandB.GivenNotB.PercentFormat = Fmt

    '    ProbNotAandNotB.PercentFormat = Fmt
    '    ProbNotAandNotB.GivenA.PercentFormat = Fmt
    '    ProbNotAandNotB.GivenNotA.PercentFormat = Fmt
    '    ProbNotAandNotB.GivenB.PercentFormat = Fmt
    '    ProbNotAandNotB.GivenNotB.PercentFormat = Fmt

    'End Sub

    'Public Sub SetCountFormat(ByVal Fmt As String)
    '    'Set the count format for all sample count values

    '    SampsA.CountFormat = Fmt
    '    SampsA.GivenA.CountFormat = Fmt
    '    SampsA.GivenNotA.CountFormat = Fmt
    '    SampsA.GivenB.CountFormat = Fmt
    '    SampsA.GivenNotB.CountFormat = Fmt

    '    SampsNotA.CountFormat = Fmt
    '    SampsNotA.GivenA.CountFormat = Fmt
    '    SampsNotA.GivenNotA.CountFormat = Fmt
    '    SampsNotA.GivenB.CountFormat = Fmt
    '    SampsNotA.GivenNotB.CountFormat = Fmt

    '    SampsB.CountFormat = Fmt
    '    SampsB.GivenA.CountFormat = Fmt
    '    SampsB.GivenNotA.CountFormat = Fmt
    '    SampsB.GivenB.CountFormat = Fmt
    '    SampsB.GivenNotB.CountFormat = Fmt

    '    SampsNotB.CountFormat = Fmt
    '    SampsNotB.GivenA.CountFormat = Fmt
    '    SampsNotB.GivenNotA.CountFormat = Fmt
    '    SampsNotB.GivenB.CountFormat = Fmt
    '    SampsNotB.GivenNotB.CountFormat = Fmt

    '    SampsAandB.CountFormat = Fmt
    '    SampsAandB.GivenA.CountFormat = Fmt
    '    SampsAandB.GivenNotA.CountFormat = Fmt
    '    SampsAandB.GivenB.CountFormat = Fmt
    '    SampsAandB.GivenNotB.CountFormat = Fmt

    '    SampsAandNotB.CountFormat = Fmt
    '    SampsAandNotB.GivenA.CountFormat = Fmt
    '    SampsAandNotB.GivenNotA.CountFormat = Fmt
    '    SampsAandNotB.GivenB.CountFormat = Fmt
    '    SampsAandNotB.GivenNotB.CountFormat = Fmt

    '    SampsNotAandB.CountFormat = Fmt
    '    SampsNotAandB.GivenA.CountFormat = Fmt
    '    SampsNotAandB.GivenNotA.CountFormat = Fmt
    '    SampsNotAandB.GivenB.CountFormat = Fmt
    '    SampsNotAandB.GivenNotB.CountFormat = Fmt

    '    SampsNotAandNotB.CountFormat = Fmt
    '    SampsNotAandNotB.GivenA.CountFormat = Fmt
    '    SampsNotAandNotB.GivenNotA.CountFormat = Fmt
    '    SampsNotAandNotB.GivenB.CountFormat = Fmt
    '    SampsNotAandNotB.GivenNotB.CountFormat = Fmt
    'End Sub


#End Region 'Annotation Methods ---------------------------------------------------------------------------------------------------------------------------------------------------------------

    'Private Sub ProbA_MeasureChanged(Value As String) Handles ProbA.MeasureChanged
    '    'Propagate the ProbA.MeasureChanged value to the ProbA.GivenA, ProbA.GivenNotA, ProbA.GivenB and ProbA.GivenNotB versions.
    '    ProbA.GivenA.Measure = Value
    '    ProbA.GivenNotA.Measure = Value
    '    ProbA.GivenB.Measure = Value
    '    ProbA.GivenNotB.Measure = Value
    'End Sub

    'Private Sub ProbB_MeasureChanged(Value As String) Handles ProbB.MeasureChanged
    '    'Propagate the ProbB.MeasureChanged value to the .GivenA, .GivenNotA, .GivenB and .GivenNotB versions.
    '    ProbB.GivenA.Measure = Value
    '    ProbB.GivenNotA.Measure = Value
    '    ProbB.GivenB.Measure = Value
    '    ProbB.GivenNotB.Measure = Value
    'End Sub




    'Private Sub ProbA_ValueChanged(Value As Double) Handles ProbA.ValueChanged
    Private Sub ProbA_DefinedValueChanged(Value As Double) Handles ProbA.DefinedValueChanged
        'P(A) value has changed.

        'Adjust the probability value ranks:
        If ProbA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbA.Status = "Defined" 'The ProbA value has been defined.
        Else
            'Decrement all other ranks that are higher than the Prob A rank:
            'DecrementRanks(ProbA.Rank)
            IncrementRanksAbove(ProbA.Rank) 'Increment all other ranks that are lower than the ProbA rank
            ProbA.Rank = 1 'The ProbA value is now ranked 1
            ProbA.Status = "Defined" 'The ProbA value has been defined.
            'If ProbNotA.Rank < ProbA.Rank Then ProbNotA.Rank -= 1
            'If ProbB.Rank < ProbA.Rank Then ProbB.Rank -= 1
            'If ProbNotB.Rank < ProbA.Rank Then ProbNotB.Rank -= 1
            'If ProbAandB.Rank < ProbA.Rank Then ProbAandB.Rank -= 1
            'If ProbAandNotB.Rank < ProbA.Rank Then ProbAandNotB.Rank -= 1
            'If ProbNotAandB.Rank < ProbA.Rank Then ProbNotAandB.Rank -= 1
            'If ProbNotAandNotB.Rank < ProbA.Rank Then ProbNotAandNotB.Rank -= 1
        End If

        'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbA value change and will be recalculated
        'UndefineValues()
        UndefineValuesAbove(4)

        'These can be recalculated immediately
        'ProbNotA.Value = 1 - ProbA.Value
        'ProbNotA._value = 1 - ProbA.Value
        ProbNotA.Value = 1 - ProbA.Value
        'ProbNotA.UpdateLabelText() 'This is done automatically when ProbNotA.Value  is set
        ProbNotA.Status = "Calculated"
        'SampsA.Value = SampleSize * Value
        'SampsA._value = SampleSize * Value
        'SampsA.Value = SampleSize * Value
        SampsA.Value = SampleSize.Value * Value
        'SampsA.UpdateLabelText()
        SampsA.Status = "Calculated"

        ''Flag unconditional values to recalculate:
        ''ProbB.Value is not affected by ProbA.Value
        ''ProbNotB.Value is not affected by ProbA.Value
        'If ProbAandB.Rank > 3 Then ProbAandB.Status = "Undefined" 'Flag this value to be recalculated.
        'If ProbAandNotB.Rank > 3 Then ProbAandNotB.Status = "Undefined" 'Flag this value to be recalculated.

        'NOTE: Try initially updating only the sample counts. After that all other values can be determined.

        'Flag unconditional sample counts to recalculate:

        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()

    End Sub

    'Private Sub ProbA_GivenAValueChanged(Value As Double) Handles ProbA.GivenAValueChanged
    Private Sub ProbA_GivenADefinedValueChanged(Value As Double) Handles ProbA.GivenADefinedValueChanged
        'P(A|GivenA) value has changed.
        'Note: the probability should always be 1.
        If Value <> 1 Then
            RaiseEvent ErrorMessage("ProbA.GivenA.Value = " & ProbA.GivenA.Value & vbCrLf)
            RaiseEvent ErrorMessage("This probability has been reset to the correct value of 1." & vbCrLf)
            'ProbA.GivenA._value = 1
            ProbA.GivenA.Value = 1
            'ProbA.GivenA.UpdateLabelText() 'This is done automatically when ProbA.GivenA.Value is set
            ProbA.GivenA.Status = "Defined"
        End If
    End Sub

    Private Sub ProbA_GivenNotADefinedValueChanged(Value As Double) Handles ProbA.GivenNotADefinedValueChanged
        'P(A|NotA) value has changed'
        'NOTE: The probability should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("ProbA.GivenNotA.Value = " & ProbA.GivenNotA.Value & vbCrLf)
            RaiseEvent ErrorMessage("This probability has been reset to the correct value of 0." & vbCrLf)
            ProbA.GivenNotA.Value = 0
            'ProbA.GivenNotA.UpdateLabelText()
            ProbA.GivenNotA.Status = "Defined"
        End If
    End Sub

    Private Sub ProbA_GivenBDefinedValueChanged(Value As Double) Handles ProbA.GivenBDefinedValueChanged
        'P(A|B) value has changed.

        'Adjust the probability value ranks:
        If ProbA.GivenB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbA.GivenB.Status = "Defined" 'The ProbA.GivenB value has been defined.
        Else
            IncrementRanksAbove(ProbA.GivenB.Rank) 'Increment all other ranks that are lower than the ProbA.GivenB rank
            ProbA.GivenB.Rank = 1 'The ProbA.GivenB value is now ranked 1
            ProbA.GivenB.Status = "Defined" 'The ProbA.GivenB value has been defined.
        End If

        UndefineValuesAbove(4)  'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbA.GivenB value change and will be recalculated

        ''These values can be recalculated immediately:
        'ProbNotA._value = 1 - ProbA.Value
        'ProbNotA.Status = "Calculated"
        'SampsA._value = SampleSize * Value
        'SampsA.Status = "Calculated"

        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
        'UpdateAccuracy()
        'UpdatePrecision()
        'UpdateSensitivity()


    End Sub

    Private Sub ProbA_GivenNotBDefinedValueChanged(Value As Double) Handles ProbA.GivenNotBDefinedValueChanged
        'P(A|NotB) value has changed.

        'Adjust the probability value ranks:
        If ProbA.GivenNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbA.GivenNotB.Status = "Defined" 'The ProbA.GivenNotB value has been defined.
        Else
            IncrementRanksAbove(ProbA.GivenNotB.Rank) 'Increment all other ranks that are lower than the ProbA.GivenNotB rank
            ProbA.GivenNotB.Rank = 1 'The ProbA.GivenNotB value is now ranked 1
            ProbA.GivenNotB.Status = "Defined" 'The ProbA.GivenNotB value has been defined.
        End If

        UndefineValuesAbove(4)  'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbA.GivenB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
        'UpdateAccuracy()
        'UpdateSensitivity()
    End Sub

    Private Sub ProbB_DefinedValueChanged(Value As Double) Handles ProbB.DefinedValueChanged
        'P(B) value has changed.

        'Adjust the probability value ranks:
        If ProbB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbB.Status = "Defined" 'The ProbB value has been defined.
        Else
            IncrementRanksAbove(ProbB.Rank)  'Increment all other ranks that are lower than the ProbB rank
            ProbB.Rank = 1 'The ProbB value is now ranked 1
            ProbB.Status = "Defined" 'The ProbB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbB value change and will be recalculated

        'These can be recalculated immediately:
        ProbNotB.Value = 1 - ProbB.Value
        'ProbNotB.UpdateLabelText() 'This is done automatically when ProbNotB.Value is set
        ProbNotB.Status = "Calculated"
        'SampsB._value = SampleSize * Value
        SampsB.Value = SampleSize.Value * Value
        'SampsB.UpdateLabelText()
        SampsB.Status = "Calculated"

        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbB_GivenADefinedValueChanged(Value As Double) Handles ProbB.GivenADefinedValueChanged
        'P(B|A) value has changed.

        'Adjust the probability value ranks:
        If ProbB.GivenA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbB.GivenA.Status = "Defined" 'The ProbB.GivenA value has been defined.
        Else
            IncrementRanksAbove(ProbB.GivenA.Rank)  'Increment all other ranks that are lower than the ProbB.GivenA rank
            ProbB.GivenA.Rank = 1 'The ProbB.GivenA value is now ranked 1
            ProbB.GivenA.Status = "Defined" 'The ProbB.GivenA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbB.GivenA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbB_GivenNotADefinedValueChanged(Value As Double) Handles ProbB.GivenNotADefinedValueChanged
        'P(B|NotA) value has changed.

        'Adjust the probability value ranks:
        If ProbB.GivenNotA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbB.GivenNotA.Status = "Defined" 'The ProbB.GivenNotA value has been defined.
        Else
            IncrementRanksAbove(ProbB.GivenNotA.Rank)  'Increment all other ranks that are lower than the ProbB.GivenNotA rank
            ProbB.GivenNotA.Rank = 1 'The ProbB.GivenNotA value is now ranked 1
            ProbB.GivenNotA.Status = "Defined" 'The ProbB.GivenNotA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbB.GivenNotA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbB_GivenBDefinedValueChanged(Value As Double) Handles ProbB.GivenBDefinedValueChanged
        'P(B|B) value has changed.
        'Note: the probability should always be 1.
        If Value <> 1 Then
            RaiseEvent ErrorMessage("ProbB.GivenB.Value = " & ProbB.GivenB.Value & vbCrLf)
            RaiseEvent ErrorMessage("This probability has been reset to the correct value of 1." & vbCrLf)
            ProbB.GivenB.Value = 1
            'ProbB.GivenB.UpdateLabelText()
            ProbB.GivenB.Status = "Defined"
        End If
    End Sub

    Private Sub ProbB_GivenNotBDefinedValueChanged(Value As Double) Handles ProbB.GivenNotBDefinedValueChanged
        'P(B|NotB) value has changed.
        'NOTE: The probability should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("ProbB.GivenNotB.Value = " & ProbB.GivenNotB.Value & vbCrLf)
            RaiseEvent ErrorMessage("This probability has been reset to the correct value of 0." & vbCrLf)
            ProbB.GivenNotB.Value = 0
            'ProbB.GivenNotB.UpdateLabelText()
            ProbB.GivenNotB.Status = "Defined"
        End If
    End Sub

    Private Sub ProbAandB_DefinedValueChanged(Value As Double) Handles ProbAandB.DefinedValueChanged
        'P(AandB) value has changed.

        'Adjust the probability value ranks:
        If ProbAandB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbAandB.Status = "Defined" 'The ProbAandB value has been defined.
        Else
            IncrementRanksAbove(ProbAandB.Rank)  'Increment all other ranks that are lower than the ProbAandB rank
            ProbAandB.Rank = 1 'The ProbAandB value is now ranked 1
            ProbAandB.Status = "Defined" 'The ProbAandB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbAandB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbAandB_GivenADefinedValueChanged(Value As Double) Handles ProbAandB.GivenADefinedValueChanged
        'P(AandB|A) value has changed.

        'Adjust the probability value ranks:
        If ProbAandB.GivenA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbAandB.GivenA.Status = "Defined" 'The ProbAandB.GivenA value has been defined.
        Else
            IncrementRanksAbove(ProbAandB.GivenA.Rank)  'Increment all other ranks that are lower than the ProbAandB.GivenA rank
            ProbAandB.GivenA.Rank = 1 'The ProbAandB.GivenA value is now ranked 1
            ProbAandB.GivenA.Status = "Defined" 'The ProbAandB.GivenA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbAandB.GivenA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbAandB_GivenNotADefinedValueChanged(Value As Double) Handles ProbAandB.GivenNotADefinedValueChanged
        'P(AandB|NotA) value has changed.

        'NOTE: The probability should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("ProbAandB.GivenNotA.Value = " & ProbAandB.GivenNotA.Value & vbCrLf)
            RaiseEvent ErrorMessage("This probability has been reset to the correct value of 0." & vbCrLf)
            ProbAandB.GivenNotA.Value = 0
            'ProbAandB.GivenNotA.UpdateLabelText()
            ProbAandB.GivenNotA.Status = "Defined"
        End If
    End Sub

    Private Sub ProbAandB_GivenBDefinedValueChanged(Value As Double) Handles ProbAandB.GivenBDefinedValueChanged
        'P(AandB|B) value has changed.

        'Adjust the probability value ranks:
        If ProbAandB.GivenB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbAandB.GivenB.Status = "Defined" 'The ProbAandB.GivenB value has been defined.
        Else
            IncrementRanksAbove(ProbAandB.GivenB.Rank)  'Increment all other ranks that are lower than the ProbAandB.GivenB rank
            ProbAandB.GivenB.Rank = 1 'The ProbAandB.GivenB value is now ranked 1
            ProbAandB.GivenB.Status = "Defined" 'The ProbAandB.GivenB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbAandB.GivenB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbAandB_GivenNotBDefinedValueChanged(Value As Double) Handles ProbAandB.GivenNotBDefinedValueChanged
        'P(AandB|NotB) value has changed.

        'NOTE: The probability should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("ProbAandB.GivenNotB.Value = " & ProbAandB.GivenNotB.Value & vbCrLf)
            RaiseEvent ErrorMessage("This probability has been reset to the correct value of 0." & vbCrLf)
            ProbAandB.GivenNotB.Value = 0
            'ProbAandB.GivenNotB.UpdateLabelText()
            ProbAandB.GivenNotB.Status = "Defined"
        End If
    End Sub

    Private Sub ProbAandNotB_DefinedValueChanged(Value As Double) Handles ProbAandNotB.DefinedValueChanged
        'P(AandNotB) value has changed.

        'Adjust the probability value ranks:
        If ProbAandNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbAandNotB.Status = "Defined" 'The ProbAandNotB value has been defined.
        Else
            IncrementRanksAbove(ProbAandNotB.Rank)  'Increment all other ranks that are lower than the ProbAandNotB rank
            ProbAandNotB.Rank = 1 'The ProbAandNotB value is now ranked 1
            ProbAandNotB.Status = "Defined" 'The ProbAandNotB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbAandNotB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbAandNotB_GivenADefinedValueChanged(Value As Double) Handles ProbAandNotB.GivenADefinedValueChanged
        'P(AandNotB|A) value has changed.

        'Adjust the probability value ranks:
        If ProbAandNotB.GivenA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbAandNotB.GivenA.Status = "Defined" 'The ProbAandNotB.GivenA value has been defined.
        Else
            IncrementRanksAbove(ProbAandNotB.GivenA.Rank)  'Increment all other ranks that are lower than the ProbAandNotB.GivenA rank
            ProbAandNotB.GivenA.Rank = 1 'The ProbAandNotB.GivenA value is now ranked 1
            ProbAandNotB.GivenA.Status = "Defined" 'The ProbAandNotB.GivenA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbAandNotB.GivenA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbAandNotB_GivenNotADefinedValueChanged(Value As Double) Handles ProbAandNotB.GivenNotADefinedValueChanged
        'P(AandNotB|NotA) value has changed.

        'NOTE: The probability should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("ProbAandNotB.GivenNotA.Value = " & ProbAandNotB.GivenNotA.Value & vbCrLf)
            RaiseEvent ErrorMessage("This probability has been reset to the correct value of 0." & vbCrLf)
            ProbAandNotB.GivenNotA.Value = 0
            'ProbAandNotB.GivenNotA.UpdateLabelText()
            ProbAandNotB.GivenNotA.Status = "Defined"
        End If
    End Sub

    Private Sub ProbAandNotB_GivenBDefinedValueChanged(Value As Double) Handles ProbAandNotB.GivenBDefinedValueChanged
        'P(AandNotB|B) value has changed.

        'NOTE: The probability should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("ProbAandNotB.GivenB.Value = " & ProbAandNotB.GivenB.Value & vbCrLf)
            RaiseEvent ErrorMessage("This probability has been reset to the correct value of 0." & vbCrLf)
            ProbAandNotB.GivenB.Value = 0
            'ProbAandNotB.GivenB.UpdateLabelText()
            ProbAandNotB.GivenB.Status = "Defined"
        End If
    End Sub

    Private Sub ProbAandNotB_GivenNotBDefinedValueChanged(Value As Double) Handles ProbAandNotB.GivenNotBDefinedValueChanged
        'P(AandNotB|NotB) value has changed.

        'Adjust the probability value ranks:
        If ProbAandNotB.GivenNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbAandNotB.GivenNotB.Status = "Defined" 'The ProbAandNotB.GivenNotB value has been defined.
        Else
            IncrementRanksAbove(ProbAandNotB.GivenNotB.Rank)  'Increment all other ranks that are lower than the ProbAandNotB.GivenNotB rank
            ProbAandNotB.GivenNotB.Rank = 1 'The ProbAandNotB.GivenNotB value is now ranked 1
            ProbAandNotB.GivenNotB.Status = "Defined" 'The ProbAandNotB.GivenNotB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbAandNotB.GivenNotB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbNotAandB_DefinedValueChanged(Value As Double) Handles ProbNotAandB.DefinedValueChanged
        'P(NotAandB) value has changed.

        'Adjust the probability value ranks:
        If ProbNotAandB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbNotAandB.Status = "Defined" 'The ProbNotAandB value has been defined.
        Else
            IncrementRanksAbove(ProbNotAandB.Rank)  'Increment all other ranks that are lower than the ProbNotAandB rank
            ProbNotAandB.Rank = 1 'The ProbNotAandB value is now ranked 1
            ProbNotAandB.Status = "Defined" 'The ProbNotAandB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbNotAandB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbNotAandB_GivenADefinedValueChanged(Value As Double) Handles ProbNotAandB.GivenADefinedValueChanged
        'P(NotAandB|A) value has changed.

        'NOTE: The probability should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("ProbNotAandB.GivenA.Value = " & ProbNotAandB.GivenA.Value & vbCrLf)
            RaiseEvent ErrorMessage("This probability has been reset to the correct value of 0." & vbCrLf)
            ProbNotAandB.GivenA.Value = 0
            'ProbNotAandB.GivenA.UpdateLabelText()
            ProbNotAandB.GivenA.Status = "Defined"
        End If
    End Sub

    Private Sub ProbNotAandB_GivenNotADefinedValueChanged(Value As Double) Handles ProbNotAandB.GivenNotADefinedValueChanged
        'P(NotAandB|NotA) value has changed.

        'Adjust the probability value ranks:
        If ProbNotAandB.GivenNotA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbNotAandB.GivenNotA.Status = "Defined" 'The ProbNotAandB.GivenNotA value has been defined.
        Else
            IncrementRanksAbove(ProbNotAandB.GivenNotA.Rank)  'Increment all other ranks that are lower than the ProbNotAandB.GivenNotA rank
            ProbNotAandB.GivenNotA.Rank = 1 'The ProbNotAandB.GivenNotA value is now ranked 1
            ProbNotAandB.GivenNotA.Status = "Defined" 'The ProbNotAandB.GivenNotA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbNotAandB.GivenNotA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbNotAandB_GivenBDefinedValueChanged(Value As Double) Handles ProbNotAandB.GivenBDefinedValueChanged
        'P(NotAandB|B) value has changed.

        'Adjust the probability value ranks:
        If ProbNotAandB.GivenB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbNotAandB.GivenB.Status = "Defined" 'The ProbNotAandB.GivenB value has been defined.
        Else
            IncrementRanksAbove(ProbNotAandB.GivenB.Rank)  'Increment all other ranks that are lower than the ProbNotAandB.GivenB rank
            ProbNotAandB.GivenB.Rank = 1 'The ProbNotAandB.GivenB value is now ranked 1
            ProbNotAandB.GivenB.Status = "Defined" 'The ProbNotAandB.GivenB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbNotAandB.GivenB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbNotAandB_GivenNotBDefinedValueChanged(Value As Double) Handles ProbNotAandB.GivenNotBDefinedValueChanged
        'P(NotAandB|NotB) value has changed.

        'NOTE: The probability should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("ProbNotAandB.GivenNotB.Value = " & ProbNotAandB.GivenNotB.Value & vbCrLf)
            RaiseEvent ErrorMessage("This probability has been reset to the correct value of 0." & vbCrLf)
            ProbNotAandB.GivenNotB.Value = 0
            'ProbNotAandB.GivenNotB.UpdateLabelText()
            ProbNotAandB.GivenNotB.Status = "Defined"
        End If
    End Sub

    Private Sub ProbNotAandNotB_DefinedValueChanged(Value As Double) Handles ProbNotAandNotB.DefinedValueChanged
        'P(NotAandNotB) value has changed.

        'Adjust the probability value ranks:
        If ProbNotAandNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbNotAandNotB.Status = "Defined" 'The ProbNotAandNotB value has been defined.
        Else
            IncrementRanksAbove(ProbNotAandNotB.Rank)  'Increment all other ranks that are lower than the ProbNotAandNotB rank
            ProbNotAandNotB.Rank = 1 'The ProbNotAandNotB value is now ranked 1
            ProbNotAandNotB.Status = "Defined" 'The ProbNotAandNotB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbNotAandNotB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbNotAandNotB_GivenADefinedValueChanged(Value As Double) Handles ProbNotAandNotB.GivenADefinedValueChanged
        'P(NotAandNotB|A) value has changed.

        'NOTE: The probability should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("ProbNotAandNotB.GivenA.Value = " & ProbNotAandNotB.GivenA.Value & vbCrLf)
            RaiseEvent ErrorMessage("This probability has been reset to the correct value of 0." & vbCrLf)
            ProbNotAandNotB.GivenA.Value = 0
            'ProbNotAandNotB.GivenA.UpdateLabelText()
            ProbNotAandNotB.GivenA.Status = "Defined"
        End If
    End Sub

    Private Sub ProbNotAandNotB_GivenNotADefinedValueChanged(Value As Double) Handles ProbNotAandNotB.GivenNotADefinedValueChanged
        'P(NotAandNotB|NotA) value has changed.

        'Adjust the probability value ranks:
        If ProbNotAandNotB.GivenNotA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbNotAandNotB.GivenNotA.Status = "Defined" 'The ProbNotAandNotB.GivenNotA value has been defined.
        Else
            IncrementRanksAbove(ProbNotAandNotB.GivenNotA.Rank)  'Increment all other ranks that are lower than the ProbNotAandNotB.GivenNotA rank
            ProbNotAandNotB.GivenNotA.Rank = 1 'The ProbNotAandNotB.GivenNotA value is now ranked 1
            ProbNotAandNotB.GivenNotA.Status = "Defined" 'The ProbNotAandNotB.GivenNotA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbNotAandNotB.GivenNotA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub ProbNotAandNotB_GivenBDefinedValueChanged(Value As Double) Handles ProbNotAandNotB.GivenBDefinedValueChanged
        'P(NotAandNotB|B) value has changed.

        'NOTE: The probability should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("ProbNotAandNotB.GivenB.Value = " & ProbNotAandNotB.GivenB.Value & vbCrLf)
            RaiseEvent ErrorMessage("This probability has been reset to the correct value of 0." & vbCrLf)
            ProbNotAandNotB.GivenB.Value = 0
            'ProbNotAandNotB.GivenB.UpdateLabelText()
            ProbNotAandNotB.GivenB.Status = "Defined"
        End If
    End Sub

    Private Sub ProbNotAandNotB_GivenNotBDefinedValueChanged(Value As Double) Handles ProbNotAandNotB.GivenNotBDefinedValueChanged
        'P(NotAandNotB|NotB) value has changed.

        'Adjust the probability value ranks:
        If ProbNotAandNotB.GivenNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            ProbNotAandNotB.GivenNotB.Status = "Defined" 'The ProbNotAandNotB.GivenNotB value has been defined.
        Else
            IncrementRanksAbove(ProbNotAandNotB.GivenNotB.Rank)  'Increment all other ranks that are lower than the ProbNotAandNotB.GivenNotB rank
            ProbNotAandNotB.GivenNotB.Rank = 1 'The ProbNotAandNotB.GivenNotB value is now ranked 1
            ProbNotAandNotB.GivenNotB.Status = "Defined" 'The ProbNotAandNotB.GivenNotB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the ProbNotAandNotB.GivenNotB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    'Private Sub SampsA_ValueChanged(Value As Double) Handles SampsA.ValueChanged
    Private Sub SampsA_DefinedValueChanged(Value As Double) Handles SampsA.DefinedValueChanged
        'n(A) value has changed.

        'Adjust the value ranks:
        If SampsA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsA.Status = "Defined" 'The SampsA value has been defined.
        Else
            IncrementRanksAbove(SampsA.Rank)  'Increment all other ranks that are lower than the SampsA rank
            SampsA.Rank = 1 'The SampsA value is now ranked 1
            SampsA.Status = "Defined" 'The SampsA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsA_GivenADefinedValueChanged(Value As Double) Handles SampsA.GivenADefinedValueChanged
        'n(A|A) value has changed.

        'Adjust the value ranks:
        If SampsA.GivenA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsA.GivenA.Status = "Defined" 'The SampsA.GivenA value has been defined.
        Else
            IncrementRanksAbove(SampsA.GivenA.Rank)  'Increment all other ranks that are lower than the SampsA.GivenA rank
            SampsA.GivenA.Rank = 1 'The SampsA.GivenA value is now ranked 1
            SampsA.GivenA.Status = "Defined" 'The SampsA.GivenA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsA.GivenA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsA_GivenNotADefinedValueChanged(Value As Double) Handles SampsA.GivenNotADefinedValueChanged
        'n(A|NotA) value has changed.

        'NOTE: The sample count should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("SampsA.GivenNotA.Value = " & SampsA.GivenNotA.Value & vbCrLf)
            RaiseEvent ErrorMessage("This sample count has been reset to the correct value of 0." & vbCrLf)
            'SampsA.GivenNotA._value = 0
            SampsA.GivenNotA.Value = 0
            'SampsA.GivenNotA.UpdateLabelText()
            SampsA.GivenNotA.Status = "Defined"
        End If
    End Sub

    Private Sub SampsA_GivenBDefinedValueChanged(Value As Double) Handles SampsA.GivenBDefinedValueChanged
        'n(A|B) value has changed.

        'Adjust the value ranks:
        If SampsA.GivenB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsA.GivenB.Status = "Defined" 'The SampsA.GivenB value has been defined.
        Else
            IncrementRanksAbove(SampsA.GivenB.Rank)  'Increment all other ranks that are lower than the SampsA.GivenB rank
            SampsA.GivenB.Rank = 1 'The SampsA.GivenA value is now ranked 1
            SampsA.GivenB.Status = "Defined" 'The SampsA.GivenB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsA.GivenB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsA_GivenNotBDefinedValueChanged(Value As Double) Handles SampsA.GivenNotBDefinedValueChanged
        'n(A|NotB) value has changed.

        'Adjust the value ranks:
        If SampsA.GivenNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsA.GivenNotB.Status = "Defined" 'The SampsA.GivenNotB value has been defined.
        Else
            IncrementRanksAbove(SampsA.GivenNotB.Rank)  'Increment all other ranks that are lower than the SampsA.GivenNotB rank
            SampsA.GivenNotB.Rank = 1 'The SampsA.GivenA value is now ranked 1
            SampsA.GivenNotB.Status = "Defined" 'The SampsA.GivenNotB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsA.GivenNotB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsNotA_DefinedValueChanged(Value As Double) Handles SampsB.DefinedValueChanged
        'n(NotA) value has changed.

        'Adjust the value ranks:
        If SampsNotA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotA.Status = "Defined" 'The SampsNotA value has been defined.
        Else
            IncrementRanksAbove(SampsNotA.Rank)  'Increment all other ranks that are lower than the SampsNotA rank
            SampsNotA.Rank = 1 'The SampsNotA value is now ranked 1
            SampsNotA.Status = "Defined" 'The SampsNotA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsNotA_GivenADefinedValueChanged(Value As Double) Handles SampsNotA.GivenADefinedValueChanged
        'n(NotA|A) value has changed.

        'NOTE: The sample count should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("SampsNotA.GivenA.Value = " & SampsNotA.GivenA.Value & vbCrLf)
            RaiseEvent ErrorMessage("This sample count has been reset to the correct value of 0." & vbCrLf)
            SampsNotA.GivenA.Value = 0
            'SampsNotA.GivenA.UpdateLabelText()
            SampsNotA.GivenA.Status = "Defined"
        End If
    End Sub

    Private Sub SampsNotA_GivenNotADefinedValueChanged(Value As Double) Handles SampsNotA.GivenNotADefinedValueChanged
        'n(NotA|NotA) value has changed.

        'Adjust the value ranks:
        If SampsNotA.GivenNotA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotA.GivenNotA.Status = "Defined" 'The SampsNotA.GivenNotA value has been defined.
        Else
            IncrementRanksAbove(SampsNotA.GivenNotA.Rank)  'Increment all other ranks that are lower than the SampsNotA.GivenNotA rank
            SampsNotA.GivenNotA.Rank = 1 'The SampsNotA.GivenNotA value is now ranked 1
            SampsNotA.GivenNotA.Status = "Defined" 'The SampsNotA.GivenNotA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotA.GivenNotA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsNotA_GivenBDefinedValueChanged(Value As Double) Handles SampsNotA.GivenBDefinedValueChanged
        'n(NotA|B) value has changed.

        'Adjust the value ranks:
        If SampsNotA.GivenB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotA.GivenB.Status = "Defined" 'The SampsNotA.GivenB value has been defined.
        Else
            IncrementRanksAbove(SampsNotA.GivenB.Rank)  'Increment all other ranks that are lower than the SampsNotA.GivenB rank
            SampsNotA.GivenB.Rank = 1 'The SampsNotA.GivenB value is now ranked 1
            SampsNotA.GivenB.Status = "Defined" 'The SampsNotA.GivenB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotA.GivenB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsNotA_GivenNotBDefinedValueChanged(Value As Double) Handles SampsNotA.GivenNotBDefinedValueChanged
        'n(NotA|NotB) value has changed.

        'Adjust the value ranks:
        If SampsNotA.GivenNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotA.GivenNotB.Status = "Defined" 'The SampsNotA.GivenNotB value has been defined.
        Else
            IncrementRanksAbove(SampsNotA.GivenNotB.Rank)  'Increment all other ranks that are lower than the SampsNotA.GivenNotB rank
            SampsNotA.GivenNotB.Rank = 1 'The SampsNotA.GivenNotB value is now ranked 1
            SampsNotA.GivenNotB.Status = "Defined" 'The SampsNotA.GivenNotB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotA.GivenNotB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsB_DefinedValueChanged(Value As Double) Handles SampsB.DefinedValueChanged
        'n(B) value has changed.

        'Adjust the value ranks:
        If SampsB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsB.Status = "Defined" 'The SampsB value has been defined.
        Else
            IncrementRanksAbove(SampsB.Rank)  'Increment all other ranks that are lower than the SampsB rank
            SampsB.Rank = 1 'The SampsB value is now ranked 1
            SampsB.Status = "Defined" 'The SampsB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsB_GivenADefinedValueChanged(Value As Double) Handles SampsB.GivenADefinedValueChanged
        'n(B|A) value has changed.

        'Adjust the value ranks:
        If SampsB.GivenA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsB.GivenA.Status = "Defined" 'The SampsB.GivenA value has been defined.
        Else
            IncrementRanksAbove(SampsB.GivenA.Rank)  'Increment all other ranks that are lower than the SampsB.GivenA rank
            SampsB.GivenA.Rank = 1 'The SampsB.GivenA value is now ranked 1
            SampsB.GivenA.Status = "Defined" 'The SampsB.GivenA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsB.GivenA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsB_GivenNotADefinedValueChanged(Value As Double) Handles SampsB.GivenNotADefinedValueChanged
        'n(B|NotA) value has changed.

        'Adjust the value ranks:
        If SampsB.GivenNotA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsB.GivenNotA.Status = "Defined" 'The SampsB.GivenNotA value has been defined.
        Else
            IncrementRanksAbove(SampsB.GivenNotA.Rank)  'Increment all other ranks that are lower than the SampsB.GivenNotA rank
            SampsB.GivenNotA.Rank = 1 'The SampsB.GivenNotA value is now ranked 1
            SampsB.GivenNotA.Status = "Defined" 'The SampsB.GivenNotA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsB.GivenNotA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsB_GivenBDefinedValueChanged(Value As Double) Handles SampsB.GivenBDefinedValueChanged
        'n(B|B) value has changed.

        'Adjust the value ranks:
        If SampsB.GivenB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsB.GivenB.Status = "Defined" 'The SampsB.GivenB value has been defined.
        Else
            IncrementRanksAbove(SampsB.GivenB.Rank)  'Increment all other ranks that are lower than the SampsB.GivenB rank
            SampsB.GivenB.Rank = 1 'The SampsB.GivenB value is now ranked 1
            SampsB.GivenB.Status = "Defined" 'The SampsB.GivenB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsB.GivenB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsB_GivenNotBDefinedValueChanged(Value As Double) Handles SampsB.GivenNotBDefinedValueChanged
        'n(B|NotB) value has changed.

        'NOTE: The sample count should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("SampsB.GivenNotB.Value = " & SampsB.GivenNotB.Value & vbCrLf)
            RaiseEvent ErrorMessage("This sample count has been reset to the correct value of 0." & vbCrLf)
            SampsB.GivenNotB.Value = 0
            'SampsB.GivenNotB.UpdateLabelText()
            SampsB.GivenNotB.Status = "Defined"
        End If
    End Sub

    Private Sub SampsNotB_DefinedValueChanged(Value As Double) Handles SampsNotB.DefinedValueChanged
        'n(NotB) value has changed.

        'Adjust the value ranks:
        If SampsNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotB.Status = "Defined" 'The SampsNotB value has been defined.
        Else
            IncrementRanksAbove(SampsNotB.Rank)  'Increment all other ranks that are lower than the SampsNotB rank
            SampsNotB.Rank = 1 'The SampsNotB value is now ranked 1
            SampsNotB.Status = "Defined" 'The SampsNotB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsNotB_GivenADefinedValueChanged(Value As Double) Handles SampsNotB.GivenADefinedValueChanged
        'n(NotB|A) value has changed.

        'Adjust the value ranks:
        If SampsNotB.GivenA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotB.GivenA.Status = "Defined" 'The SampsNotB.GivenA value has been defined.
        Else
            IncrementRanksAbove(SampsNotB.GivenA.Rank)  'Increment all other ranks that are lower than the SampsNotB.GivenA rank
            SampsNotB.GivenA.Rank = 1 'The SampsNotB.GivenA value is now ranked 1
            SampsNotB.GivenA.Status = "Defined" 'The SampsNotB.GivenA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotB.GivenA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsNotB_GivenNotADefinedValueChanged(Value As Double) Handles SampsNotB.GivenNotADefinedValueChanged
        'n(NotB|NotA) value has changed.

        'Adjust the value ranks:
        If SampsNotB.GivenNotA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotB.GivenNotA.Status = "Defined" 'The SampsNotB.GivenNotA value has been defined.
        Else
            IncrementRanksAbove(SampsNotB.GivenNotA.Rank)  'Increment all other ranks that are lower than the SampsNotB.GivenNotA rank
            SampsNotB.GivenNotA.Rank = 1 'The SampsNotB.GivenNotA value is now ranked 1
            SampsNotB.GivenNotA.Status = "Defined" 'The SampsNotB.GivenNotA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotB.GivenNotA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsNotB_GivenBDefinedValueChanged(Value As Double) Handles SampsNotB.GivenBDefinedValueChanged
        'n(NotB|B) value has changed.

        'NOTE: The sample count should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("SampsNotB.GivenB.Value = " & SampsNotB.GivenB.Value & vbCrLf)
            RaiseEvent ErrorMessage("This sample count has been reset to the correct value of 0." & vbCrLf)
            SampsNotB.GivenB.Value = 0
            'SampsNotB.GivenB.UpdateLabelText()
            SampsNotB.GivenB.Status = "Defined"
        End If
    End Sub

    Private Sub SampsNotB_GivenNotBDefinedValueChanged(Value As Double) Handles SampsNotB.GivenNotBDefinedValueChanged
        'n(NotB|NotB) value has changed.

        'Adjust the value ranks:
        If SampsNotB.GivenNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotB.GivenNotB.Status = "Defined" 'The SampsNotB.GivenNotB value has been defined.
        Else
            IncrementRanksAbove(SampsNotB.GivenNotB.Rank)  'Increment all other ranks that are lower than the SampsNotB.GivenNotB rank
            SampsNotB.GivenNotB.Rank = 1 'The SampsNotB.GivenNotB value is now ranked 1
            SampsNotB.GivenNotB.Status = "Defined" 'The SampsNotB.GivenNotB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotB.GivenNotB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub


    Private Sub SampsAandB_DefinedValueChanged(Value As Double) Handles SampsAandB.DefinedValueChanged
        'n(AandB) value has changed.

        'Adjust the value ranks:
        If SampsAandB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsAandB.Status = "Defined" 'The SampsAandB value has been defined.
        Else
            IncrementRanksAbove(SampsAandB.Rank)  'Increment all other ranks that are lower than the SampsAandB rank
            SampsAandB.Rank = 1 'The SampsAandB value is now ranked 1
            SampsAandB.Status = "Defined" 'The SampsAandB value has been defined.
        End If

        'RaiseEvent Message("SampsAandB.DefinedValueChanged" & vbCrLf)
        'RaiseEvent Message("SampleSize.Rank = " & SampleSize.Rank & vbCrLf)
        'RaiseEvent Message("SampleSize.Status = " & SampleSize.Status & vbCrLf)
        'RaiseEvent Message("SampleSize.Value = " & SampleSize.Value & vbCrLf)
        'RaiseEvent Message("UndefineValues()" & vbCrLf)

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsAandB value change and will be recalculated

        'RaiseEvent Message("SampleSize.Rank = " & SampleSize.Rank & vbCrLf)
        'RaiseEvent Message("SampleSize.Status = " & SampleSize.Status & vbCrLf)
        'RaiseEvent Message("SampleSize.Value = " & SampleSize.Value & vbCrLf)
        'RaiseEvent Message("RecalculateAllSampleCounts()" & vbCrLf)

        RecalculateAllSampleCounts()

        'RaiseEvent Message("SampleSize.Rank = " & SampleSize.Rank & vbCrLf)
        'RaiseEvent Message("SampleSize.Status = " & SampleSize.Status & vbCrLf)
        'RaiseEvent Message("SampleSize.Value = " & SampleSize.Value & vbCrLf & vbCrLf)

        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsAandB_GivenADefinedValueChanged(Value As Double) Handles SampsAandB.GivenADefinedValueChanged
        'n(AandB|A) value has changed.

        'Adjust the value ranks:
        If SampsAandB.GivenA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsAandB.GivenA.Status = "Defined" 'The SampsAandB.GivenA value has been defined.
        Else
            IncrementRanksAbove(SampsAandB.GivenA.Rank)  'Increment all other ranks that are lower than the SampsAandB.GivenA rank
            SampsAandB.GivenA.Rank = 1 'The SampsAandB.GivenA value is now ranked 1
            SampsAandB.GivenA.Status = "Defined" 'The SampsAandB.GivenA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsAandB.GivenA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsAandB_GivenNotADefinedValueChanged(Value As Double) Handles SampsAandB.GivenNotADefinedValueChanged
        'n(AandB|NotA) value has changed.

        'NOTE: The sample count should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("SampsAandB.GivenNotA.Value = " & SampsAandB.GivenNotA.Value & vbCrLf)
            RaiseEvent ErrorMessage("This sample count has been reset to the correct value of 0." & vbCrLf)
            SampsAandB.GivenNotA.Value = 0
            'SampsAandB.GivenNotA.UpdateLabelText()
            SampsAandB.GivenNotA.Status = "Defined"
        End If
    End Sub

    Private Sub SampsAandB_GivenBDefinedValueChanged(Value As Double) Handles SampsAandB.GivenBDefinedValueChanged
        'n(AandB|B) value has changed.

        'Adjust the value ranks:
        If SampsAandB.GivenB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsAandB.GivenB.Status = "Defined" 'The SampsAandB.GivenB value has been defined.
        Else
            IncrementRanksAbove(SampsAandB.GivenB.Rank)  'Increment all other ranks that are lower than the SampsAandB.GivenB rank
            SampsAandB.GivenB.Rank = 1 'The SampsAandB.GivenB value is now ranked 1
            SampsAandB.GivenB.Status = "Defined" 'The SampsAandB.GivenB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsAandB.GivenB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsAandB_GivenNotBDefinedValueChanged(Value As Double) Handles SampsAandB.GivenNotBDefinedValueChanged
        'n(AandB|NotB) value has changed.

        'NOTE: The sample count should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("SampsAandB.GivenNotB.Value = " & SampsAandB.GivenNotB.Value & vbCrLf)
            RaiseEvent ErrorMessage("This sample count has been reset to the correct value of 0." & vbCrLf)
            SampsAandB.GivenNotB.Value = 0
            'SampsAandB.GivenNotB.UpdateLabelText()
            SampsAandB.GivenNotB.Status = "Defined"
        End If
    End Sub


    Private Sub SampsAandNotB_DefinedValueChanged(Value As Double) Handles SampsAandNotB.DefinedValueChanged
        'n(AandNotB) value has changed.

        'Adjust the value ranks:
        If SampsAandNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsAandNotB.Status = "Defined" 'The SampsAandNotB value has been defined.
        Else
            IncrementRanksAbove(SampsAandNotB.Rank)  'Increment all other ranks that are lower than the SampsAandNotB rank
            SampsAandNotB.Rank = 1 'The SampsAandNotB value is now ranked 1
            SampsAandNotB.Status = "Defined" 'The SampsAandNotB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsAandNotB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsAandNotB_GivenADefinedValueChanged(Value As Double) Handles SampsAandNotB.GivenADefinedValueChanged
        'n(AandNotB|A) value has changed.

        'Adjust the value ranks:
        If SampsAandNotB.GivenA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsAandNotB.GivenA.Status = "Defined" 'The SampsAandNotB.GivenA value has been defined.
        Else
            IncrementRanksAbove(SampsAandNotB.GivenA.Rank)  'Increment all other ranks that are lower than the SampsAandNotB.GivenA rank
            SampsAandNotB.GivenA.Rank = 1 'The SampsAandNotB.GivenA value is now ranked 1
            SampsAandNotB.GivenA.Status = "Defined" 'The SampsAandNotB.GivenA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsAandNotB.GivenA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsAandNotB_GivenNotADefinedValueChanged(Value As Double) Handles SampsAandNotB.GivenNotADefinedValueChanged
        'n(AandNotB|NotA) value has changed.

        'Adjust the value ranks:
        If SampsAandNotB.GivenNotA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsAandNotB.GivenNotA.Status = "Defined" 'The SampsAandNotB.GivenNotA value has been defined.
        Else
            IncrementRanksAbove(SampsAandNotB.GivenNotA.Rank)  'Increment all other ranks that are lower than the SampsAandNotB.GivenNotA rank
            SampsAandNotB.GivenNotA.Rank = 1 'The SampsAandNotB.GivenNotA value is now ranked 1
            SampsAandNotB.GivenNotA.Status = "Defined" 'The SampsAandNotB.GivenNotA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsAandNotB.GivenNotA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsAandNotB_GivenBDefinedValueChanged(Value As Double) Handles SampsAandNotB.GivenBDefinedValueChanged
        'n(AandNotB|B) value has changed.

        'NOTE: The sample count should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("SampsAandNotB.GivenB.Value = " & SampsAandNotB.GivenB.Value & vbCrLf)
            RaiseEvent ErrorMessage("This sample count has been reset to the correct value of 0." & vbCrLf)
            SampsAandNotB.GivenB.Value = 0
            'SampsAandNotB.GivenB.UpdateLabelText()
            SampsAandNotB.GivenB.Status = "Defined"
        End If
    End Sub

    Private Sub SampsAandNotB_GivenNotBDefinedValueChanged(Value As Double) Handles SampsAandNotB.GivenNotBDefinedValueChanged
        'n(AandNotB|NotB) value has changed.

        'Adjust the value ranks:
        If SampsAandNotB.GivenNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsAandNotB.GivenNotB.Status = "Defined" 'The SampsAandNotB.GivenNotB value has been defined.
        Else
            IncrementRanksAbove(SampsAandNotB.GivenNotB.Rank)  'Increment all other ranks that are lower than the SampsAandNotB.GivenNotB rank
            SampsAandNotB.GivenNotB.Rank = 1 'The SampsAandNotB.GivenNotB value is now ranked 1
            SampsAandNotB.GivenNotB.Status = "Defined" 'The SampsAandNotB.GivenNotB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsAandNotB.GivenNotB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub



    Private Sub SampsNotAandB_DefinedValueChanged(Value As Double) Handles SampsNotAandB.DefinedValueChanged
        'n(NotAandB) value has changed.

        'Adjust the value ranks:
        If SampsNotAandB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotAandB.Status = "Defined" 'The SampsNotAandB value has been defined.
        Else
            IncrementRanksAbove(SampsNotAandB.Rank)  'Increment all other ranks that are lower than the SampsNotAandB rank
            SampsNotAandB.Rank = 1 'The SampsNotAandB value is now ranked 1
            SampsNotAandB.Status = "Defined" 'The SampsNotAandB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotAandB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsNotAandB_GivenADefinedValueChanged(Value As Double) Handles SampsNotAandB.GivenADefinedValueChanged
        'n(NotAandB|A) value has changed.

        'NOTE: The sample count should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("SampsNotAandB.GivenA.Value = " & SampsNotAandB.GivenA.Value & vbCrLf)
            RaiseEvent ErrorMessage("This sample count has been reset to the correct value of 0." & vbCrLf)
            SampsNotAandB.GivenA.Value = 0
            'SampsNotAandB.GivenA.UpdateLabelText()
            SampsNotAandB.GivenA.Status = "Defined"
        End If
    End Sub

    Private Sub SampsNotAandB_GivenNotADefinedValueChanged(Value As Double) Handles SampsNotAandB.GivenNotADefinedValueChanged
        'n(NotAandB|NotA) value has changed.

        'Adjust the value ranks:
        If SampsNotAandB.GivenNotA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotAandB.GivenNotA.Status = "Defined" 'The SampsNotAandB.GivenNotA value has been defined.
        Else
            IncrementRanksAbove(SampsNotAandB.GivenNotA.Rank)  'Increment all other ranks that are lower than the SampsNotAandB.GivenNotA rank
            SampsNotAandB.GivenNotA.Rank = 1 'The SampsNotAandB.GivenNotA value is now ranked 1
            SampsNotAandB.GivenNotA.Status = "Defined" 'The SampsNotAandB.GivenNotA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotAandB.GivenNotA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsNotAandB_GivenBDefinedValueChanged(Value As Double) Handles SampsNotAandB.GivenBDefinedValueChanged
        'n(NotAandB|B) value has changed.

        'Adjust the value ranks:
        If SampsNotAandB.GivenB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotAandB.GivenB.Status = "Defined" 'The SampsNotAandB.GivenB value has been defined.
        Else
            IncrementRanksAbove(SampsNotAandB.GivenB.Rank)  'Increment all other ranks that are lower than the SampsNotAandB.GivenB rank
            SampsNotAandB.GivenB.Rank = 1 'The SampsNotAandB.GivenB value is now ranked 1
            SampsNotAandB.GivenB.Status = "Defined" 'The SampsNotAandB.GivenB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotAandB.GivenB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsNotAandB_GivenNotBDefinedValueChanged(Value As Double) Handles SampsNotAandB.GivenNotBDefinedValueChanged
        'n(NotAandB|NotB) value has changed.

        'NOTE: The sample count should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("SampsNotAandB.GivenNotB.Value = " & SampsNotAandB.GivenNotB.Value & vbCrLf)
            RaiseEvent ErrorMessage("This sample count has been reset to the correct value of 0." & vbCrLf)
            SampsNotAandB.GivenNotB.Value = 0
            'SampsNotAandB.GivenNotB.UpdateLabelText()
            SampsNotAandB.GivenNotB.Status = "Defined"
        End If
    End Sub



    Private Sub SampsNotAandNotB_DefinedValueChanged(Value As Double) Handles SampsNotAandNotB.DefinedValueChanged
        'n(NotAandNotB) value has changed.

        'Adjust the value ranks:
        If SampsNotAandNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotAandNotB.Status = "Defined" 'The SampsNotAandNotB value has been defined.
        Else
            IncrementRanksAbove(SampsNotAandNotB.Rank)  'Increment all other ranks that are lower than the SampsNotAandNotB rank
            SampsNotAandNotB.Rank = 1 'The SampsNotAandNotB value is now ranked 1
            SampsNotAandNotB.Status = "Defined" 'The SampsNotAandNotB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotAandNotB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsNotAandNotB_GivenADefinedValueChanged(Value As Double) Handles SampsNotAandNotB.GivenADefinedValueChanged
        'n(NotAandNotB|A) value has changed.

        'NOTE: The sample count should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("SampsNotAandNotB.GivenA.Value = " & SampsNotAandNotB.GivenA.Value & vbCrLf)
            RaiseEvent ErrorMessage("This sample count has been reset to the correct value of 0." & vbCrLf)
            SampsNotAandNotB.GivenA.Value = 0
            'SampsNotAandNotB.GivenA.UpdateLabelText()
            SampsNotAandNotB.GivenA.Status = "Defined"
        End If
    End Sub

    Private Sub SampsNotAandNotB_GivenNotADefinedValueChanged(Value As Double) Handles SampsNotAandNotB.GivenNotADefinedValueChanged
        'n(NotAandNotB|NotA) value has changed.

        'Adjust the value ranks:
        If SampsNotAandNotB.GivenNotA.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotAandNotB.GivenNotA.Status = "Defined" 'The SampsNotAandNotB.GivenNotA value has been defined.
        Else
            IncrementRanksAbove(SampsNotAandNotB.GivenNotA.Rank)  'Increment all other ranks that are lower than the SampsNotAandNotB.GivenNotA rank
            SampsNotAandNotB.GivenNotA.Rank = 1 'The SampsNotAandNotB.GivenNotA value is now ranked 1
            SampsNotAandNotB.GivenNotA.Status = "Defined" 'The SampsNotAandNotB.GivenNotA value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotAandNotB.GivenNotA value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampsNotAandNotB_GivenBDefinedValueChanged(Value As Double) Handles SampsNotAandNotB.GivenBDefinedValueChanged
        'n(NotAandNotB|B) value has changed.

        'NOTE: The sample count should always be 0.
        If Value <> 0 Then
            RaiseEvent ErrorMessage("SampsNotAandNotB.GivenB.Value = " & SampsNotAandNotB.GivenB.Value & vbCrLf)
            RaiseEvent ErrorMessage("This sample count has been reset to the correct value of 0." & vbCrLf)
            SampsNotAandNotB.GivenB.Value = 0
            'SampsNotAandNotB.GivenB.UpdateLabelText()
            SampsNotAandNotB.GivenB.Status = "Defined"
        End If
    End Sub

    Private Sub SampsNotAandNotB_GivenNotBDefinedValueChanged(Value As Double) Handles SampsNotAandNotB.GivenNotBDefinedValueChanged
        'n(NotAandNotB|NotB) value has changed.

        'Adjust the value ranks:
        If SampsNotAandNotB.GivenNotB.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampsNotAandNotB.GivenNotB.Status = "Defined" 'The SampsNotAandNotB.GivenNotB value has been defined.
        Else
            'DecrementRanks(SampsNotAandNotB.GivenNotB.Rank)  'Increment all other ranks that are higher than the SampsNotAandNotB.GivenNotB rank
            IncrementRanksAbove(SampsNotAandNotB.GivenNotB.Rank)  'Increment all other ranks that are lower than the SampsNotAandNotB.GivenNotB rank
            SampsNotAandNotB.GivenNotB.Rank = 1 'The SampsNotAandNotB.GivenNotB value is now ranked 1
            SampsNotAandNotB.GivenNotB.Status = "Defined" 'The SampsNotAandNotB.GivenNotB value has been defined.
        End If

        UndefineValuesAbove(4) 'Flag all variables above Rank 4 as Undefined - these may be affected by the SampsNotAandNotB.GivenNotB value change and will be recalculated
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()
    End Sub

    Private Sub SampleSize_DefinedValueChanged(Value As Double) Handles SampleSize.DefinedValueChanged
        'The SampleSize has changed.

        'Adjust the value ranks:
        If SampleSize.Rank = 1 Then
            'Leave the rank at 1 (top rank)
            SampleSize.Status = "Defined"
        Else
            IncrementRanksAbove(SampleSize.Rank)
            SampleSize.Rank = 1
            SampleSize.Status = "Defined"
        End If

        'Only need to recalculate the Sample Counts:
        UndefineSampsAbove(1)
        RecalculateAllSampleCounts()
        CalculateSamplesAndProbabilites()

    End Sub



    Private Sub UpdateAccuracy()
        'Update the Accuracy test performance measure.
        'Performance.Accuracy = (ProbA.GivenB.Value + ProbNotA.GivenNotB.Value) / (ProbA.GivenB.Value + ProbNotA.GivenB.Value + ProbA.GivenNotB.Value + ProbNotA.GivenNotB.Value)
        Performance.Accuracy = (SampsA.GivenB.Value + SampsNotA.GivenNotB.Value) / (SampsA.GivenB.Value + SampsNotA.GivenB.Value + SampsA.GivenNotB.Value + SampsNotA.GivenNotB.Value)
    End Sub

    Private Sub UpdatePrecision()
        'Update the Precision test performance measure.
        'Performance.Precision = ProbA.GivenB.Value / (ProbA.GivenB.Value + ProbNotA.GivenB.Value)
        Performance.Precision = SampsA.GivenB.Value / (SampsA.GivenB.Value + SampsNotA.GivenB.Value)
    End Sub

    Private Sub UpdateSensitivity()
        'Update the Sensitivity test performance measure.
        'Performance.Sensitivity = ProbA.GivenB.Value / (ProbA.GivenB.Value + ProbA.GivenNotB.Value)
        Performance.Sensitivity = SampsA.GivenB.Value / (SampsA.GivenB.Value + SampsA.GivenNotB.Value) 'Sensitivity = TP / (TP + FN)
    End Sub

    Private Sub UpdateSpecificity()
        'Update the Specificity test performance measure.
        'Performance.Specificity = ProbNotA.GivenNotB.Value / (ProbNotA.GivenNotB.Value + ProbNotA.GivenB.Value)
        Performance.Specificity = SampsNotA.GivenNotB.Value / (SampsNotA.GivenNotB.Value + SampsNotA.GivenB.Value) 'Specificity = TN / (TN + FP)
    End Sub

    Private Sub UpdatePrevalence()
        'Update the Prevalence of the specified condition.
        Performance.Prevalence = (SampsA.GivenB.Value + SampsA.GivenNotB.Value) / (SampsA.GivenB.Value + SampsNotA.GivenNotB.Value + SampsNotA.GivenB.Value + SampsA.GivenNotB.Value)     'Prevalence = (TP + FN) / (TP + TN + FP + FN)
    End Sub


    Private Sub UpdateF1_Score()
        Performance.F1_Score = 2 * Performance.Sensitivity * Performance.Precision / (Performance.Sensitivity + Performance.Precision)
    End Sub

    Private Sub UpdatePerformanceMeasures()
        'Update all of the Performance measures.

        'TP = True Positives  = SampsA.GivenB.Value
        'TN = True Negatives  = SampsNotA.GivenNotB.Value
        'FP = False Negatives = SampsNotA.GivenB.Value
        'FN = False Negatives = SampsA.GivenNotB.Value

        'To avoid divide by zero issues:
        'Calculate Specificity
        ' then FalseNegativeRate (NegativeLikelihoodRatio = FalseNegativeRate / Specificity)
        ' then FalsePositiveRate (PositiveLikelihoodRatio = Sensitivity / FalsePositiveRate)

        Performance.Accuracy = (SampsA.GivenB.Value + SampsNotA.GivenNotB.Value) / (SampsA.GivenB.Value + SampsNotA.GivenB.Value + SampsA.GivenNotB.Value + SampsNotA.GivenNotB.Value)  'Accuracy = (TP + TN) / (TP + FP + FN + TN)
        Performance.Precision = SampsA.GivenB.Value / (SampsA.GivenB.Value + SampsNotA.GivenB.Value)                                                                                    'Precision = TP / (TP + FP)
        Performance.NegativePredictiveValue = SampsNotA.GivenNotB.Value / (SampsA.GivenNotB.Value + SampsNotA.GivenNotB.Value)                                                          'NegativePredictiveValue = TN / (FN + TN)
        Performance.Sensitivity = SampsA.GivenB.Value / (SampsA.GivenB.Value + SampsA.GivenNotB.Value)                                                                                  'Sensitivity = TP / (TP + FN)
        Performance.Specificity = SampsNotA.GivenNotB.Value / (SampsNotA.GivenNotB.Value + SampsNotA.GivenB.Value)                                                                      'Specificity = TN / (TN + FP)
        Performance.Prevalence = (SampsA.GivenB.Value + SampsA.GivenNotB.Value) / (SampsA.GivenB.Value + SampsNotA.GivenNotB.Value + SampsNotA.GivenB.Value + SampsA.GivenNotB.Value)   'Prevalence = (TP + FN) / (TP + TN + FP + FN)
        Performance.FalseNegativeRate = SampsA.GivenNotB.Value / (SampsA.GivenB.Value + SampsA.GivenNotB.Value)                                                                         'FalseNegativeRate = FN / (TP + FN)
        Performance.FalsePositiveRate = SampsNotA.GivenB.Value / (SampsNotA.GivenB.Value + SampsNotA.GivenNotB.Value)                                                                   'FalsePositiveRate = FP / (FP + TN)
        Performance.FalseOmissionRate = SampsA.GivenNotB.Value / (SampsA.GivenNotB.Value + SampsNotA.GivenNotB.Value)                                                                   'FalseOmissionRate = FN / (FN + TN)
        Performance.FalseDiscoveryRate = SampsNotA.GivenB.Value / (SampsA.GivenB.Value + SampsNotA.GivenB.Value)                                                                        'FalseDiscoveryRate = FP / (TP + FP)

        'Note: F1_Score, PositiveLikelihoodRatio, NegativeLikelihoodRatio and DiagnosticOddsRatio are updated automatically when the other measures are recalculated.

    End Sub

    'Private Sub DecrementRanks(ByVal ChangedRank As Integer)
    '    Private Sub IncrementRanks(ByVal ChangedRank As Integer)
    Private Sub IncrementRanksAbove(ByVal ChangedRank As Integer)
        'Increment variable ranks above the changed rank.
        'Variables of Rank 1, 2 and 3 have been defined most recently and will not be changed. All other variables will be adjusted to be consistent with these inputs.

        'RaiseEvent Message("DecrementRanks(" & ChangedRank & ")" & vbCrLf) 'For debugging

        'Unconditional probabilites:
        'If ProbA.Rank < ChangedRank Then ProbA.Rank -= 1
        If ProbA.Rank < ChangedRank Then ProbA.Rank += 1
        If ProbNotA.Rank < ChangedRank Then ProbNotA.Rank += 1
        If ProbB.Rank < ChangedRank Then ProbB.Rank += 1
        If ProbNotB.Rank < ChangedRank Then ProbNotB.Rank += 1
        If ProbAandB.Rank < ChangedRank Then ProbAandB.Rank += 1
        If ProbAandNotB.Rank < ChangedRank Then ProbAandNotB.Rank += 1
        If ProbNotAandB.Rank < ChangedRank Then ProbNotAandB.Rank += 1
        If ProbNotAandNotB.Rank < ChangedRank Then ProbNotAandNotB.Rank += 1

        'Conditional probabilities
        If ProbA.GivenA.Rank < ChangedRank Then ProbA.GivenA.Rank += 1
        If ProbNotA.GivenA.Rank < ChangedRank Then ProbNotA.GivenA.Rank += 1
        If ProbB.GivenA.Rank < ChangedRank Then ProbB.GivenA.Rank += 1
        If ProbNotB.GivenA.Rank < ChangedRank Then ProbNotB.GivenA.Rank += 1
        If ProbAandB.GivenA.Rank < ChangedRank Then ProbAandB.GivenA.Rank += 1
        If ProbAandNotB.GivenA.Rank < ChangedRank Then ProbAandNotB.GivenA.Rank += 1
        If ProbNotAandB.GivenA.Rank < ChangedRank Then ProbNotAandB.GivenA.Rank += 1
        If ProbNotAandNotB.GivenA.Rank < ChangedRank Then ProbNotAandNotB.GivenA.Rank += 1

        If ProbA.GivenNotA.Rank < ChangedRank Then ProbA.GivenNotA.Rank += 1
        If ProbNotA.GivenNotA.Rank < ChangedRank Then ProbNotA.GivenNotA.Rank += 1
        If ProbB.GivenNotA.Rank < ChangedRank Then ProbB.GivenNotA.Rank += 1
        If ProbNotB.GivenNotA.Rank < ChangedRank Then ProbNotB.GivenNotA.Rank += 1
        If ProbAandB.GivenNotA.Rank < ChangedRank Then ProbAandB.GivenNotA.Rank += 1
        If ProbAandNotB.GivenNotA.Rank < ChangedRank Then ProbAandNotB.GivenNotA.Rank += 1
        If ProbNotAandB.GivenNotA.Rank < ChangedRank Then ProbNotAandB.GivenNotA.Rank += 1
        If ProbNotAandNotB.GivenNotA.Rank < ChangedRank Then ProbNotAandNotB.GivenNotA.Rank += 1

        If ProbA.GivenB.Rank < ChangedRank Then ProbA.GivenB.Rank += 1
        If ProbNotA.GivenB.Rank < ChangedRank Then ProbNotA.GivenB.Rank += 1
        If ProbB.GivenB.Rank < ChangedRank Then ProbB.GivenB.Rank += 1
        If ProbNotB.GivenB.Rank < ChangedRank Then ProbNotB.GivenB.Rank += 1
        If ProbAandB.GivenB.Rank < ChangedRank Then ProbAandB.GivenB.Rank += 1
        If ProbAandNotB.GivenB.Rank < ChangedRank Then ProbAandNotB.GivenB.Rank += 1
        If ProbNotAandB.GivenB.Rank < ChangedRank Then ProbNotAandB.GivenB.Rank += 1
        If ProbNotAandNotB.GivenB.Rank < ChangedRank Then ProbNotAandNotB.GivenB.Rank += 1

        If ProbA.GivenNotB.Rank < ChangedRank Then ProbA.GivenNotB.Rank += 1
        If ProbNotA.GivenNotB.Rank < ChangedRank Then ProbNotA.GivenNotB.Rank += 1
        If ProbB.GivenNotB.Rank < ChangedRank Then ProbB.GivenNotB.Rank += 1
        If ProbNotB.GivenNotB.Rank < ChangedRank Then ProbNotB.GivenNotB.Rank += 1
        If ProbAandB.GivenNotB.Rank < ChangedRank Then ProbAandB.GivenNotB.Rank += 1
        If ProbAandNotB.GivenNotB.Rank < ChangedRank Then ProbAandNotB.GivenNotB.Rank += 1
        If ProbNotAandB.GivenNotB.Rank < ChangedRank Then ProbNotAandB.GivenNotB.Rank += 1
        If ProbNotAandNotB.GivenNotB.Rank < ChangedRank Then ProbNotAandNotB.GivenNotB.Rank += 1

        'Unconditional sample counts:
        If SampsA.Rank < ChangedRank Then SampsA.Rank += 1
        If SampsNotA.Rank < ChangedRank Then SampsNotA.Rank += 1
        If SampsB.Rank < ChangedRank Then SampsB.Rank += 1
        If SampsNotB.Rank < ChangedRank Then SampsNotB.Rank += 1
        If SampsAandB.Rank < ChangedRank Then SampsAandB.Rank += 1
        If SampsAandNotB.Rank < ChangedRank Then SampsAandNotB.Rank += 1
        If SampsNotAandB.Rank < ChangedRank Then SampsNotAandB.Rank += 1
        If SampsNotAandNotB.Rank < ChangedRank Then SampsNotAandNotB.Rank += 1
        If SampleSize.Rank < ChangedRank Then SampleSize.Rank += 1

        'Conditional sample counts
        If SampsA.GivenA.Rank < ChangedRank Then SampsA.GivenA.Rank += 1
        If SampsNotA.GivenA.Rank < ChangedRank Then SampsNotA.GivenA.Rank += 1
        If SampsB.GivenA.Rank < ChangedRank Then SampsB.GivenA.Rank += 1
        If SampsNotB.GivenA.Rank < ChangedRank Then SampsNotB.GivenA.Rank += 1
        If SampsAandB.GivenA.Rank < ChangedRank Then SampsAandB.GivenA.Rank += 1
        If SampsAandNotB.GivenA.Rank < ChangedRank Then SampsAandNotB.GivenA.Rank += 1
        If SampsNotAandB.GivenA.Rank < ChangedRank Then SampsNotAandB.GivenA.Rank += 1
        If SampsNotAandNotB.GivenA.Rank < ChangedRank Then SampsNotAandNotB.GivenA.Rank += 1
        If SampleSize.GivenA.Rank < ChangedRank Then SampleSize.GivenA.Rank += 1

        If SampsA.GivenNotA.Rank < ChangedRank Then SampsA.GivenNotA.Rank += 1
        If SampsNotA.GivenNotA.Rank < ChangedRank Then SampsNotA.GivenNotA.Rank += 1
        If SampsB.GivenNotA.Rank < ChangedRank Then SampsB.GivenNotA.Rank += 1
        If SampsNotB.GivenNotA.Rank < ChangedRank Then SampsNotB.GivenNotA.Rank += 1
        If SampsAandB.GivenNotA.Rank < ChangedRank Then SampsAandB.GivenNotA.Rank += 1
        If SampsAandNotB.GivenNotA.Rank < ChangedRank Then SampsAandNotB.GivenNotA.Rank += 1
        If SampsNotAandB.GivenNotA.Rank < ChangedRank Then SampsNotAandB.GivenNotA.Rank += 1
        If SampsNotAandNotB.GivenNotA.Rank < ChangedRank Then SampsNotAandNotB.GivenNotA.Rank += 1
        If SampleSize.GivenNotA.Rank < ChangedRank Then SampleSize.GivenNotA.Rank += 1

        If SampsA.GivenB.Rank < ChangedRank Then SampsA.GivenB.Rank += 1
        If SampsNotA.GivenB.Rank < ChangedRank Then SampsNotA.GivenB.Rank += 1
        If SampsB.GivenB.Rank < ChangedRank Then SampsB.GivenB.Rank += 1
        If SampsNotB.GivenB.Rank < ChangedRank Then SampsNotB.GivenB.Rank += 1
        If SampsAandB.GivenB.Rank < ChangedRank Then SampsAandB.GivenB.Rank += 1
        If SampsAandNotB.GivenB.Rank < ChangedRank Then SampsAandNotB.GivenB.Rank += 1
        If SampsNotAandB.GivenB.Rank < ChangedRank Then SampsNotAandB.GivenB.Rank += 1
        If SampsNotAandNotB.GivenB.Rank < ChangedRank Then SampsNotAandNotB.GivenB.Rank += 1
        If SampleSize.GivenB.Rank < ChangedRank Then SampleSize.GivenB.Rank += 1

        If SampsA.GivenNotB.Rank < ChangedRank Then SampsA.GivenNotB.Rank += 1
        If SampsNotA.GivenNotB.Rank < ChangedRank Then SampsNotA.GivenNotB.Rank += 1
        If SampsB.GivenNotB.Rank < ChangedRank Then SampsB.GivenNotB.Rank += 1
        If SampsNotB.GivenNotB.Rank < ChangedRank Then SampsNotB.GivenNotB.Rank += 1
        If SampsAandB.GivenNotB.Rank < ChangedRank Then SampsAandB.GivenNotB.Rank += 1
        If SampsAandNotB.GivenNotB.Rank < ChangedRank Then SampsAandNotB.GivenNotB.Rank += 1
        If SampsNotAandB.GivenNotB.Rank < ChangedRank Then SampsNotAandB.GivenNotB.Rank += 1
        If SampsNotAandNotB.GivenNotB.Rank < ChangedRank Then SampsNotAandNotB.GivenNotB.Rank += 1
        If SampleSize.GivenNotB.Rank < ChangedRank Then SampleSize.GivenNotB.Rank += 1

    End Sub

    'Private Sub IncrementRanksFrom(ByVal FromRank As Integer)


    'End Sub

    'Private Sub UndefineValues()
    'Private Sub UndefineValues()
    'Private Sub UndefineValues(ByVal Rank As Integer)
    Private Sub UndefineValuesAbove(ByVal Rank As Integer)
        'Flag all values having a Rank number greater than Rank as Undefined.

        'OLD COMMENTS:
        'Flag all values having a Rank number greater than 3 or 4 as Undefined.
        'These will need to be recalculated using the Rank 1, 2 and 3 Defined variables.

        'RaiseEvent Message("UndefineValues()" & vbCrLf) 'For debugging

        'Unconditional probabilites:
        If ProbA.Rank > Rank Then ProbA.Status = "Undefined"
        If ProbNotA.Rank > Rank Then ProbNotA.Status = "Undefined"
        If ProbB.Rank > Rank Then ProbB.Status = "Undefined"
        If ProbNotB.Rank > Rank Then ProbNotB.Status = "Undefined"
        'Debug.Print("ProbAandB.Rank = " & ProbAandB.Rank)
        If ProbAandB.Rank > Rank Then ProbAandB.Status = "Undefined"
        'Debug.Print("ProbAandB.Status = " & ProbAandB.Status)
        'Debug.Print("ProbAandB.Value = " & ProbAandB.Value)
        If ProbAandNotB.Rank > Rank Then ProbAandNotB.Status = "Undefined"
        If ProbNotAandB.Rank > Rank Then ProbNotAandB.Status = "Undefined"
        If ProbNotAandNotB.Rank > Rank Then ProbNotAandNotB.Status = "Undefined"

        'Conditional probabilities
        If ProbA.GivenA.Rank > Rank Then ProbA.GivenA.Status = "Undefined"
        If ProbNotA.GivenA.Rank > Rank Then ProbNotA.GivenA.Status = "Undefined"
        'Debug.Print("ProbB.GivenA.Rank = " & ProbB.GivenA.Rank)
        If ProbB.GivenA.Rank > Rank Then ProbB.GivenA.Status = "Undefined"
        'Debug.Print("ProbB.GivenA.Status = " & ProbB.GivenA.Status)
        'Debug.Print("ProbB.GivenA.Value = " & ProbB.GivenA.Value)
        If ProbNotB.GivenA.Rank > Rank Then ProbNotB.GivenA.Status = "Undefined"
        If ProbAandB.GivenA.Rank > Rank Then ProbAandB.GivenA.Status = "Undefined"
        If ProbAandNotB.GivenA.Rank > Rank Then ProbAandNotB.GivenA.Status = "Undefined"
        If ProbNotAandB.GivenA.Rank > Rank Then ProbNotAandB.GivenA.Status = "Undefined"
        If ProbNotAandNotB.GivenA.Rank > Rank Then ProbNotAandNotB.GivenA.Status = "Undefined"

        If ProbA.GivenNotA.Rank > Rank Then ProbA.GivenNotA.Status = "Undefined"
        If ProbNotA.GivenNotA.Rank > Rank Then ProbNotA.GivenNotA.Status = "Undefined"
        If ProbB.GivenNotA.Rank > Rank Then ProbB.GivenNotA.Status = "Undefined"
        If ProbNotB.GivenNotA.Rank > Rank Then ProbNotB.GivenNotA.Status = "Undefined"
        If ProbAandB.GivenNotA.Rank > Rank Then ProbAandB.GivenNotA.Status = "Undefined"
        If ProbAandNotB.GivenNotA.Rank > Rank Then ProbAandNotB.GivenNotA.Status = "Undefined"
        If ProbNotAandB.GivenNotA.Rank > Rank Then ProbNotAandB.GivenNotA.Status = "Undefined"
        If ProbNotAandNotB.GivenNotA.Rank > Rank Then ProbNotAandNotB.GivenNotA.Status = "Undefined"

        If ProbA.GivenB.Rank > Rank Then ProbA.GivenB.Status = "Undefined"
        If ProbNotA.GivenB.Rank > Rank Then ProbNotA.GivenB.Status = "Undefined"
        If ProbB.GivenB.Rank > Rank Then ProbB.GivenB.Status = "Undefined"
        If ProbNotB.GivenB.Rank > Rank Then ProbNotB.GivenB.Status = "Undefined"
        If ProbAandB.GivenB.Rank > Rank Then ProbAandB.GivenB.Status = "Undefined"
        If ProbAandNotB.GivenB.Rank > Rank Then ProbAandNotB.GivenB.Status = "Undefined"
        If ProbNotAandB.GivenB.Rank > Rank Then ProbNotAandB.GivenB.Status = "Undefined"
        If ProbNotAandNotB.GivenB.Rank > Rank Then ProbNotAandNotB.GivenB.Status = "Undefined"

        If ProbA.GivenNotB.Rank > Rank Then ProbA.GivenNotB.Status = "Undefined"
        If ProbNotA.GivenNotB.Rank > Rank Then ProbNotA.GivenNotB.Status = "Undefined"
        If ProbB.GivenNotB.Rank > Rank Then ProbB.GivenNotB.Status = "Undefined"
        If ProbNotB.GivenNotB.Rank > Rank Then ProbNotB.GivenNotB.Status = "Undefined"
        If ProbAandB.GivenNotB.Rank > Rank Then ProbAandB.GivenNotB.Status = "Undefined"
        If ProbAandNotB.GivenNotB.Rank > Rank Then ProbAandNotB.GivenNotB.Status = "Undefined"
        If ProbNotAandB.GivenNotB.Rank > Rank Then ProbNotAandB.GivenNotB.Status = "Undefined"
        If ProbNotAandNotB.GivenNotB.Rank > Rank Then ProbNotAandNotB.GivenNotB.Status = "Undefined"

        'Unconditional sample counts:
        'NOTE: For Samples, 4 inputs are needed to define the system. For Probabilities, only 3 inputs are needed. The probabilities sum to 1 but the Sample Counts sum to SampleSize. A SampleSize value is needed to calculate SampleCounts from Probabilities.
        If SampsA.Rank > Rank Then SampsA.Status = "Undefined"
        If SampsNotA.Rank > Rank Then SampsNotA.Status = "Undefined"
        If SampsB.Rank > Rank Then SampsB.Status = "Undefined"
        If SampsNotB.Rank > Rank Then SampsNotB.Status = "Undefined"
        If SampsAandB.Rank > Rank Then SampsAandB.Status = "Undefined"
        If SampsAandNotB.Rank > Rank Then SampsAandNotB.Status = "Undefined"
        If SampsNotAandB.Rank > Rank Then SampsNotAandB.Status = "Undefined"
        If SampsNotAandNotB.Rank > Rank Then SampsNotAandNotB.Status = "Undefined"
        If SampleSize.Rank > Rank Then SampleSize.Status = "Undefined"

        'Conditional sample counts
        If SampsA.GivenA.Rank > Rank Then SampsA.GivenA.Status = "Undefined"
        If SampsNotA.GivenA.Rank > Rank Then SampsNotA.GivenA.Status = "Undefined"
        If SampsB.GivenA.Rank > Rank Then SampsB.GivenA.Status = "Undefined"
        If SampsNotB.GivenA.Rank > Rank Then SampsNotB.GivenA.Status = "Undefined"
        If SampsAandB.GivenA.Rank > Rank Then SampsAandB.GivenA.Status = "Undefined"
        If SampsAandNotB.GivenA.Rank > Rank Then SampsAandNotB.GivenA.Status = "Undefined"
        If SampsNotAandB.GivenA.Rank > Rank Then SampsNotAandB.GivenA.Status = "Undefined"
        If SampsNotAandNotB.GivenA.Rank > Rank Then SampsNotAandNotB.GivenA.Status = "Undefined"
        If SampleSize.GivenA.Rank > Rank Then SampleSize.GivenA.Status = "Undefined"

        If SampsA.GivenNotA.Rank > Rank Then SampsA.GivenNotA.Status = "Undefined"
        If SampsNotA.GivenNotA.Rank > Rank Then SampsNotA.GivenNotA.Status = "Undefined"
        If SampsB.GivenNotA.Rank > Rank Then SampsB.GivenNotA.Status = "Undefined"
        If SampsNotB.GivenNotA.Rank > Rank Then SampsNotB.GivenNotA.Status = "Undefined"
        If SampsAandB.GivenNotA.Rank > Rank Then SampsAandB.GivenNotA.Status = "Undefined"
        If SampsAandNotB.GivenNotA.Rank > Rank Then SampsAandNotB.GivenNotA.Status = "Undefined"
        If SampsNotAandB.GivenNotA.Rank > Rank Then SampsNotAandB.GivenNotA.Status = "Undefined"
        If SampsNotAandNotB.GivenNotA.Rank > Rank Then SampsNotAandNotB.GivenNotA.Status = "Undefined"
        If SampleSize.GivenNotA.Rank > Rank Then SampleSize.GivenNotA.Status = "Undefined"

        If SampsA.GivenB.Rank > Rank Then SampsA.GivenB.Status = "Undefined"
        If SampsNotA.GivenB.Rank > Rank Then SampsNotA.GivenB.Status = "Undefined"
        If SampsB.GivenB.Rank > Rank Then SampsB.GivenB.Status = "Undefined"
        If SampsNotB.GivenB.Rank > Rank Then SampsNotB.GivenB.Status = "Undefined"
        If SampsAandB.GivenB.Rank > Rank Then SampsAandB.GivenB.Status = "Undefined"
        If SampsAandNotB.GivenB.Rank > Rank Then SampsAandNotB.GivenB.Status = "Undefined"
        If SampsNotAandB.GivenB.Rank > Rank Then SampsNotAandB.GivenB.Status = "Undefined"
        If SampsNotAandNotB.GivenB.Rank > Rank Then SampsNotAandNotB.GivenB.Status = "Undefined"
        If SampleSize.GivenB.Rank > Rank Then SampleSize.GivenB.Status = "Undefined"

        If SampsA.GivenNotB.Rank > Rank Then SampsA.GivenNotB.Status = "Undefined"
        If SampsNotA.GivenNotB.Rank > Rank Then SampsNotA.GivenNotB.Status = "Undefined"
        If SampsB.GivenNotB.Rank > Rank Then SampsB.GivenNotB.Status = "Undefined"
        If SampsNotB.GivenNotB.Rank > Rank Then SampsNotB.GivenNotB.Status = "Undefined"
        If SampsAandB.GivenNotB.Rank > Rank Then SampsAandB.GivenNotB.Status = "Undefined"
        If SampsAandNotB.GivenNotB.Rank > Rank Then SampsAandNotB.GivenNotB.Status = "Undefined"
        If SampsNotAandB.GivenNotB.Rank > Rank Then SampsNotAandB.GivenNotB.Status = "Undefined"
        If SampsNotAandNotB.GivenNotB.Rank > Rank Then SampsNotAandNotB.GivenNotB.Status = "Undefined"
        If SampleSize.GivenNotB.Rank > Rank Then SampleSize.GivenNotB.Status = "Undefined"

    End Sub

    Private Sub UndefineProbsAbove(ByVal Rank As Integer)
        'Undefine the Probabilities below the specified rank. (Note: The top rank is 1. Probabilities above this rank have lower priority.)

        'Unconditional probabilites:
        If ProbA.Rank > Rank Then ProbA.Status = "Undefined"
        If ProbNotA.Rank > Rank Then ProbNotA.Status = "Undefined"
        If ProbB.Rank > Rank Then ProbB.Status = "Undefined"
        If ProbNotB.Rank > Rank Then ProbNotB.Status = "Undefined"
        'Debug.Print("ProbAandB.Rank = " & ProbAandB.Rank)
        If ProbAandB.Rank > Rank Then ProbAandB.Status = "Undefined"
        'Debug.Print("ProbAandB.Status = " & ProbAandB.Status)
        'Debug.Print("ProbAandB.Value = " & ProbAandB.Value)
        If ProbAandNotB.Rank > Rank Then ProbAandNotB.Status = "Undefined"
        If ProbNotAandB.Rank > Rank Then ProbNotAandB.Status = "Undefined"
        If ProbNotAandNotB.Rank > Rank Then ProbNotAandNotB.Status = "Undefined"

        'Conditional probabilities
        If ProbA.GivenA.Rank > Rank Then ProbA.GivenA.Status = "Undefined"
        If ProbNotA.GivenA.Rank > Rank Then ProbNotA.GivenA.Status = "Undefined"
        'Debug.Print("ProbB.GivenA.Rank = " & ProbB.GivenA.Rank)
        If ProbB.GivenA.Rank > Rank Then ProbB.GivenA.Status = "Undefined"
        'Debug.Print("ProbB.GivenA.Status = " & ProbB.GivenA.Status)
        'Debug.Print("ProbB.GivenA.Value = " & ProbB.GivenA.Value)
        If ProbNotB.GivenA.Rank > Rank Then ProbNotB.GivenA.Status = "Undefined"
        If ProbAandB.GivenA.Rank > Rank Then ProbAandB.GivenA.Status = "Undefined"
        If ProbAandNotB.GivenA.Rank > Rank Then ProbAandNotB.GivenA.Status = "Undefined"
        If ProbNotAandB.GivenA.Rank > Rank Then ProbNotAandB.GivenA.Status = "Undefined"
        If ProbNotAandNotB.GivenA.Rank > Rank Then ProbNotAandNotB.GivenA.Status = "Undefined"

        If ProbA.GivenNotA.Rank > Rank Then ProbA.GivenNotA.Status = "Undefined"
        If ProbNotA.GivenNotA.Rank > Rank Then ProbNotA.GivenNotA.Status = "Undefined"
        If ProbB.GivenNotA.Rank > Rank Then ProbB.GivenNotA.Status = "Undefined"
        If ProbNotB.GivenNotA.Rank > Rank Then ProbNotB.GivenNotA.Status = "Undefined"
        If ProbAandB.GivenNotA.Rank > Rank Then ProbAandB.GivenNotA.Status = "Undefined"
        If ProbAandNotB.GivenNotA.Rank > Rank Then ProbAandNotB.GivenNotA.Status = "Undefined"
        If ProbNotAandB.GivenNotA.Rank > Rank Then ProbNotAandB.GivenNotA.Status = "Undefined"
        If ProbNotAandNotB.GivenNotA.Rank > Rank Then ProbNotAandNotB.GivenNotA.Status = "Undefined"

        If ProbA.GivenB.Rank > Rank Then ProbA.GivenB.Status = "Undefined"
        If ProbNotA.GivenB.Rank > Rank Then ProbNotA.GivenB.Status = "Undefined"
        If ProbB.GivenB.Rank > Rank Then ProbB.GivenB.Status = "Undefined"
        If ProbNotB.GivenB.Rank > Rank Then ProbNotB.GivenB.Status = "Undefined"
        If ProbAandB.GivenB.Rank > Rank Then ProbAandB.GivenB.Status = "Undefined"
        If ProbAandNotB.GivenB.Rank > Rank Then ProbAandNotB.GivenB.Status = "Undefined"
        If ProbNotAandB.GivenB.Rank > Rank Then ProbNotAandB.GivenB.Status = "Undefined"
        If ProbNotAandNotB.GivenB.Rank > Rank Then ProbNotAandNotB.GivenB.Status = "Undefined"

        If ProbA.GivenNotB.Rank > Rank Then ProbA.GivenNotB.Status = "Undefined"
        If ProbNotA.GivenNotB.Rank > Rank Then ProbNotA.GivenNotB.Status = "Undefined"
        If ProbB.GivenNotB.Rank > Rank Then ProbB.GivenNotB.Status = "Undefined"
        If ProbNotB.GivenNotB.Rank > Rank Then ProbNotB.GivenNotB.Status = "Undefined"
        If ProbAandB.GivenNotB.Rank > Rank Then ProbAandB.GivenNotB.Status = "Undefined"
        If ProbAandNotB.GivenNotB.Rank > Rank Then ProbAandNotB.GivenNotB.Status = "Undefined"
        If ProbNotAandB.GivenNotB.Rank > Rank Then ProbNotAandB.GivenNotB.Status = "Undefined"
        If ProbNotAandNotB.GivenNotB.Rank > Rank Then ProbNotAandNotB.GivenNotB.Status = "Undefined"
    End Sub

    Private Sub UndefineSampsAbove(ByVal Rank As Integer)
        'Undefine the Sample Counts below the specified rank. (Note: The top rank is 1. SampleCounts above this rank have lower priority.)

        'Unconditional sample counts:
        'NOTE: For Samples, 4 inputs are needed to define the system. For Probabilities, only 3 inputs are needed. The probabilities sum to 1 but the Sample Counts sum to SampleSize.
        If SampsA.Rank > Rank Then SampsA.Status = "Undefined"
        If SampsNotA.Rank > Rank Then SampsNotA.Status = "Undefined"
        If SampsB.Rank > Rank Then SampsB.Status = "Undefined"
        If SampsNotB.Rank > Rank Then SampsNotB.Status = "Undefined"
        If SampsAandB.Rank > Rank Then SampsAandB.Status = "Undefined"
        If SampsAandNotB.Rank > Rank Then SampsAandNotB.Status = "Undefined"
        If SampsNotAandB.Rank > Rank Then SampsNotAandB.Status = "Undefined"
        If SampsNotAandNotB.Rank > Rank Then SampsNotAandNotB.Status = "Undefined"
        If SampleSize.Rank > Rank Then SampleSize.Status = "Undefined"

        'Conditional sample counts
        If SampsA.GivenA.Rank > Rank Then SampsA.GivenA.Status = "Undefined"
        If SampsNotA.GivenA.Rank > Rank Then SampsNotA.GivenA.Status = "Undefined"
        If SampsB.GivenA.Rank > Rank Then SampsB.GivenA.Status = "Undefined"
        If SampsNotB.GivenA.Rank > Rank Then SampsNotB.GivenA.Status = "Undefined"
        If SampsAandB.GivenA.Rank > Rank Then SampsAandB.GivenA.Status = "Undefined"
        If SampsAandNotB.GivenA.Rank > Rank Then SampsAandNotB.GivenA.Status = "Undefined"
        If SampsNotAandB.GivenA.Rank > Rank Then SampsNotAandB.GivenA.Status = "Undefined"
        If SampsNotAandNotB.GivenA.Rank > Rank Then SampsNotAandNotB.GivenA.Status = "Undefined"
        If SampleSize.GivenA.Rank > Rank Then SampleSize.GivenA.Status = "Undefined"

        If SampsA.GivenNotA.Rank > Rank Then SampsA.GivenNotA.Status = "Undefined"
        If SampsNotA.GivenNotA.Rank > Rank Then SampsNotA.GivenNotA.Status = "Undefined"
        If SampsB.GivenNotA.Rank > Rank Then SampsB.GivenNotA.Status = "Undefined"
        If SampsNotB.GivenNotA.Rank > Rank Then SampsNotB.GivenNotA.Status = "Undefined"
        If SampsAandB.GivenNotA.Rank > Rank Then SampsAandB.GivenNotA.Status = "Undefined"
        If SampsAandNotB.GivenNotA.Rank > Rank Then SampsAandNotB.GivenNotA.Status = "Undefined"
        If SampsNotAandB.GivenNotA.Rank > Rank Then SampsNotAandB.GivenNotA.Status = "Undefined"
        If SampsNotAandNotB.GivenNotA.Rank > Rank Then SampsNotAandNotB.GivenNotA.Status = "Undefined"
        If SampleSize.GivenNotA.Rank > Rank Then SampleSize.GivenNotA.Status = "Undefined"

        If SampsA.GivenB.Rank > Rank Then SampsA.GivenB.Status = "Undefined"
        If SampsNotA.GivenB.Rank > Rank Then SampsNotA.GivenB.Status = "Undefined"
        If SampsB.GivenB.Rank > Rank Then SampsB.GivenB.Status = "Undefined"
        If SampsNotB.GivenB.Rank > Rank Then SampsNotB.GivenB.Status = "Undefined"
        If SampsAandB.GivenB.Rank > Rank Then SampsAandB.GivenB.Status = "Undefined"
        If SampsAandNotB.GivenB.Rank > Rank Then SampsAandNotB.GivenB.Status = "Undefined"
        If SampsNotAandB.GivenB.Rank > Rank Then SampsNotAandB.GivenB.Status = "Undefined"
        If SampsNotAandNotB.GivenB.Rank > Rank Then SampsNotAandNotB.GivenB.Status = "Undefined"
        If SampleSize.GivenB.Rank > Rank Then SampleSize.GivenB.Status = "Undefined"

        If SampsA.GivenNotB.Rank > Rank Then SampsA.GivenNotB.Status = "Undefined"
        If SampsNotA.GivenNotB.Rank > Rank Then SampsNotA.GivenNotB.Status = "Undefined"
        If SampsB.GivenNotB.Rank > Rank Then SampsB.GivenNotB.Status = "Undefined"
        If SampsNotB.GivenNotB.Rank > Rank Then SampsNotB.GivenNotB.Status = "Undefined"
        If SampsAandB.GivenNotB.Rank > Rank Then SampsAandB.GivenNotB.Status = "Undefined"
        If SampsAandNotB.GivenNotB.Rank > Rank Then SampsAandNotB.GivenNotB.Status = "Undefined"
        If SampsNotAandB.GivenNotB.Rank > Rank Then SampsNotAandB.GivenNotB.Status = "Undefined"
        If SampsNotAandNotB.GivenNotB.Rank > Rank Then SampsNotAandNotB.GivenNotB.Status = "Undefined"
        If SampleSize.GivenNotB.Rank > Rank Then SampleSize.GivenNotB.Status = "Undefined"

    End Sub


    Private Sub RecalculateAllSampleCounts()
        'Recalculate all of the Sample Counts.
        'These are SampsA, SampsNotA, SampsB, SampsNotB, SampsAandB, SampsAandNotB, SampsNotAandB, SampsNotAandNotB

        'RaiseEvent Message("RecalculateAllSampleCounts()" & vbCrLf) 'For debugging

        'Debug.Print("RecalculateAllSampleCounts()")

        Dim FailCount As Integer = RecalculateSampleCounts() 'FailCount is the number of categories of Sample Counts that could not be calculated
        'RaiseEvent Message("FailCount = " & FailCount & vbCrLf)

        'Debug.Print("FailCount = " & FailCount)

        If FailCount = 0 Then
            'RaiseEvent Message("All of the sample counts have been recalculated." & vbCrLf)
        Else
            Dim I As Integer
            Dim NewFailCount As Integer
            For I = 1 To FailCount
                NewFailCount = RecalculateSampleCounts()
                'RaiseEvent Message("NewFailCount = " & NewFailCount & vbCrLf)
                If NewFailCount = FailCount Then
                    RaiseEvent Message("Not all of the sample counts could be recalculated." & vbCrLf)
                    Exit For
                ElseIf NewFailCount = 0 Then
                    'RaiseEvent Message("All of the sample counts have been recalculated." & vbCrLf)
                    FailCount = 0 'Set FailCount to the final value.
                    Exit For
                Else
                    'Try to calculate more sample counts:
                    FailCount = NewFailCount
                End If
            Next
        End If

        'Calculate all other Sample Counts and Probabilites.

    End Sub



    'Private Sub RecalculateSampleCounts()
    Private Function RecalculateSampleCounts() As Integer
        'Recalculate the unconditional sample counts.
        'The number of values that could not be calculated is returned.

        Dim FailCount As Integer = 0 'Count the number of sample categories that could not be calculated.

        'Common Bayes inputs:
        'P(B|A), P(A), P(B) 
        'P(B|A, P(A), P(B|NotA)



        If SampsA.Status = "Undefined" Then 'Attempt to calculate SampsA
            'If ProbA.Status <> "Undefined" Then 'Use P(A) value
            If ProbA.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then 'Use P(A) value
                'SampsA.Value = ProbA.Value * SampleSize
                'SampsA._value = ProbA.Value * SampleSize 'Update the _value member instead of the property to avoid triggering the SampsA.ValueChanged event.
                SampsA.Value = ProbA.Value * SampleSize.Value 'Update the _value member instead of the property to avoid triggering the SampsA.ValueChanged event.
                'SampsA.UpdateLabelText()
                SampsA.Status = "Calculated"
                'Debug.Print("SampsA.Value = " & SampsA.Value)
                'ElseIf ProbNotA.Status <> "Undefined" Then
            ElseIf ProbNotA.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                'SampsA.Value = (1 - ProbNotA.Value) * SampleSize
                SampsA.Value = (1 - ProbNotA.Value) * SampleSize.Value
                'SampsA.UpdateLabelText()
                SampsA.Status = "Calculated"
                'Debug.Print("SampsA.Value = " & SampsA.Value)

                'NOTE: SampleSize.Status may be Undefined
                'ProbA.Value = SampsA.Value / SampleSize.Value 'Update the _value member instead of the property to avoid triggering the ProbA.ValueChanged event.
                'ProbA.Status = "Calculated"
                'ElseIf SampsNotA.Status <> "Undefined" Then
            ElseIf SampsNotA.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                'SampsA.Value = SampleSize - SampsNotA.Value
                SampsA.Value = SampleSize.Value - SampsNotA.Value 'Update the _value member instead of the property to avoid triggering the ValueChanged event.
                SampsA.UpdateLabelText()
                SampsA.Status = "Calculated"
                'Debug.Print("SampsA.Value = " & SampsA.Value)
                'ProbA.Value = SampsA.Value / SampleSize

                'NOTE: SampleSize.Status may be Undefined
                ProbA.Value = SampsA.Value / SampleSize.Value
                ProbA.Status = "Calculated"
                'ElseIf SampsAandNotB.Status <> "Undefined" And SampsAandB.Status <> "Undefined" Then
                '    SampsA.Value = SampsAandNotB.Value + SampsAandB.Value
                '    SampsA.Status = "Calculated"
            ElseIf ProbA.GivenB.Status <> "Undefined" And ProbB.Status <> "Undefined" And ProbA.GivenNotB.Status <> "Undefined" Then 'Use P(A|B), P(B), P(A|NotB) values
                'ProbA.Value = ProbA.GivenB.Value * ProbB.Value + ProbA.GivenNotB.Value * (1 - ProbB.Value)
                ProbA.Value = ProbA.GivenB.Value * ProbB.Value + ProbA.GivenNotB.Value * (1 - ProbB.Value)
                'ProbA.UpdateLabelText()
                ProbA.Status = "Calculated"
                'SampsA.Value = ProbA.Value * SampleSize.Value
                'SampsA.Status = "Calculated"
                'Debug.Print("SampsA.Value = " & SampsA.Value)
            ElseIf SampsAandB.Status <> "Undefined" And SampsAandNotB.Status <> "Undefined" Then
                SampsA.Value = SampsAandB.Value + SampsAandNotB.Value
                SampsA.Status = "Calculated"

            Else
                FailCount += 1 'Increment the number of values that cound not be calculated.
            End If
        End If

        If SampsNotA.Status = "Undefined" Then
            'If ProbNotA.Status <> "Undefined" Then
            If ProbNotA.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                'SampsNotA.Value = ProbNotA.Value * SampleSize
                SampsNotA.Value = ProbNotA.Value * SampleSize.Value
                'SampsNotA.UpdateLabelText()
                SampsNotA.Status = "Calculated"
                'Debug.Print("SampsNotA.Value = " & SampsNotA.Value)
                'ElseIf SampsA.Status <> "Undefined" Then
            ElseIf SampsA.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                'SampsNotA.Value = SampleSize - SampsA.Value
                SampsNotA.Value = SampleSize.Value - SampsA.Value
                'SampsNotA.UpdateLabelText()
                SampsNotA.Status = "Calculated"
                'Debug.Print("SampsNotA.Value = " & SampsNotA.Value)
                'ProbNotA.Value = SampsNotA.Value / SampleSize
                ProbNotA.Value = SampsNotA.Value / SampleSize.Value
                'ProbNotA.UpdateLabelText()
                ProbNotA.Status = "Calculated"
            Else
                FailCount += 1 'Increment the number of values that cound not be calculated.
            End If
        End If

        If SampsB.Status = "Undefined" Then 'Attempt to calculate SampsB
            'If ProbB.Status <> "Undefined" Then 'Use P(B) value
            If ProbB.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then 'Use P(B) value
                SampsB.Value = ProbB.Value * SampleSize.Value
                'SampsB.UpdateLabelText()
                SampsB.Status = "Calculated"
                'Debug.Print("SampsB.Value = " & SampsB.Value)
                'ElseIf ProbNotB.Status <> "Undefined" Then
            ElseIf ProbNotB.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                SampsB.Value = (1 - ProbNotB.Value) * SampleSize.Value
                'SampsB.UpdateLabelText()
                SampsB.Status = "Calculated"
                'Debug.Print("SampsB.Value = " & SampsB.Value)
                ProbB.Value = SampsB.Value / SampleSize.Value
                'ProbB.UpdateLabelText()
                ProbB.Status = "Calculated"
                'ElseIf SampsNotB.Status <> "Undefined" Then
            ElseIf SampsNotB.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                SampsB.Value = SampleSize.Value - SampsNotB.Value
                'SampsB.UpdateLabelText()
                SampsB.Status = "Calculated"
                'Debug.Print("SampsB.Value = " & SampsB.Value)
                ProbB.Value = SampsB.Value / SampleSize.Value
                'ProbB.UpdateLabelText()
                ProbB.Status = "Calculated"
                ProbNotB.Value = 1 - ProbB.Value
                'ProbNotB.UpdateLabelText()
                ProbNotB.Status = "Calculated"
            ElseIf ProbB.GivenA.Status <> "Undefined" And ProbA.Status <> "Undefined" And ProbB.GivenNotA.Status <> "Undefined" Then 'Use P(B|A), P(A), P(B|NotA) values
                ProbB.Value = ProbB.GivenA.Value * ProbA.Value + ProbB.GivenNotA.Value * (1 - ProbA.Value)
                'ProbB.UpdateLabelText()
                ProbB.Status = "Calculated"
                'SampsB.Value = ProbB.Value * SampleSize.Value
                'SampsB.Status = "Calculated"
                'Debug.Print("SampsB.Value = " & SampsB.Value)
            ElseIf SampsAandB.Status <> "Undefined" And SampsNotAandB.Status <> "Undefined" Then
                SampsB.Value = SampsAandB.Value + SampsNotAandB.Value
                SampsB.Status = "Calculated"

            Else
                FailCount += 1 'Increment the number of values that cound not be calculated.
            End If
        End If

        If SampsNotB.Status = "Undefined" Then
            'If ProbNotB.Status <> "Undefined" Then
            If ProbNotB.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                SampsNotB.Value = ProbNotB.Value * SampleSize.Value
                'SampsNotB.UpdateLabelText()
                SampsNotB.Status = "Calculated"
                'Debug.Print("SampsNotB.Value = " & SampsNotB.Value)
                'ElseIf ProbB.Status <> "Undefined" Then
            ElseIf ProbB.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                SampsNotB.Value = (1 - ProbB.Value) * SampleSize.Value
                'SampsNotB.UpdateLabelText()
                SampsNotB.Status = "Calculated"
                'Debug.Print("SampsNotB.Value = " & SampsNotB.Value)
                ProbNotB.Value = SampsNotB.Value / SampleSize.Value
                'ProbNotB.UpdateLabelText()
                ProbNotB.Status = "Calculated"
                'ElseIf SampsB.Status <> "Undefined" Then
            ElseIf SampsB.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                SampsNotB.Value = SampleSize.Value - SampsB.Value
                'SampsNotB.UpdateLabelText()
                SampsNotB.Status = "Calculated"
                'Debug.Print("SampsNotB.Value = " & SampsNotB.Value)
                'ProbNotB._value = SampsNotB.Value = SampleSize
                ProbNotB.Value = SampsNotB.Value / SampleSize.Value
                'ProbNotB.UpdateLabelText()
                ProbNotB.Status = "Calculated"
            Else
                FailCount += 1 'Increment the number of values that cound not be calculated.
            End If
        End If

        If SampsAandB.Status = "Undefined" Then
            'If ProbAandB.Status <> "Undefined" Then
            If ProbAandB.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                SampsAandB.Value = ProbAandB.Value * SampleSize.Value
                'SampsAandB.UpdateLabelText()
                SampsAandB.Status = "Calculated"
                'Debug.Print("1 SampsAandB.Value = " & SampsAandB.Value)
            ElseIf ProbB.GivenA.Status <> "Undefined" And ProbA.Status <> "Undefined" Then 'Use P(B|A), P(A) values
                ProbAandB.Value = ProbB.GivenA.Value * ProbA.Value
                'ProbAandB.UpdateLabelText()
                ProbAandB.Status = "Calculated"
                'SampsAandB.Value = ProbAandB.Value * SampleSize.Value
                'SampsAandB.Status = "Calculated"
                'Debug.Print("2 SampsAandB.Value = " & SampsAandB.Value)
            ElseIf ProbA.GivenB.Status <> "Undefined" And ProbB.Status <> "Undefined" Then 'Use P(A|B), P(B) values
                ProbAandB.Value = ProbA.GivenB.Value * ProbB.Value
                'ProbAandB.UpdateLabelText()
                ProbAandB.Status = "Calculated"
                'SampsAandB.Value = ProbAandB.Value * SampleSize.Value
                'SampsAandB.Status = "Calculated"
                'Debug.Print("3 SampsAandB.Value = " & SampsAandB.Value)
            ElseIf SampleSize.Status <> "Undefined" And SampsNotAandNotB.Status <> "Undefined" And SampsNotAandB.Status <> "Undefined" And SampsAandNotB.Status <> "Undefined" Then
                SampsAandB.Value = SampleSize.Value - SampsAandNotB.Value - SampsNotAandNotB.Value - SampsNotAandB.Value
                SampsAandB.Status = "Calculated"
                ProbAandB.Value = SampsAandB.Value / SampleSize.Value
                ProbAandB.Status = "Calculated"
            Else
                FailCount += 1 'Increment the number of values that cound not be calculated.
            End If
        Else
            If ProbAandB.Status = "Undefined" And SampleSize.Status <> "Undefined" Then
                ProbAandB.Value = SampsAandB.Value / SampleSize.Value
                ProbAandB.Status = "Calculated"
            End If
        End If

        If SampsAandNotB.Status = "Undefined" Then
            'If ProbAandNotB.Status <> "Undefined" Then
            If ProbAandNotB.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                SampsAandNotB.Value = ProbAandNotB.Value * SampleSize.Value
                'SampsAandNotB.UpdateLabelText()
                SampsAandNotB.Status = "Calculated"
                'Debug.Print("SampsAandNotB.Value = " & SampsAandNotB.Value)
            ElseIf SampsA.Status <> "Undefined" And SampsAandB.Status <> "Undefined" Then
                SampsAandNotB.Value = SampsA.Value - SampsAandB.Value
                'SampsAandNotB.UpdateLabelText()
                SampsAandNotB.Status = "Calculated"
                'Debug.Print("SampsAandNotB.Value = " & SampsAandNotB.Value)
                'ProbAandNotB.Value = SampsAandNotB.Value / SampleSize.Value
                'ProbAandNotB.Status = "Calculated"
            ElseIf SampsAandB.Status <> "Undefined" And SampsNotAandNotB.Status <> "Undefined" And SampsNotAandB.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                SampsAandNotB.Value = SampleSize.Value - SampsAandB.Value - SampsNotAandNotB.Value - SampsNotAandB.Value
                SampsAandNotB.Status = "Calculated"
                ProbAandNotB.Value = SampsAandNotB.Value / SampleSize.Value
                ProbAandNotB.Status = "Calculated"
            Else
                FailCount += 1 'Increment the number of values that cound not be calculated.
            End If
        Else
            If ProbAandNotB.Status = "Undefined" And SampleSize.Status <> "Undefined" Then
                ProbAandNotB.Value = SampsAandNotB.Value / SampleSize.Value
                ProbAandNotB.Status = "Calculated"
            End If
        End If

        If SampsNotAandB.Status = "Undefined" Then
            'If ProbNotAandB.Status <> "Undefined" Then
            If ProbNotAandB.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                SampsNotAandB.Value = ProbNotAandB.Value * SampleSize.Value
                'SampsNotAandB.UpdateLabelText()
                SampsNotAandB.Status = "Calculated"
                'Debug.Print("SampsNotAandB.Value = " & SampsNotAandB.Value)
            ElseIf SampsB.Status <> "Undefined" And SampsAandB.Status <> "Undefined" Then
                SampsNotAandB.Value = SampsB.Value - SampsAandB.Value
                'SampsNotAandB.UpdateLabelText()
                SampsNotAandB.Status = "Calculated"
                'Debug.Print("SampsNotAandB.Value = " & SampsNotAandB.Value)
                'ProbNotAandB.Value = SampsNotAandB.Value / SampleSize.Value
                'ProbNotAandB.Status = "Calculated"
            ElseIf SampsAandB.Status <> "Undefined" And SampsNotAandNotB.Status <> "Undefined" And SampleSize.Status <> "Undefined" And SampsAandNotB.Status <> "Undefined" Then
                SampsNotAandB.Value = SampleSize.Value - SampsAandB.Value - SampsNotAandNotB.Value - SampsAandNotB.Value
                SampsNotAandB.Status = "Calculated"
                ProbNotAandB.Value = SampsNotAandB.Value / SampleSize.Value
                ProbNotAandB.Status = "Calculated"
            Else
                FailCount += 1 'Increment the number of values that cound not be calculated.
            End If
        Else
            If ProbNotAandB.Status = "Undefined" And SampleSize.Status <> "Undefined" Then
                ProbNotAandB.Value = SampsNotAandB.Value / SampleSize.Value
                ProbNotAandB.Status = "Calculated"
            End If
        End If

        If SampsNotAandNotB.Status = "Undefined" Then
            'If ProbNotAandNotB.Status <> "Undefined" Then
            If ProbNotAandNotB.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                SampsNotAandNotB.Value = ProbNotAandNotB.Value * SampleSize.Value
                'SampsNotAandNotB.UpdateLabelText()
                SampsNotAandNotB.Status = "Calculated"
                'Debug.Print("SampsNotAandNotB.Value = " & SampsNotAandNotB.Value)
                'ElseIf SampsA.Status <> "Undefined" And SampsB.Status <> "Undefined" And SampsAandB.Status <> "Undefined" Then
            ElseIf SampsA.Status <> "Undefined" And SampsB.Status <> "Undefined" And SampsAandB.Status <> "Undefined" And SampleSize.Status <> "Undefined" Then
                SampsNotAandNotB.Value = SampleSize.Value - SampsA.Value - SampsB.Value + SampsAandB.Value
                'SampsNotAandNotB.UpdateLabelText()
                SampsNotAandNotB.Status = "Calculated"
                'Debug.Print("SampsNotAandNotB.Value = " & SampsNotAandNotB.Value)
                ProbNotAandNotB.Value = SampsNotAandNotB.Value / SampleSize.Value
                'ProbNotAandNotB.UpdateLabelText()
                ProbNotAandNotB.Status = "Calculated"
            ElseIf SampsAandB.Status <> "Undefined" And SampleSize.Status <> "Undefined" And SampsNotAandB.Status <> "Undefined" And SampsAandNotB.Status <> "Undefined" Then
                SampsNotAandNotB.Value = SampleSize.Value - SampsAandB.Value - SampsNotAandB.Value - SampsAandNotB.Value
                SampsNotAandNotB.Status = "Calculated"
                ProbNotAandNotB.Value = SampsNotAandNotB.Value / SampleSize.Value
                ProbNotAandNotB.Status = "Calculated"
            Else
                FailCount += 1 'Increment the number of values that cound not be calculated.
            End If
        Else
            If ProbNotAandNotB.Status = "Undefined" And SampleSize.Status <> "Undefined" Then
                ProbNotAandNotB.Value = SampsNotAandNotB.Value / SampleSize.Value
                ProbNotAandNotB.Status = "Calculated"
            Else
                FailCount += 1 'Increment the number of values that cound not be calculated.
            End If
        End If

        If SampleSize.Status = "Undefined" Then
            If SampsAandB.Status <> "Undefined" And SampsNotAandNotB.Status <> "Undefined" And SampsNotAandB.Status <> "Undefined" And SampsAandNotB.Status <> "Undefined" Then
                SampleSize.Value = SampsAandB.Value + SampsNotAandNotB.Value + SampsNotAandB.Value + SampsAandNotB.Value
                SampleSize.Status = "Calculated"
            Else
                FailCount += 1
            End If
        End If

        'Debug.Print("FailCount = " & FailCount)
        'Debug.Print("")
        'Debug.Print("")
        Return FailCount


    End Function

    Private Sub CalculateSamplesAndProbabilites()
        'Calculate the remaining Sample Counts and Probabilities.

        'Unconditional probabilities:
        If ProbA.Status = "Undefined" Then
            ProbA.Value = SampsA.Value / SampleSize.Value
            'ProbA.UpdateLabelText()
            ProbA.Status = "Calculated"
        End If
        If ProbNotA.Status = "Undefined" Then
            ProbNotA.Value = 1 - ProbA.Value
            'ProbNotA.UpdateLabelText()
            ProbNotA.Status = "Calculated"
        End If
        If ProbB.Status = "Undefined" Then
            ProbB.Value = SampsB.Value / SampleSize.Value
            'ProbB.UpdateLabelText()
            ProbB.Status = "Calculated"
        End If
        If ProbNotB.Status = "Undefined" Then
            ProbNotB.Value = 1 - ProbB.Value
            'ProbNotB.UpdateLabelText()
            ProbNotB.Status = "Calculated"
        End If
        If ProbAandB.Status = "Undefined" Then
            ProbAandB.Value = SampsAandB.Value / SampleSize.Value
            'ProbAandB.UpdateLabelText()
            ProbAandB.Status = "Calculated"
        End If
        If ProbAandNotB.Status = "Undefined" Then
            ProbAandNotB.Value = SampsAandNotB.Value / SampleSize.Value
            'ProbAandNotB.UpdateLabelText()
            ProbAandNotB.Status = "Calculated"
        End If
        If ProbNotAandB.Status = "Undefined" Then
            ProbNotAandB.Value = SampsNotAandB.Value / SampleSize.Value
            'ProbNotAandB.UpdateLabelText()
            ProbNotAandB.Status = "Calculated"
        End If
        If ProbNotAandNotB.Status = "Undefined" Then
            ProbNotAandNotB.Value = SampsNotAandNotB.Value / SampleSize.Value
            'ProbNotAandNotB.UpdateLabelText()
            ProbNotAandNotB.Status = "Calculated"
        End If

        'Conditional probabilities - Event A:
        ProbA.GivenA.Value = 1 'This always has a probability of 1.
        'ProbA.GivenA.UpdateLabelText()
        ProbA.GivenA.Status = "Defined"

        ProbNotA.GivenA.Value = 0 'This always has a probability of 0.
        'ProbNotA.GivenA.UpdateLabelText()
        ProbNotA.GivenA.Status = "Defined"

        If ProbB.GivenA.Status = "Undefined" Then
            ProbB.GivenA.Value = ProbAandB.Value / ProbA.Value
            'ProbB.GivenA.UpdateLabelText()
            ProbB.GivenA.Status = "Calculated"
        End If

        If ProbNotB.GivenA.Status = "Undefined" Then
            ProbNotB.GivenA.Value = 1 - ProbB.GivenA.Value
            'ProbNotB.GivenA.UpdateLabelText()
            ProbNotB.GivenA.Status = "Calculated"
        End If

        If ProbAandB.GivenA.Status = "Undefined" Then
            ProbAandB.GivenA.Value = ProbB.GivenA.Value
            'ProbAandB.GivenA.UpdateLabelText()
            ProbAandB.GivenA.Status = "Calculated"
        End If

        If ProbAandNotB.GivenA.Status = "Undefined" Then
            ProbAandNotB.GivenA.Value = ProbNotB.GivenA.Value
            'ProbAandNotB.GivenA.UpdateLabelText()
            ProbAandNotB.GivenA.Status = "Calculated"
        End If

        If ProbNotAandB.GivenA.Status = "Undefined" Then
            ProbNotAandB.GivenA.Value = 0 'This always has a probability of 0.
            'ProbNotAandB.GivenA.UpdateLabelText()
            ProbNotAandB.GivenA.Status = "Defined"
        End If

        If ProbNotAandNotB.GivenA.Status = "Undefined" Then
            ProbNotAandNotB.GivenA.Value = 0  'This always has a probability of 0.
            'ProbNotAandNotB.GivenA.UpdateLabelText()
            ProbNotAandNotB.GivenA.Status = "Defined"
        End If

        'Conditional probabilities - Event Not A:
        ProbA.GivenNotA.Value = 0 'This always has a probability of 0.
        'ProbA.GivenNotA.UpdateLabelText()
        ProbA.GivenNotA.Status = "Defined"

        ProbNotA.GivenNotA.Value = 1 'This always has a probability of 1.
        'ProbNotA.GivenNotA.UpdateLabelText()
        ProbNotA.GivenNotA.Status = "Defined"

        If ProbB.GivenNotA.Status = "Undefined" Then
            ProbB.GivenNotA.Value = (ProbB.Value - ProbAandB.Value) / ProbNotA.Value
            'ProbB.GivenNotA.UpdateLabelText()
            ProbB.GivenNotA.Status = "Calculated"
        End If

        If ProbNotB.GivenNotA.Status = "Undefined" Then
            ProbNotB.GivenNotA.Value = ProbNotAandNotB.Value / ProbNotA.Value
            'ProbNotB.GivenNotA.UpdateLabelText()
            ProbNotB.GivenNotA.Status = "Calculated"
        End If

        If ProbAandB.GivenNotA.Status = "Undefined" Then
            ProbAandB.GivenNotA.Value = 0 'This always has a probability of 0.
            'ProbAandB.GivenNotA.UpdateLabelText()
            ProbAandB.GivenNotA.Status = "Defined"
        End If

        If ProbAandNotB.GivenNotA.Status = "Undefined" Then
            ProbAandNotB.GivenNotA.Value = 0 'This always has a probability of 0.
            'ProbAandNotB.GivenNotA.UpdateLabelText()
            ProbAandNotB.GivenNotA.Status = "Defined"
        End If

        If ProbNotAandB.GivenNotA.Status = "Undefined" Then
            ProbNotAandB.GivenNotA.Value = ProbB.GivenNotA.Value
            'ProbNotAandB.GivenNotA.UpdateLabelText()
            ProbNotAandB.GivenA.Status = "Defined"
        End If

        If ProbNotAandNotB.GivenNotA.Status = "Undefined" Then
            ProbNotAandNotB.GivenNotA.Value = ProbNotB.GivenNotA.Value
            'ProbNotAandNotB.GivenNotA.UpdateLabelText()
            ProbNotAandNotB.GivenNotA.Status = "Defined"
        End If

        'Conditional probabilities - Event B:
        'ProbA.GivenB.Value = 1 'This always has a probability of 1.
        'ProbA.GivenB.Status = "Defined"
        If ProbA.GivenB.Status = "Undefined" Then
            ProbA.GivenB.Value = ProbAandB.Value / ProbB.Value
            'ProbA.GivenB.UpdateLabelText()
            ProbA.GivenB.Status = "Calculated"
        End If

        'ProbNotA.GivenB.Value = 0 'This always has a probability of 0.
        'ProbNotA.GivenB.Status = "Defined"
        If ProbNotA.GivenB.Status = "Undefined" Then
            ProbNotA.GivenB.Value = 1 - (ProbAandB.Value / ProbB.Value)
            'ProbNotA.GivenB.UpdateLabelText()
            ProbNotA.GivenB.Status = "Calculated"
            'UpdateAccuracy()
            'UpdatePrecision()
            'UpdateSpecificity()
        End If

        If ProbB.GivenB.Status = "Undefined" Then
            ProbB.GivenB.Value = 1 'This always has a probability of 1.
            'ProbB.GivenB.UpdateLabelText()
            ProbB.GivenB.Status = "Defined"
        End If

        If ProbNotB.GivenB.Status = "Undefined" Then
            ProbNotB.GivenB.Value = 0 'This always has a probability of 0.
            'ProbNotB.GivenB.UpdateLabelText()
            ProbNotB.GivenB.Status = "Defined"
        End If

        If ProbAandB.GivenB.Status = "Undefined" Then
            ProbAandB.GivenB.Value = ProbA.GivenB.Value
            'ProbAandB.GivenB.UpdateLabelText()
            ProbAandB.GivenB.Status = "Calculated"
        End If

        If ProbAandNotB.GivenB.Status = "Undefined" Then
            ProbAandNotB.GivenB.Value = 0 'This always has a probability of 0.
            'ProbAandNotB.GivenB.UpdateLabelText()
            ProbAandNotB.GivenB.Status = "Defined"
        End If

        If ProbNotAandB.GivenB.Status = "Undefined" Then
            ProbNotAandB.GivenB.Value = ProbNotA.GivenB.Value
            'ProbNotAandB.GivenB.UpdateLabelText()
            ProbNotAandB.GivenB.Status = "Defined"
        End If

        If ProbNotAandNotB.GivenB.Status = "Undefined" Then
            ProbNotAandNotB.GivenB.Value = 0  'This always has a probability of 0.
            'ProbNotAandNotB.GivenB.UpdateLabelText()
            ProbNotAandNotB.GivenB.Status = "Defined"
        End If

        'Conditional probabilities - Event Not B:
        If ProbA.GivenNotB.Status = "Undefined" Then
            ProbA.GivenNotB.Value = (ProbA.Value - ProbAandB.Value) / ProbNotB.Value
            'ProbA.GivenNotB.UpdateLabelText()
            ProbA.GivenNotB.Status = "Calculated"
        End If

        If ProbNotA.GivenNotB.Status = "Undefined" Then
            ProbNotA.GivenNotB.Value = ProbNotAandNotB.Value / ProbNotB.Value
            'ProbNotA.GivenNotB.UpdateLabelText()
            ProbNotA.GivenNotB.Status = "Calculated"
            'UpdateAccuracy()
            'UpdateSpecificity()
            'UpdateF1_Score()
        End If

        If ProbB.GivenNotB.Status = "Undefined" Then
            ProbB.GivenNotB.Value = 0 'This always has a probability of 0.
            'ProbB.GivenNotB.UpdateLabelText()
            ProbB.GivenNotB.Status = "Defined"
        End If

        If ProbNotB.GivenNotB.Status = "Undefined" Then
            ProbNotB.GivenNotB.Value = 1 'This always has a probability of 1.
            'ProbNotB.GivenNotB.UpdateLabelText()
            ProbNotB.GivenNotB.Status = "Defined"
        End If

        If ProbAandB.GivenNotB.Status = "Undefined" Then
            ProbAandB.GivenNotB.Value = 0 'This always has a probability of 0.
            'ProbAandB.GivenNotB.UpdateLabelText()
            ProbAandB.GivenNotB.Status = "Defined"
        End If

        If ProbAandNotB.GivenNotB.Status = "Undefined" Then
            ProbAandNotB.GivenNotB.Value = ProbA.GivenNotB.Value
            'ProbAandNotB.GivenNotB.UpdateLabelText()
            ProbAandNotB.GivenNotB.Status = "Calculated"
        End If

        If ProbNotAandB.GivenNotB.Status = "Undefined" Then
            ProbNotAandB.GivenNotB.Value = 0 'This always has a probability of 0.
            'ProbNotAandB.GivenNotB.UpdateLabelText()
            ProbNotAandB.GivenNotB.Status = "Defined"
        End If

        If ProbNotAandNotB.GivenNotB.Status = "Undefined" Then
            ProbNotAandNotB.GivenNotB.Value = ProbNotA.GivenNotA.Value
            'ProbNotAandNotB.GivenNotB.UpdateLabelText()
            ProbNotAandNotB.GivenNotB.Status = "Calculated"
        End If

        'Conditional Sample Counts - Event A:
        'ConditionalSampleSize = SampsA.Value
        If SampsA.GivenA.Status = "Undefined" Then
            'SampsA.GivenA._value = SampsA.Value
            SampsA.GivenA.Value = SampsA.Value
            'SampsA.GivenA.UpdateLabelText()
            SampsA.GivenA.Status = "Defined"
        End If

        If SampsNotA.GivenA.Status = "Undefined" Then
            SampsNotA.GivenA.Value = 0 'This always has a sample count of 0.
            'SampsNotA.GivenA.UpdateLabelText()
            SampsNotA.GivenA.Status = "Defined"
        End If

        If SampsB.GivenA.Status = "Undefined" Then
            SampsB.GivenA.Value = SampsAandB.Value
            'SampsB.GivenA.UpdateLabelText()
            SampsB.GivenA.Status = "Defined"
        End If

        If SampsNotB.GivenA.Status = "Undefined" Then
            SampsNotB.GivenA.Value = SampsAandNotB.Value
            'SampsNotB.GivenA.UpdateLabelText()
            SampsNotB.GivenA.Status = "Defined"
        End If

        If SampsAandB.GivenA.Status = "Undefined" Then
            SampsAandB.GivenA.Value = SampsAandB.Value
            'SampsAandB.GivenA.UpdateLabelText()
            SampsAandB.GivenA.Status = "Defined"
        End If

        If SampsAandNotB.GivenA.Status = "Undefined" Then
            SampsAandNotB.GivenA.Value = SampsAandNotB.Value
            'SampsAandNotB.GivenA.UpdateLabelText()
            SampsAandNotB.GivenA.Status = "Defined"
        End If

        If SampsNotAandB.GivenA.Status = "Undefined" Then
            SampsNotAandB.GivenA.Value = 0 'This always has a sample count of 0.
            'SampsNotAandB.GivenA.UpdateLabelText()
            SampsNotAandB.GivenA.Status = "Defined"
        End If

        If SampsNotAandNotB.GivenA.Status = "Undefined" Then
            SampsNotAandNotB.GivenA.Value = 0 'This always has a sample count of 0.
            'SampsNotAandNotB.GivenA.UpdateLabelText()
            SampsNotAandNotB.GivenA.Status = "Defined"
        End If

        'Conditional Sample Counts - Event Not A:
        If SampsA.GivenNotA.Status = "Undefined" Then
            SampsA.GivenNotA.Value = 0 'This always has a sample count of 0.
            'SampsA.GivenNotA.UpdateLabelText()
            SampsA.GivenNotA.Status = "Defined"
        End If

        If SampsNotA.GivenNotA.Status = "Undefined" Then
            SampsNotA.GivenNotA.Value = SampsNotA.Value
            'SampsNotA.GivenNotA.UpdateLabelText()
            SampsNotA.GivenNotA.Status = "Defined"
        End If

        If SampsB.GivenNotA.Status = "Undefined" Then
            SampsB.GivenNotA.Value = SampsNotAandB.Value
            'SampsB.GivenNotA.UpdateLabelText()
            SampsB.GivenNotA.Status = "Defined"
        End If

        If SampsNotB.GivenNotA.Status = "Undefined" Then
            SampsNotB.GivenNotA.Value = SampsNotAandNotB.Value
            'SampsNotB.GivenNotA.UpdateLabelText()
            SampsNotB.GivenNotA.Status = "Defined"
        End If

        If SampsAandB.GivenNotA.Status = "Undefined" Then
            SampsAandB.GivenNotA.Value = 0 'This always has a sample count of 0.
            'SampsAandB.GivenNotA.UpdateLabelText()
            SampsAandB.GivenNotA.Status = "Defined"
        End If

        If SampsAandNotB.GivenNotA.Status = "Undefined" Then
            SampsAandNotB.GivenNotA.Value = 0 'This always has a sample count of 0.
            'SampsAandNotB.GivenNotA.UpdateLabelText()
            SampsAandNotB.GivenNotA.Status = "Defined"
        End If

        If SampsNotAandB.GivenNotA.Status = "Undefined" Then
            SampsNotAandB.GivenNotA.Value = SampsNotAandB.Value
            'SampsNotAandB.GivenNotA.UpdateLabelText()
            SampsNotAandB.GivenNotA.Status = "Defined"
        End If

        If SampsNotAandNotB.GivenNotA.Status = "Undefined" Then
            SampsNotAandNotB.GivenNotA.Value = SampsNotAandNotB.Value
            'SampsNotAandNotB.GivenNotA.UpdateLabelText()
            SampsNotAandNotB.GivenNotA.Status = "Defined"
        End If

        'Conditional Sample Counts - Event B:
        If SampsA.GivenB.Status = "Undefined" Then
            SampsA.GivenB.Value = SampsAandB.Value
            'SampsA.GivenB.UpdateLabelText()
            SampsA.GivenB.Status = "Defined"
        End If

        If SampsNotA.GivenB.Status = "Undefined" Then
            SampsNotA.GivenB.Value = SampsNotAandB.Value
            'SampsNotA.GivenB.UpdateLabelText()
            SampsNotA.GivenB.Status = "Defined"
        End If

        If SampsB.GivenB.Status = "Undefined" Then
            SampsB.GivenB.Value = SampsB.Value
            'SampsB.GivenB.UpdateLabelText()
            SampsB.GivenB.Status = "Defined"
        End If

        If SampsNotB.GivenB.Status = "Undefined" Then
            SampsNotB.GivenB.Value = 0 'This always has a sample count of 0.
            'SampsNotB.GivenB.UpdateLabelText()
            SampsNotB.GivenB.Status = "Defined"
        End If

        If SampsAandB.GivenB.Status = "Undefined" Then
            SampsAandB.GivenB.Value = SampsAandB.Value
            'SampsAandB.GivenB.UpdateLabelText()
            SampsAandB.GivenB.Status = "Defined"
        End If

        If SampsAandNotB.GivenB.Status = "Undefined" Then
            SampsAandNotB.GivenB.Value = 0 'This always has a sample count of 0.
            'SampsAandNotB.GivenB.UpdateLabelText()
            SampsAandNotB.GivenB.Status = "Defined"
        End If

        If SampsNotAandB.GivenB.Status = "Undefined" Then
            SampsNotAandB.GivenB.Value = SampsNotAandB.Value
            'SampsNotAandB.GivenB.UpdateLabelText()
            SampsNotAandB.GivenB.Status = "Defined"
        End If

        If SampsNotAandNotB.GivenB.Status = "Undefined" Then
            SampsNotAandNotB.GivenB.Value = 0 'This always has a sample count of 0.
            'SampsNotAandNotB.GivenB.UpdateLabelText()
            SampsNotAandNotB.GivenB.Status = "Defined"
        End If

        'Conditional Sample Counts - Event Not B:
        If SampsA.GivenNotB.Status = "Undefined" Then
            SampsA.GivenNotB.Value = SampsAandNotB.Value
            'SampsA.GivenNotB.UpdateLabelText()
            SampsA.GivenNotB.Status = "Defined"
        End If

        If SampsNotA.GivenNotB.Status = "Undefined" Then
            SampsNotA.GivenNotB.Value = SampsNotAandNotB.Value
            'SampsNotA.GivenNotB.UpdateLabelText()
            SampsNotA.GivenNotB.Status = "Defined"
        End If

        If SampsB.GivenNotB.Status = "Undefined" Then
            SampsB.GivenNotB.Value = 0 'This always has a sample count of 0.
            'SampsB.GivenNotB.UpdateLabelText()
            SampsB.GivenNotB.Status = "Defined"
        End If

        If SampsNotB.GivenNotB.Status = "Undefined" Then
            SampsNotB.GivenNotB.Value = SampsNotB.Value
            'SampsNotB.GivenNotB.UpdateLabelText()
            SampsNotB.GivenNotB.Status = "Defined"
        End If

        If SampsAandB.GivenNotB.Status = "Undefined" Then
            SampsAandB.GivenNotB.Value = 0 'This always has a sample count of 0.
            'SampsAandB.GivenNotB.UpdateLabelText()
            SampsAandB.GivenNotB.Status = "Defined"
        End If

        If SampsAandNotB.GivenNotB.Status = "Undefined" Then
            SampsAandNotB.GivenNotB.Value = SampsAandNotB.Value
            'SampsAandNotB.GivenNotB.UpdateLabelText()
            SampsAandNotB.GivenNotB.Status = "Defined"
        End If

        If SampsNotAandB.GivenNotB.Status = "Undefined" Then
            SampsNotAandB.GivenNotB.Value = 0 'This always has a sample count of 0.
            'SampsNotAandB.GivenNotB.UpdateLabelText()
            SampsNotAandB.GivenNotB.Status = "Defined"
        End If

        If SampsNotAandNotB.GivenNotB.Status = "Undefined" Then
            SampsNotAandNotB.GivenNotB.Value = SampsNotAandNotB.Value
            'SampsNotAandNotB.GivenNotB.UpdateLabelText()
            SampsNotAandNotB.GivenNotB.Status = "Defined"
        End If

        'UpdateAccuracy()
        'UpdatePrecision()
        'UpdateSensitivity()
        'UpdateSpecificity()
        'UpdatePrevalence()
        UpdatePerformanceMeasures()

        'UPDATE: 19Sep21
        SetEllipseScaleA()
        SetEllipseScaleB()
        SetEllipseScaleAB()

    End Sub

    Private Sub EventA_NameChanged(NewName As String) Handles EventA.NameChanged
        If AnnotEventA.Text = "" Then AnnotEventA.Text = NewName
    End Sub

    Private Sub EventB_NameChanged(NewName As String) Handles EventB.NameChanged
        If AnnotEventB.Text = "" Then AnnotEventB.Text = NewName
    End Sub

    Private Sub AnnotCondition_ErrorMessage(Msg As String) Handles AnnotCondition.ErrorMessage
        RaiseEvent ErrorMessage(Msg)
    End Sub

    Public Sub CalcConditionalSampleSize()
        'Recalculate the conditional sample size.
        'Select Case Condition'(None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Select Case Settings.Condition'(None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
            Case "None"
                ConditionalSampleSize = SampleSize.Value
            Case "EventATrue"
                ConditionalSampleSize = SampsA.Value
            Case "EventAFalse"
                ConditionalSampleSize = SampsNotA.Value
            Case "EventBTrue"
                ConditionalSampleSize = SampsB.Value
            Case "EventBFalse"
                ConditionalSampleSize = SampsNotB.Value
            Case Else
                'RaiseEvent ErrorMessage("Unknown Condition: " & Condition & vbCrLf)
                RaiseEvent ErrorMessage("Unknown Condition: " & Settings.Condition & vbCrLf)
        End Select
    End Sub


    Private Sub Settings_ProbabilityMeasureChanged(Value As String) Handles Settings.ProbabilityMeasureChanged
        'The Probability Measure has changed. Update the Probability labels.
        ProbA.UpdateLabels()
        ProbNotA.UpdateLabels()
        ProbB.UpdateLabels()
        ProbNotB.UpdateLabels()
        ProbAandB.UpdateLabels()
        ProbAandNotB.UpdateLabels()
        ProbNotAandB.UpdateLabels()
        ProbNotAandNotB.UpdateLabels()
    End Sub

    Private Sub Settings_DecimalFormatChanged(Value As String) Handles Settings.DecimalFormatChanged
        'The Probability Decimal Format has changed. Update the Probability labels.
        If Settings.ProbabilityMeasure = "Decimal" Then
            ProbA.UpdateLabels()
            ProbNotA.UpdateLabels()
            ProbB.UpdateLabels()
            ProbNotB.UpdateLabels()
            ProbAandB.UpdateLabels()
            ProbAandNotB.UpdateLabels()
            ProbNotAandB.UpdateLabels()
            ProbNotAandNotB.UpdateLabels()
        End If
    End Sub

    Private Sub Settings_PercentFormatChanged(Value As String) Handles Settings.PercentFormatChanged
        'The Probability Percent Format has changed. Update the Probability labels.
        If Settings.ProbabilityMeasure = "Percent" Then
            ProbA.UpdateLabels()
            ProbNotA.UpdateLabels()
            ProbB.UpdateLabels()
            ProbNotB.UpdateLabels()
            ProbAandB.UpdateLabels()
            ProbAandNotB.UpdateLabels()
            ProbNotAandB.UpdateLabels()
            ProbNotAandNotB.UpdateLabels()
        End If
    End Sub

    Private Sub Settings_SamplesFormatChanged(Value As String) Handles Settings.SamplesFormatChanged
        'The SampleCount Samples Format has changed. Update the SampleCount labels.
        SampsA.UpdateLabels()
        SampsNotA.UpdateLabels()
        SampsB.UpdateLabels()
        SampsNotB.UpdateLabels()
        SampsAandB.UpdateLabels()
        SampsAandNotB.UpdateLabels()
        SampsNotAandB.UpdateLabels()
        SampsNotAandNotB.UpdateLabels()
    End Sub

    Private Sub Settings_ConditionChanged(Value As String) Handles Settings.ConditionChanged
        'The Condition has changed. Update the AnnotCondition.
        AnnotCondition.Condition = Value
        CalcConditionalSampleSize()
    End Sub

    Private Sub Settings_ScalingChanged(Value As String) Handles Settings.ScalingChanged

    End Sub

    Protected Overrides Sub Finalize()
        MyBase.Finalize()
    End Sub

    Private Function EllipseArea(ByVal A As Single, ByVal B As Single) As Single
        'Calculate the area of an ellipse
        'A = major radius
        'B = minor radius
        Return A * B * Math.PI
    End Function

    Public Function EventAEllipseArea() As Single
        'Return the area of Event A.
        Dim A As Integer 'The length of the ellipse major axis
        Dim B As Integer 'The length of the ellipse minor axis
        Select Case Settings.Scaling
            Case "Unscaled"
                A = EventA.Unscaled.XMax - EventA.Unscaled.XMin
                B = EventA.Unscaled.YMax - EventA.Unscaled.YMin
                Return EllipseArea(A / 2, B / 2)
            Case "ScaleA"
                A = EventA.ScaleA.XMax - EventA.ScaleA.XMin
                B = EventA.ScaleA.YMax - EventA.ScaleA.YMin
                Return EllipseArea(A / 2, B / 2)
            Case "ScaleB"
                A = EventA.ScaleB.XMax - EventA.ScaleB.XMin
                B = EventA.ScaleB.YMax - EventA.ScaleB.YMin
                Return EllipseArea(A / 2, B / 2)
            Case "ScaleAB"
                A = EventA.ScaleAB.XMax - EventA.ScaleAB.XMin
                B = EventA.ScaleAB.YMax - EventA.ScaleAB.YMin
                Return EllipseArea(A / 2, B / 2)
            Case Else
                Return 0
                RaiseEvent ErrorMessage("Unknown scaling: " & Settings.Scaling & vbCrLf)
        End Select
    End Function

    Public Function EventAEllipseArea(ByVal Scaling As String) As Single
        'Return the area of Event A using the specified scaling ellipse version. 
        Dim A As Integer 'The length of the ellipse major axis
        Dim B As Integer 'The length of the ellipse minor axis
        Select Case Scaling
            Case "Unscaled"
                A = EventA.Unscaled.XMax - EventA.Unscaled.XMin
                B = EventA.Unscaled.YMax - EventA.Unscaled.YMin
                Return EllipseArea(A / 2, B / 2)
            Case "ScaleA"
                A = EventA.ScaleA.XMax - EventA.ScaleA.XMin
                B = EventA.ScaleA.YMax - EventA.ScaleA.YMin
                Return EllipseArea(A / 2, B / 2)
            Case "ScaleB"
                A = EventA.ScaleB.XMax - EventA.ScaleB.XMin
                B = EventA.ScaleB.YMax - EventA.ScaleB.YMin
                Return EllipseArea(A / 2, B / 2)
            Case "ScaleAB"
                A = EventA.ScaleAB.XMax - EventA.ScaleAB.XMin
                B = EventA.ScaleAB.YMax - EventA.ScaleAB.YMin
                Return EllipseArea(A / 2, B / 2)
            Case Else
                Return 0
                RaiseEvent ErrorMessage("Unknown scaling: " & Scaling & vbCrLf)
        End Select
    End Function

    Public Function EventBEllipseArea() As Single
        'Return the area of Event B.
        Dim A As Integer 'The length of the ellipse major axis
        Dim B As Integer 'The length of the ellipse minor axis
        Select Case Settings.Scaling
            Case "Unscaled"
                A = EventB.Unscaled.XMax - EventB.Unscaled.XMin
                B = EventB.Unscaled.YMax - EventB.Unscaled.YMin
                Return EllipseArea(A / 2, B / 2)
            Case "ScaleA"
                A = EventB.ScaleA.XMax - EventB.ScaleA.XMin
                B = EventB.ScaleA.YMax - EventB.ScaleA.YMin
                Return EllipseArea(A / 2, B / 2)
            Case "ScaleB"
                A = EventB.ScaleB.XMax - EventB.ScaleB.XMin
                B = EventB.ScaleB.YMax - EventB.ScaleB.YMin
                Return EllipseArea(A / 2, B / 2)
            Case "ScaleAB"
                A = EventB.ScaleAB.XMax - EventB.ScaleAB.XMin
                B = EventB.ScaleAB.YMax - EventB.ScaleAB.YMin
                Return EllipseArea(A / 2, B / 2)
            Case Else
                Return 0
                RaiseEvent ErrorMessage("Unknown scaling: " & Settings.Scaling & vbCrLf)
        End Select
    End Function

    Public Function EventBEllipseArea(ByVal Scaling As String) As Single
        'Return the area of Event B using the specified scaling ellipse version. 
        Dim A As Integer 'The length of the ellipse major axis
        Dim B As Integer 'The length of the ellipse minor axis
        Select Case Scaling
            Case "Unscaled"
                A = EventB.Unscaled.XMax - EventB.Unscaled.XMin
                B = EventB.Unscaled.YMax - EventB.Unscaled.YMin
                Return EllipseArea(A / 2, B / 2)
            Case "ScaleA"
                A = EventB.ScaleA.XMax - EventB.ScaleA.XMin
                B = EventB.ScaleA.YMax - EventB.ScaleA.YMin
                Return EllipseArea(A / 2, B / 2)
            Case "ScaleB"
                A = EventB.ScaleB.XMax - EventB.ScaleB.XMin
                B = EventB.ScaleB.YMax - EventB.ScaleB.YMin
                Return EllipseArea(A / 2, B / 2)
            Case "ScaleAB"
                A = EventB.ScaleAB.XMax - EventB.ScaleAB.XMin
                B = EventB.ScaleAB.YMax - EventB.ScaleAB.YMin
                Return EllipseArea(A / 2, B / 2)
            Case Else
                Return 0
                RaiseEvent ErrorMessage("Unknown scaling: " & Scaling & vbCrLf)
        End Select
    End Function

    Public Function YIntersectShapeA(ByVal XVal As Single) As YIntersect
        'Returns the Y Coordindates of the intersection points of a vertical line passing through XVal and the Shap A.
        Select Case EventA.Shape
            Case "Rectangle"
                Return YIntersectRectangleA(XVal)
            Case "Ellipse"
                Return YIntersectEllipseA(XVal)
            Case Else
                RaiseEvent ErrorMessage("Unknown Event A shape: " & EventA.Shape & vbCrLf)
        End Select
    End Function

    Private Function YIntersectRectangleA(ByVal XVal As Single) As YIntersect
        'Returns the Y Coordindates of the intersection points of a vertical line passing through XVal and the Event A rectangle.
        Dim YIntersectA As New YIntersect
        Select Case Settings.Scaling
            Case "Unscaled"
                If XVal < EventA.Unscaled.XMin Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                ElseIf XVal > EventA.Unscaled.XMax Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                Else
                    YIntersectA.Upper = EventA.Unscaled.YMin 'In a PictureBox, Y values increase downwards, so YMin is the upper corrdinate.
                    YIntersectA.Lower = EventA.Unscaled.YMax
                End If
            Case "ScaleA"
                If XVal < EventA.ScaleA.XMin Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                ElseIf XVal > EventA.ScaleA.XMax Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                Else
                    YIntersectA.Upper = EventA.ScaleA.YMin
                    YIntersectA.Lower = EventA.ScaleA.YMax
                End If
            Case "ScaleB"
                If XVal < EventA.ScaleB.XMin Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                ElseIf XVal > EventA.ScaleB.XMax Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                Else
                    YIntersectA.Upper = EventA.ScaleB.YMin
                    YIntersectA.Lower = EventA.ScaleB.YMax
                End If
            Case "ScaleAB"
                If XVal < EventA.ScaleAB.XMin Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                ElseIf XVal > EventA.ScaleB.XMax Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                Else
                    YIntersectA.Upper = EventA.ScaleAB.YMin
                    YIntersectA.Lower = EventA.ScaleAB.YMax
                End If
            Case Else
                RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                YIntersectA.Upper = Single.NaN
                YIntersectA.Lower = Single.NaN
        End Select
        Return YIntersectA
    End Function

    Private Function YIntersectEllipseA(ByVal XVal As Single) As YIntersect
        'Returns the Y Coordindates of the intersection points of a vertical line passing through XVal and the Event A ellipse.

        Dim A As Single 'semi-major axis length (major axis length / 2)
        Dim B As Single 'semi-minor axis length (minor axis length / 2)
        Dim H As Single 'X coordinate of centre of ellipse
        Dim K As Single 'Y coordinate of centre of ellipse
        Dim YOffset As Single 'The Y offset of the intersection points from the major axis
        Dim YIntersectA As New YIntersect

        Select Case Settings.Scaling
            Case "Unscaled"
                If XVal < EventA.Unscaled.XMin Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                ElseIf XVal > EventA.Unscaled.XMax Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                Else
                    A = (EventA.Unscaled.XMax - EventA.Unscaled.XMin) / 2
                    B = (EventA.Unscaled.YMax - EventA.Unscaled.YMin) / 2
                    H = (EventA.Unscaled.XMax + EventA.Unscaled.XMin) / 2
                    K = (EventA.Unscaled.YMax + EventA.Unscaled.YMin) / 2
                    YOffset = Math.Sqrt(B * B * (1 - (XVal - H) ^ 2 / A ^ 2))
                    YIntersectA.Upper = K - YOffset
                    YIntersectA.Lower = K + YOffset
                End If
            Case "ScaleA"
                If XVal < EventA.ScaleA.XMin Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                ElseIf XVal > EventA.ScaleA.XMax Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                Else
                    A = (EventA.ScaleA.XMax - EventA.ScaleA.XMin) / 2
                    B = (EventA.ScaleA.YMax - EventA.ScaleA.YMin) / 2
                    H = (EventA.ScaleA.XMax + EventA.ScaleA.XMin) / 2
                    K = (EventA.ScaleA.YMax + EventA.ScaleA.YMin) / 2
                    YOffset = Math.Sqrt(B * B * (1 - (XVal - H) ^ 2 / A ^ 2))
                    YIntersectA.Upper = K - YOffset
                    YIntersectA.Lower = K + YOffset
                End If
            Case "ScaleB"
                If XVal < EventA.ScaleB.XMin Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                ElseIf XVal > EventA.ScaleB.XMax Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                Else
                    A = (EventA.ScaleB.XMax - EventA.ScaleB.XMin) / 2
                    B = (EventA.ScaleB.YMax - EventA.ScaleB.YMin) / 2
                    H = (EventA.ScaleB.XMax + EventA.ScaleB.XMin) / 2
                    K = (EventA.ScaleB.YMax + EventA.ScaleB.YMin) / 2
                    YOffset = Math.Sqrt(B * B * (1 - (XVal - H) ^ 2 / A ^ 2))
                    YIntersectA.Upper = K - YOffset
                    YIntersectA.Lower = K + YOffset
                End If
            Case "ScaleAB"
                If XVal < EventA.ScaleAB.XMin Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                ElseIf XVal > EventA.ScaleAB.XMax Then
                    YIntersectA.Upper = Single.NaN
                    YIntersectA.Lower = Single.NaN
                Else
                    A = (EventA.ScaleAB.XMax - EventA.ScaleAB.XMin) / 2
                    B = (EventA.ScaleAB.YMax - EventA.ScaleAB.YMin) / 2
                    H = (EventA.ScaleAB.XMax + EventA.ScaleAB.XMin) / 2
                    K = (EventA.ScaleAB.YMax + EventA.ScaleAB.YMin) / 2
                    YOffset = Math.Sqrt(B * B * (1 - (XVal - H) ^ 2 / A ^ 2))
                    YIntersectA.Upper = K - YOffset
                    YIntersectA.Lower = K + YOffset
                End If
            Case Else
                RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                YIntersectA.Upper = Single.NaN
                YIntersectA.Lower = Single.NaN
        End Select
        Return YIntersectA
    End Function

    Private Function YIntersectEllipse(ByVal XMin As Single, XMax As Single, YMin As Single, YMax As Single, ByVal XVal As Single) As YIntersect
        'Returns the Y Coordindates of the intersection points of a vertical line passing through XVal and the specified ellipse.

        Dim A As Single 'semi-major axis length (major axis length / 2)
        Dim B As Single 'semi-minor axis length (minor axis length / 2)
        Dim H As Single 'X coordinate of centre of ellipse
        Dim K As Single 'Y coordinate of centre of ellipse
        Dim YOffset As Single 'The Y offset of the intersection points from the major axis
        Dim YIntersect As New YIntersect

        If XVal < XMin Then
            YIntersect.Upper = Single.NaN
            YIntersect.Lower = Single.NaN
        ElseIf XVal > XMax Then
            YIntersect.Upper = Single.NaN
            YIntersect.Lower = Single.NaN
        Else
            A = (XMax - XMin) / 2
            B = (YMax - YMin) / 2
            H = (XMax + XMin) / 2
            K = (YMax + YMin) / 2
            YOffset = Math.Sqrt(B * B * (1 - (XVal - H) ^ 2 / A ^ 2))
            YIntersect.Upper = K - YOffset
            YIntersect.Lower = K + YOffset
        End If
        Return YIntersect
    End Function

    Public Function YIntersectShapeB(ByVal XVal As Single) As YIntersect
        'Returns the Y Coordindates of the intersection points of a vertical line passing through XVal and the Shape B.
        Select Case EventB.Shape
            Case "Rectangle"
                Return YIntersectRectangleB(XVal)
            Case "Ellipse"
                Return YIntersectEllipseB(XVal)
            Case Else
                RaiseEvent ErrorMessage("Unknown Event A shape: " & EventB.Shape & vbCrLf)
        End Select
    End Function

    Private Function YIntersectRectangleB(ByVal XVal As Single) As YIntersect
        'Returns the Y Coordindates of the intersection points of a vertical line passing through XVal and the Event B rectangle.
        Dim YIntersectB As New YIntersect
        Select Case Settings.Scaling
            Case "Unscaled"
                If XVal < EventB.Unscaled.XMin Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                ElseIf XVal > EventB.Unscaled.XMax Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                Else
                    YIntersectB.Upper = EventB.Unscaled.YMin 'In a PictureBox, Y values increase downwards, so YMin is the upper corrdinate.
                    YIntersectB.Lower = EventB.Unscaled.YMax
                End If
            Case "ScaleA"
                If XVal < EventB.ScaleA.XMin Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                ElseIf XVal > EventB.ScaleA.XMax Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                Else
                    YIntersectB.Upper = EventB.ScaleA.YMin
                    YIntersectB.Lower = EventB.ScaleA.YMax
                End If
            Case "ScaleB"
                If XVal < EventB.ScaleB.XMin Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                ElseIf XVal > EventB.ScaleB.XMax Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                Else
                    YIntersectB.Upper = EventB.ScaleB.YMin
                    YIntersectB.Lower = EventB.ScaleB.YMax
                End If
            Case "ScaleAB"
                If XVal < EventB.ScaleAB.XMin Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                ElseIf XVal > EventB.ScaleB.XMax Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                Else
                    YIntersectB.Upper = EventB.ScaleAB.YMin
                    YIntersectB.Lower = EventB.ScaleAB.YMax
                End If
            Case Else
                RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                YIntersectB.Upper = Single.NaN
                YIntersectB.Lower = Single.NaN
        End Select
        Return YIntersectB
    End Function

    Private Function YIntersectEllipseB(ByVal XVal As Single) As YIntersect
        'Returns the Y Coordindates of the intersection points of a vertical line passing through XVal and the Event B ellipse.

        Dim A As Single 'major axis length / 2
        Dim B As Single 'minor axis length / 2
        Dim H As Single 'X coordinate of centre of ellipse
        Dim K As Single 'Y coordinate of centre of ellipse
        Dim YOffset As Single 'The Y offset of the intersection points from the major axis
        Dim YIntersectB As New YIntersect

        Select Case Settings.Scaling
            Case "Unscaled"
                If XVal < EventB.Unscaled.XMin Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                ElseIf XVal > EventB.Unscaled.XMax Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                Else
                    A = (EventB.Unscaled.XMax - EventB.Unscaled.XMin) / 2
                    B = (EventB.Unscaled.YMax - EventB.Unscaled.YMin) / 2
                    H = (EventB.Unscaled.XMax + EventB.Unscaled.XMin) / 2
                    K = (EventB.Unscaled.YMax + EventB.Unscaled.YMin) / 2
                    YOffset = Math.Sqrt(B * B * (1 - (XVal - H) ^ 2 / A ^ 2))
                    YIntersectB.Upper = K - YOffset
                    YIntersectB.Lower = K + YOffset
                End If
            Case "ScaleA"
                If XVal < EventB.ScaleA.XMin Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                ElseIf XVal > EventB.ScaleA.XMax Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                Else
                    A = (EventB.ScaleA.XMax - EventB.ScaleA.XMin) / 2
                    B = (EventB.ScaleA.YMax - EventB.ScaleA.YMin) / 2
                    H = (EventB.ScaleA.XMax + EventB.ScaleA.XMin) / 2
                    K = (EventB.ScaleA.YMax + EventB.ScaleA.YMin) / 2
                    YOffset = Math.Sqrt(B * B * (1 - (XVal - H) ^ 2 / A ^ 2))
                    YIntersectB.Upper = K - YOffset
                    YIntersectB.Lower = K + YOffset
                End If
            Case "ScaleB"
                If XVal < EventB.ScaleB.XMin Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                ElseIf XVal > EventB.ScaleB.XMax Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                Else
                    A = (EventB.ScaleB.XMax - EventB.ScaleB.XMin) / 2
                    B = (EventB.ScaleB.YMax - EventB.ScaleB.YMin) / 2
                    H = (EventB.ScaleB.XMax + EventB.ScaleB.XMin) / 2
                    K = (EventB.ScaleB.YMax + EventB.ScaleB.YMin) / 2
                    YOffset = Math.Sqrt(B * B * (1 - (XVal - H) ^ 2 / A ^ 2))
                    YIntersectB.Upper = K - YOffset
                    YIntersectB.Lower = K + YOffset
                End If
            Case "ScaleAB"
                If XVal < EventB.ScaleAB.XMin Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                ElseIf XVal > EventB.ScaleAB.XMax Then
                    YIntersectB.Upper = Single.NaN
                    YIntersectB.Lower = Single.NaN
                Else
                    A = (EventB.ScaleAB.XMax - EventB.ScaleAB.XMin) / 2
                    B = (EventB.ScaleAB.YMax - EventB.ScaleAB.YMin) / 2
                    H = (EventB.ScaleAB.XMax + EventB.ScaleAB.XMin) / 2
                    K = (EventB.ScaleAB.YMax + EventB.ScaleAB.YMin) / 2
                    YOffset = Math.Sqrt(B * B * (1 - (XVal - H) ^ 2 / A ^ 2))
                    YIntersectB.Upper = K - YOffset
                    YIntersectB.Lower = K + YOffset
                End If
            Case Else
                RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                YIntersectB.Upper = Single.NaN
                YIntersectB.Lower = Single.NaN
        End Select
        Return YIntersectB
    End Function

    Public Function EllipseARightArea(ByVal XVal As Single) As Single
        'Calculate the area of Ellipse A to the right of a vertical line through XVal.

        Dim C As Single 'The length of the major axis
        Dim D As Single 'The length of the minor axis
        Dim H As Single 'The distance of the vertical line from the right edge of the ellipse.
        Dim Area As Single 'The calculated ellipse area to the right of the vertical line.

        Select Case Settings.Scaling
            Case "Unscaled"
                C = (EventA.Unscaled.XMax - EventA.Unscaled.XMin)
                D = (EventA.Unscaled.YMax - EventA.Unscaled.YMin)
                H = EventA.Unscaled.XMax - XVal
                Area = C * D / 4 * (Math.Acos(1 - 2 * H / C) - (1 - 2 * H / C) * Math.Sqrt(4 * H / C - 4 * H ^ 2 / C ^ 2))
            Case "ScaleA"
                C = (EventA.ScaleA.XMax - EventA.ScaleA.XMin)
                D = (EventA.ScaleA.YMax - EventA.ScaleA.YMin)
                H = EventA.ScaleA.XMax - XVal
                Area = C * D / 4 * (Math.Acos(1 - 2 * H / C) - (1 - 2 * H / C) * Math.Sqrt(4 * H / C - 4 * H ^ 2 / C ^ 2))
            Case "ScaleB"
                C = (EventA.ScaleB.XMax - EventA.ScaleB.XMin)
                D = (EventA.ScaleB.YMax - EventA.ScaleB.YMin)
                H = EventA.ScaleB.XMax - XVal
                Area = C * D / 4 * (Math.Acos(1 - 2 * H / C) - (1 - 2 * H / C) * Math.Sqrt(4 * H / C - 4 * H ^ 2 / C ^ 2))
            Case "ScaleAB"
                C = (EventA.ScaleAB.XMax - EventA.ScaleAB.XMin)
                D = (EventA.ScaleAB.YMax - EventA.ScaleAB.YMin)
                H = EventA.ScaleAB.XMax - XVal
                Area = C * D / 4 * (Math.Acos(1 - 2 * H / C) - (1 - 2 * H / C) * Math.Sqrt(4 * H / C - 4 * H ^ 2 / C ^ 2))
            Case Else
                RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                Area = Single.NaN
        End Select
        Return Area
    End Function

    Public Function EllipseRightArea(ByVal XMin As Single, XMax As Single, YMin As Single, YMax As Single, ByVal XVal As Single) As Single
        'Calculate the area of the specified Ellipse to the right of a vertical line through XVal.

        Dim C As Single 'The length of the major axis
        Dim D As Single 'The length of the minor axis
        Dim H As Single 'The distance of the vertical line from the right edge of the ellipse.
        Dim Area As Single 'The calculated ellipse area to the right of the vertical line.

        C = (XMax - XMin)
        D = (YMax - YMin)
        H = XMax - XVal
        Return C * D / 4 * (Math.Acos(1 - 2 * H / C) - (1 - 2 * H / C) * Math.Sqrt(4 * H / C - 4 * H ^ 2 / C ^ 2))
    End Function

    Public Function EllipseBLeftArea(ByVal XVal As Single) As Single
        'Calculate the area of Ellipse B to the left of a vertical line through XVal.

        Dim C As Single 'The length of the major axis
        Dim D As Single 'The length of the minor axis
        Dim H As Single 'The distance of the vertical line from the left edge of the ellipse.
        Dim Area As Single 'The calculated ellipse area to the right of the vertical line.

        Select Case Settings.Scaling
            Case "Unscaled"
                C = (EventB.Unscaled.XMax - EventB.Unscaled.XMin)
                D = (EventB.Unscaled.YMax - EventB.Unscaled.YMin)
                H = XVal - EventB.Unscaled.XMin
                Area = C * D / 4 * (Math.Acos(1 - 2 * H / C) - (1 - 2 * H / C) * Math.Sqrt(4 * H / C - 4 * H ^ 2 / C ^ 2))
            Case "ScaleA"
                C = (EventB.ScaleA.XMax - EventB.ScaleA.XMin)
                D = (EventB.ScaleA.YMax - EventB.ScaleA.YMin)
                H = XVal - EventB.ScaleA.XMin
                Area = C * D / 4 * (Math.Acos(1 - 2 * H / C) - (1 - 2 * H / C) * Math.Sqrt(4 * H / C - 4 * H ^ 2 / C ^ 2))
            Case "ScaleB"
                C = (EventB.ScaleB.XMax - EventB.ScaleB.XMin)
                D = (EventB.ScaleB.YMax - EventB.ScaleB.YMin)
                H = XVal - EventB.ScaleB.XMin
                Area = C * D / 4 * (Math.Acos(1 - 2 * H / C) - (1 - 2 * H / C) * Math.Sqrt(4 * H / C - 4 * H ^ 2 / C ^ 2))
            Case "ScaleAB"
                C = (EventB.ScaleAB.XMax - EventB.ScaleAB.XMin)
                D = (EventB.ScaleAB.YMax - EventB.ScaleAB.YMin)
                H = XVal - EventB.ScaleAB.XMin
                Area = C * D / 4 * (Math.Acos(1 - 2 * H / C) - (1 - 2 * H / C) * Math.Sqrt(4 * H / C - 4 * H ^ 2 / C ^ 2))
            Case Else
                RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                Area = Single.NaN
        End Select
        Return Area
    End Function

    Public Function EllipseLeftArea(ByVal XMin As Single, XMax As Single, YMin As Single, YMax As Single, ByVal XVal As Single) As Single
        'Calculate the area of the specified Ellipse to the left of a vertical line through XVal.

        Dim C As Single 'The length of the major axis
        Dim D As Single 'The length of the minor axis
        Dim H As Single 'The distance of the vertical line from the left edge of the ellipse.
        Dim Area As Single 'The calculated ellipse area to the right of the vertical line.

        C = (XMax - XMin)
        D = (YMax - YMin)
        H = XVal - XMin
        Return C * D / 4 * (Math.Acos(1 - 2 * H / C) - (1 - 2 * H / C) * Math.Sqrt(4 * H / C - 4 * H ^ 2 / C ^ 2))
    End Function

    Public Function EllipseIntersectXPos(ByVal Scaling As String) As Single
        'Calculate the overlap area of Ellipse A and Ellipse B.
        Select Case Scaling
            Case "Unscaled"
                Return EllipseIntersectXPos(EventA.Unscaled.XMin, EventA.Unscaled.XMax, EventA.Unscaled.YMin, EventA.Unscaled.YMax, EventB.Unscaled.XMin, EventB.Unscaled.XMax, EventB.Unscaled.YMin, EventB.Unscaled.YMax)
            Case "ScaleA"
                Return EllipseIntersectXPos(EventA.ScaleA.XMin, EventA.ScaleA.XMax, EventA.ScaleA.YMin, EventA.ScaleA.YMax, EventB.ScaleA.XMin, EventB.ScaleA.XMax, EventB.ScaleA.YMin, EventB.ScaleA.YMax)
            Case "ScaleB"
                Return EllipseIntersectXPos(EventA.ScaleB.XMin, EventA.ScaleB.XMax, EventA.ScaleB.YMin, EventA.ScaleB.YMax, EventB.ScaleB.XMin, EventB.ScaleB.XMax, EventB.ScaleB.YMin, EventB.ScaleB.YMax)
            Case "ScaleAB"
                Return EllipseIntersectXPos(EventA.ScaleAB.XMin, EventA.ScaleAB.XMax, EventA.ScaleAB.YMin, EventA.ScaleAB.YMax, EventB.ScaleAB.XMin, EventB.ScaleAB.XMax, EventB.ScaleAB.YMin, EventB.ScaleAB.YMax)
            Case Else
                Return EllipseIntersectXPos(EventA.Unscaled.XMin, EventA.Unscaled.XMax, EventA.Unscaled.YMin, EventA.Unscaled.YMax, EventB.Unscaled.XMin, EventB.Unscaled.XMax, EventB.Unscaled.YMin, EventB.Unscaled.YMax)
        End Select
    End Function

    'Public Function EllipseIntersectXPos() As Single
    Public Function EllipseIntersectXPos(ByVal AXMin As Single, ByVal AXMax As Single, ByVal AYMin As Single, ByVal AYMax As Single, ByVal BXMin As Single, ByVal BXMax As Single, ByVal BYMin As Single, ByVal BYMax As Single) As Single
        'Calculate the upper X position of the intersection of Ellipse A and Ellipse B.

        Debug.WriteLine("Calling Function EllipseIntersectXPos(AXMin: " & AXMin & " , AXMax: " & AXMax & " , AYMin: " & AYMin & " , AYMax: " & AYMax & " , BXMin: " & BXMin & " , BXMax: " & BXMax & " , BYMin: " & BYMin & " , BYMax: " & BYMax & " ) ")

        Dim XTolerance As Single = 0.0001 'The tolerance in determining the X intersection point of the two ellipses.
        Dim MaxLoops As Integer = 64 'THe maximum number of iterations used in determining the X intersection point of the two ellipses.
        Dim I As Integer 'Loop Index

        Dim YTolerance As Single = 0.0001 'The tolerance in deterining if the ellipses axes parallel to the X axis have the same Y value (their X axes are aligned).

        Dim X1 As Single
        Dim YIntersectA1 As New YIntersect
        Dim YIntersectB1 As New YIntersect

        Dim X2 As Single
        Dim YIntersectA2 As New YIntersect
        Dim YIntersectB2 As New YIntersect

        Dim DX As Single 'The X increment between X1 and X2
        Dim DY1 As Single 'The Y increment between the two ellipses at X1
        Dim DY2 As Single 'The Y increment between the two ellipses at X2
        Dim DDY As Single 'The difference in the Y increments between X1 and X2
        Dim X0 As Single 'The estimated X position where the Y increment between the two ellipses is zero.

        'If EventA.XMax <= EventB.XMin Then
        If AXMax <= BXMin Then
            'The two ellipses do not overlap.
            'Return 0 'Return the area of zero.
            Return Single.NaN 'There is no intersection point.
            'ElseIf (EventA.YMin + EventA.YMax) / 2 - (EventB.YMin + EventB.YMax) / 2 > YTolerance Then
        ElseIf (AYMin + AYMax) / 2 - (BYMin + BYMax) / 2 > YTolerance Then
            'The X axes of the two ellipses are not aligned
            Return Single.NaN
        Else
            'X1 = (EventA.XMax + EventB.XMin) / 2 'Try an ellipse intersection point mid-way between EventA.XMax and EventB.XMin.
            X1 = (AXMax + BXMin) / 2 'Try an ellipse intersection point mid-way between EventA.XMax and EventB.XMin.
            'If X1 = Single.NaN Then
            If Single.IsNaN(X1) Then
                Debug.Print("EllipseIntersectXPos did not converge.")
                'Return X0
                Return Single.NaN
            End If
            YIntersectA1 = YIntersectEllipseA(X1)
            YIntersectB1 = YIntersectEllipseB(X1)
            If Math.Abs(YIntersectA1.Upper - YIntersectB1.Upper) < YTolerance Then
                'The intersection of the ellipses has been found within the allowed tolerance.
                Return X1
            Else
                If YIntersectA1.Upper > YIntersectB1.Upper Then X2 = X1 + 1 Else X2 = X1 - 1 'Set X2 to 1 pixel towards the intersection point.
                YIntersectA2 = YIntersectEllipseA(X2)
                YIntersectB2 = YIntersectEllipseB(X2)

                For I = 0 To MaxLoops
                    DX = X2 - X1
                    DY1 = YIntersectB1.Upper - YIntersectA1.Upper
                    DY2 = YIntersectB2.Upper - YIntersectA2.Upper
                    DDY = DY2 - DY1
                    'X = X1 + (DY - DY1) * DX / DDY : Formula for calculating the X position of a specified DY value.
                    'X0 = X1 - DY1 * DX / DDY when DY = 0 : this is the new estimated X position of the (upper) ellipse intersection point
                    X0 = X1 - DY1 * DX / DDY
                    'If X0 = Single.NaN Then
                    If Single.IsNaN(X0) Then
                        Debug.Print("EllipseIntersectXPos did not converge.")
                        Return X0
                    End If
                    If X1 - X0 <= X2 - X0 Then
                        'Use X0 and X1 to estimate the next refinement
                        Debug.WriteLine("Incrementing ellipse intersection X estimate: " & X1 - X0)
                        If Math.Abs(X1 - X0) < XTolerance Then 'X0 is accurate enough to use as the ellipse intersection point.
                            Exit For
                        End If
                        X2 = X0
                        YIntersectA2 = YIntersectEllipseA(X2)
                        YIntersectB2 = YIntersectEllipseB(X2)
                    Else
                        'Use X0 and X2 to estimate the next refinement
                        Debug.WriteLine("Incrementing ellipse intersection X estimate: " & X0 - X2)
                        If Math.Abs(X0 - X2) < XTolerance Then 'X0 is accurate enough to use as the ellipse intersection point.
                            Exit For
                        End If
                        X1 = X2
                        YIntersectA1 = YIntersectA2
                        YIntersectB1 = YIntersectB2
                        X2 = X0
                        YIntersectA2 = YIntersectEllipseA(X2)
                        YIntersectB2 = YIntersectEllipseB(X2)
                    End If
                Next
            End If
            'The X position of the upper intersection point of the ellipses has been found - either to sufficient resolution or after MaxLoops interations.
            'Debug.WriteLine("Ellipse intersection X estimate:" & X0)
            'Return EllipseBLeftArea(X0) + EllipseARightArea(X0) 'Return the intersection area of the ellipses.
            Return X0
        End If
    End Function

    Public Function EllipseOverlapArea(ByVal Scaling As String) As Single
        'Calculate the overlap area of Ellipse A and Ellipse B.
        Select Case Scaling
            Case "Unscaled"
                Return EllipseOverlapArea(EventA.Unscaled.XMin, EventA.Unscaled.XMax, EventA.Unscaled.YMin, EventA.Unscaled.YMax, EventB.Unscaled.XMin, EventB.Unscaled.XMax, EventB.Unscaled.YMin, EventB.Unscaled.YMax)
            Case "ScaleA"
                Return EllipseOverlapArea(EventA.ScaleA.XMin, EventA.ScaleA.XMax, EventA.ScaleA.YMin, EventA.ScaleA.YMax, EventB.ScaleA.XMin, EventB.ScaleA.XMax, EventB.ScaleA.YMin, EventB.ScaleA.YMax)
            Case "ScaleB"
                Return EllipseOverlapArea(EventA.ScaleB.XMin, EventA.ScaleB.XMax, EventA.ScaleB.YMin, EventA.ScaleB.YMax, EventB.ScaleB.XMin, EventB.ScaleB.XMax, EventB.ScaleB.YMin, EventB.ScaleB.YMax)
            Case "ScaleAB"
                Return EllipseOverlapArea(EventA.ScaleAB.XMin, EventA.ScaleAB.XMax, EventA.ScaleAB.YMin, EventA.ScaleAB.YMax, EventB.ScaleAB.XMin, EventB.ScaleAB.XMax, EventB.ScaleAB.YMin, EventB.ScaleAB.YMax)
            Case Else
                Return EllipseOverlapArea(EventA.Unscaled.XMin, EventA.Unscaled.XMax, EventA.Unscaled.YMin, EventA.Unscaled.YMax, EventB.Unscaled.XMin, EventB.Unscaled.XMax, EventB.Unscaled.YMin, EventB.Unscaled.YMax)
        End Select
    End Function

    'Public Function EllipseOverlapArea() As Single
    Public Function EllipseOverlapArea(ByVal AXMin As Single, AXMax As Single, AYMin As Single, AYMax As Single, ByVal BXMin As Single, BXMax As Single, BYMin As Single, BYMax As Single) As Single
        'Calculate the overlap area of Ellipse A and Ellipse B.
        'NOTE: CHECK: Ellipse A should be to the Left of Ellipse B???

        Debug.WriteLine("Calling Function EllipseOverlapArea(AXMin: " & AXMin & " , AXMax: " & AXMax & " , AYMin: " & AYMin & " , AYMax: " & AYMax & " , BXMin: " & BXMin & " , BXMax: " & BXMax & " , BYMin: " & BYMin & " , BYMax: " & BYMax & " ) ")

        Dim XTolerance As Single = 0.0001 'The tolerance in determining the X intersection point of the two ellipses.
        Dim MaxLoops As Integer = 64 'THe maximum number of iterations used in determining the X intersection point of the two ellipses.
        Dim I As Integer 'Loop Index

        Dim YTolerance As Single = 0.0001 'The tolerance in deterining if the ellipses axes parallel to the X axis have the same Y value (their X axes are aligned).

        Dim X1 As Single
        Dim YIntersectA1 As New YIntersect
        Dim YIntersectB1 As New YIntersect

        Dim X2 As Single
        Dim YIntersectA2 As New YIntersect
        Dim YIntersectB2 As New YIntersect

        Dim DX As Single 'The X increment between X1 and X2
        Dim DY1 As Single 'The Y increment between the two ellipses at X1
        Dim DY2 As Single 'The Y increment between the two ellipses at X2
        Dim DDY As Single 'The difference in the Y increments between X1 and X2
        Dim X0 As Single 'The estimated X position where the Y increment between the two ellipses is zero.

        'If EventA.XMax <= EventB.XMin Then
        If AXMax <= BXMin Then
            'The two ellipses do not overlap.
            Return 0 'Return the area of zero.
            'NOTE: Code after the Return statement in a VB.Net function will not be executed.
            'ElseIf (EventA.XMin + EventA.XMax) / 2 - (EventB.XMin + EventB.XMax) / 2 < YTolerance Then
            'ElseIf (EventA.YMin + EventA.YMax) / 2 - (EventB.YMin + EventB.YMax) / 2 > YTolerance Then
        ElseIf Math.Abs((AYMin + AYMax) / 2 - (BYMin + BYMax) / 2) > YTolerance Then
            'The X axes of the two ellipses are not aligned
            Return Single.NaN
        ElseIf AXMin >= BXMin Then
            'Ellipse A is not to the left of Ellipse B.
            Return 0
            'NOTE: Code after the Return statement in a VB.Net function will not be executed.
        Else
            'X1 = (EventA.XMax + EventB.XMin) / 2 'Try an ellipse intersection point mid-way between EventA.XMax and EventB.XMin.
            X1 = (AXMax + BXMin) / 2 'Try an ellipse intersection point mid-way between EventA.XMax and EventB.XMin.
            If Single.IsNaN(X1) Then
                Debug.Print("EllipseOverlapArea did not converge.")
                'Return X0
                Return 0
            End If
            'YIntersectA1 = YIntersectEllipseA(X1)
            YIntersectA1 = YIntersectEllipse(AXMin, AXMax, AYMin, AYMax, X1)
            'YIntersectB1 = YIntersectEllipseB(X1)
            YIntersectB1 = YIntersectEllipse(BXMin, BXMax, BYMin, BYMax, X1)
            If Math.Abs(YIntersectA1.Upper - YIntersectB1.Upper) < YTolerance Then
                'The intersection of the ellipses has been found within the allowed tolerance.
                'Return X1
                X0 = X1
            Else
                If YIntersectA1.Upper > YIntersectB1.Upper Then X2 = X1 + 1 Else X2 = X1 - 1 'Set X2 to 1 pixel towards the intersection point.
                'YIntersectA2 = YIntersectEllipseA(X2)
                YIntersectA2 = YIntersectEllipse(AXMin, AXMax, AYMin, AYMax, X2)
                'YIntersectB2 = YIntersectEllipseB(X2)
                YIntersectB2 = YIntersectEllipse(BXMin, BXMax, BYMin, BYMax, X2)

                For I = 0 To MaxLoops
                    DX = X2 - X1
                    If Math.Abs(DX) < XTolerance Then Exit For 'Use last X0 (If DX is too small, the linear prediction calculations become inaccurate.
                    DY1 = YIntersectB1.Upper - YIntersectA1.Upper
                    If Math.Abs(DY1) < XTolerance Then Exit For 'Use last X0 (If DY1 is too small, the linear prediction calculations become inaccurate.
                    DY2 = YIntersectB2.Upper - YIntersectA2.Upper
                    If Math.Abs(DY2) < XTolerance Then Exit For 'Use last X0 (If DY2 is too small, the linear prediction calculations become inaccurate.
                    DDY = DY2 - DY1
                    If Math.Abs(DDY) < XTolerance Then Exit For 'Use last X0 (If DDY is too small, the linear prediction calculations become inaccurate.
                    'X = X1 + (DY - DY1) * DX / DDY : Formula for calculating the X position of a specified DY value.
                    'X0 = X1 - DY1 * DX / DDY when DY = 0 : this is the new estimated X position of the (upper) ellipse intersection point
                    X0 = X1 - DY1 * DX / DDY

                    If Single.IsNaN(X0) Then
                        Debug.Print("EllipseOverlapArea did not converge.")
                        Return 0
                    End If

                    'If X0 > (Diagram.Width * 2) Then
                    '    Debug.Print("EllipseOverlapArea did not converge.")
                    '    'Return X0
                    '    Return 0
                    'End If

                    'If X1 - X0 <= X2 - X0 Then
                    If Math.Abs(X1 - X0) <= Math.Abs(X2 - X0) Then
                        'Use X0 and X1 to estimate the next refinement
                        Debug.WriteLine("Incrementing ellipse intersection X estimate: " & X1 - X0 & "  X1 = " & X1 & "  X0 = " & X0)
                        If Math.Abs(X1 - X0) < XTolerance Then 'X0 is accurate enough to use as the ellipse intersection point.
                            Exit For
                        End If
                        X2 = X0
                        'YIntersectA2 = YIntersectEllipseA(X2)
                        YIntersectA2 = YIntersectEllipse(AXMin, AXMax, AYMin, AYMax, X2)
                        'YIntersectB2 = YIntersectEllipseB(X2)
                        YIntersectB2 = YIntersectEllipse(BXMin, BXMax, BYMin, BYMax, X2)
                    Else
                        'Use X0 and X2 to estimate the next refinement
                        Debug.WriteLine("Incrementing ellipse intersection X estimate: " & X0 - X2 & "  X0 = " & X0 & "  X2 = " & X2)
                        If Math.Abs(X0 - X2) < XTolerance Then 'X0 is accurate enough to use as the ellipse intersection point.
                            Exit For
                        End If
                        X1 = X2
                        YIntersectA1 = YIntersectA2
                        YIntersectB1 = YIntersectB2
                        X2 = X0
                        'YIntersectA2 = YIntersectEllipseA(X2)
                        YIntersectA2 = YIntersectEllipse(AXMin, AXMax, AYMin, AYMax, X2)
                        'YIntersectB2 = YIntersectEllipseB(X2)
                        YIntersectB2 = YIntersectEllipse(BXMin, BXMax, BYMin, BYMax, X2)
                    End If
                Next
            End If
            'The X position of the upper intersection point of the ellipses has been found - either to sufficient resolution or after MaxLoops interations.
            Debug.WriteLine("Ellipse intersection X estimate:" & X0)
            'Return EllipseBLeftArea(X0) + EllipseARightArea(X0) 'Return the intersection area of the ellipses.
            Return EllipseLeftArea(BXMin, BXMax, BYMin, BYMax, X0) + EllipseRightArea(AXMin, AXMax, AYMin, AYMax, X0)
        End If
    End Function


    Public Sub SetEllipseScaleA()
        'Rescale Ellipse A so that it has the correct size and overlap relative to Ellipse B.

        Dim EllipseBArea As Single = EventBEllipseArea("ScaleA") 'The current Ellipse B area in pixels
        Dim EllipseAArea As Single = EventAEllipseArea("ScaleA") 'The current Ellipse A area in pixels
        Dim EllipseAWidth As Single = EventA.ScaleA.XMax - EventA.ScaleA.XMin  'The current Ellipse A width in pixels
        Dim EllipseAHeight As Single = EventA.ScaleA.YMax - EventA.ScaleA.YMin 'The current Ellipse A height in pixels

        Dim ScaledEllipseAArea As Single = EllipseBArea / ProbB.Value * ProbA.Value                        'The scaled Ellipse A area in pixels
        Dim ScaledEllipseAWidth As Single = Math.Sqrt(ScaledEllipseAArea / EllipseAArea) * EllipseAWidth   'The scaled Ellipse A width in pixels
        Dim ScaledEllipseAHeight As Single = Math.Sqrt(ScaledEllipseAArea / EllipseAArea) * EllipseAHeight 'The scaled Ellipse A height in pixels
        Dim ScaledEllipseOverlap As Single = (EllipseBArea / ProbB.Value) * ProbAandB.Value                  'The scaled Ellipse A and B overlap area in pixels
        Debug.Print("Required ellipse overlap area: " & ScaledEllipseOverlap)

        Dim EllipseBMidY As Single = (EventB.ScaleA.YMin + EventB.ScaleA.YMax) / 2 'The Y mid point of Ellipse B

        Dim AXMin As Single
        Dim AXMax As Single
        Dim AYMin As Single = EllipseBMidY - ScaledEllipseAHeight / 2 'The top of the scaled Ellipse A (with the same Y mid point as Ellipse B)
        Dim AYMax As Single = EllipseBMidY + ScaledEllipseAHeight / 2 'The base of the scaled Ellipse A (with the same Y mid point as Ellipse B)
        Dim BXMin As Single = EventB.ScaleA.XMin
        Dim BXMax As Single = EventB.ScaleA.XMax
        Dim BYMin As Single = EventB.ScaleA.YMin
        Dim BYMax As Single = EventB.ScaleA.YMax
        Dim EllipseBWidth As Single = BXMax - BXMin

        'Search for a value of EventA.ScaleA.XMax that has an overlap area of ScaledEllipseOverlap.
        'EventA.ScaleA.XMax

        Dim XTolerance As Single = 0.0001 'The tolerance in determining the XMax position of Ellipse A.
        Dim MaxLoops As Integer = 64 'The maximum number of iterations used in determining the XMax position of Ellipse A.
        Dim I As Integer 'Loop Index

        Dim AreaTolerance = 0.1 '0.1 pixel area tolerance

        Dim AXMax1 As Single = EventB.ScaleA.XMin 'Start EventA.ScaleA.XMax at EventB.ScaleA.XMin, where the overlap area is zero. The right edge of ellipse A is touching the left edge of ellipse B.
        Debug.Print("First guess of AXMax: " & AXMax1)
        Dim Overlap1 As Single = 0 'The overlap area corresponding to AXMax1.
        'Dim AXMax2 As Single = (EventB.ScaleA.XMin + EventB.ScaleB.XMax) / 2 'Try EventA.ScaleA.XMax at the X mid point of Ellipse B

        'NOTE: The following second guess can result in ellipse A entirely within ellipse B. The EllipseOverlapArea method assumes the left adge of ellipse A is to the left of ellipse B.
        'Dim AXMax2 As Single = (EventB.ScaleA.XMin + EventB.ScaleA.XMax) / 2 'Try EventA.ScaleA.XMax at the X mid point of Ellipse B

        'UPDATED SECOND GUESS:
        Dim AXMax2 As Single '= EventB.ScaleA.XMin + (ScaledEllipseAWidth / 2) 'Try EventA.ScaleA.XMax to the right of the Ellipse B edge by half the width of Ellipse A.
        If ScaledEllipseAWidth < EllipseBWidth Then
            AXMax2 = EventB.ScaleA.XMin + (ScaledEllipseAWidth / 2) 'Try EventA.ScaleA.XMax to the right of the Ellipse B edge by half the width of Ellipse A.
        Else
            AXMax2 = EventB.ScaleA.XMax + (EllipseBWidth / 2) 'Try EventA.ScaleA.XMin to the right of the Ellipse B edge by half the width of Ellipse B. (If ScaledEllipseAWidth is much larger than Ellipse B width, this guess avoids placing AXMax2 to the right of Ellipse B.)
        End If

        Debug.Print("Second guess of AXMax: " & AXMax2)
        AXMin = AXMax2 - ScaledEllipseAWidth
        AXMax = AXMax2
        Dim Overlap2 As Single = EllipseOverlapArea(AXMin, AXMax, AYMin, AYMax, BXMin, BXMax, BYMin, BYMax)

        Dim DX As Single       'The X axis difference between Ellipse A positions AXMax1 and AXMax2.
        Dim DArea As Single    'The overlap area differences corresponding to Ellipse A positions AXMax1 and AXMax2.
        Dim LinPredX As Single 'The linear prediction of the X value with an overap area of ScaledEllipseOverlap.
        Dim LinPredArea As Single 'The area corresponding to LinPredX

        For I = 0 To MaxLoops
            DX = AXMax2 - AXMax1
            If Math.Abs(DX) < XTolerance Then Exit For 'LinPredX is accurate enough. (If DX becomes too small, the linear prediction calculations become inaccurate.)
            DArea = Overlap2 - Overlap1
            If Math.Abs(DArea) < XTolerance Then Exit For 'LinPredX is accurate enough. (If DArea becomes too small, the linear prediction calculations become inaccurate.)
            'LinPredOverlap = Overlap1 + (LinPredX - AXMax1) * DArea / DX 'The linear formula to predict the Area at LinPredX.
            'LinPredX - AXMax1 = (LinPredOverlap - Overlap1) * DX / DArea
            'LinPredX = AXMax1 + (LinPredOverlap - Overlap1) * DX / DArea
            'LinPredX = AXMax1 + (ScaledEllipseOverlap - Overlap1) * DX / DArea 'The linear prediction formula used to refine Ellipse A XMax.
            LinPredX = AXMax1 + (ScaledEllipseOverlap - Overlap1) * DX / DArea
            LinPredArea = EllipseOverlapArea(LinPredX - ScaledEllipseAWidth, LinPredX, AYMin, AYMax, BXMin, BXMax, BYMin, BYMax)

            Debug.Print("Itration: " & I & "  Refined AXMax: " & LinPredX & "  Overlap area: " & LinPredArea)
            If LinPredX > (Diagram.Width * 2) Then
                Debug.Print("Unstable iteration - stopping.")
                LinPredX = Diagram.Width / 2
                Exit For
            End If

            If Single.IsNaN(LinPredX) Then
                Debug.Print("Unstable iteration - stopping.")
                LinPredX = Diagram.Width / 2
                Exit For
            End If

            If Math.Abs(ScaledEllipseOverlap - LinPredArea) < AreaTolerance Then
                Exit For
            End If
            If Math.Abs(AXMax1 - LinPredX) <= Math.Abs(AXMax2 - LinPredX) Then
                'Use AxMax1 and LinPredX to estimate the next refinement.
                If Math.Abs(AXMax1 - LinPredX) < XTolerance Then
                    'EventA.ScaleA.XMax = LinPredX
                    'EventA.ScaleA.XMin = LinPredX - ScaledEllipseAWidth
                    'EventA.ScaleA.YMin = AYMin
                    'EventA.ScaleA.YMax = AYMax
                    Exit For
                End If
                AXMax2 = AXMax1
                Overlap2 = Overlap1
                AXMax1 = LinPredX
                'Overlap1 = EllipseOverlapArea(AXMax1 - ScaledEllipseAWidth, AXMax1, AYMin, AYMax, BXMin, BXMax, BYMin, BYMax)
                Overlap1 = LinPredArea
            Else
                'Use AxMax2 and LinPredX to estimate the next refinement.
                If Math.Abs(LinPredX - AXMax2) < XTolerance Then
                    'EventA.ScaleA.XMax = LinPredX
                    'EventA.ScaleA.XMin = LinPredX - ScaledEllipseAWidth
                    'EventA.ScaleA.YMin = AYMin
                    'EventA.ScaleA.YMax = AYMax
                    Exit For
                End If
                AXMax1 = AXMax2
                Overlap1 = Overlap2
                AXMax2 = LinPredX
                'Overlap2 = EllipseOverlapArea(AXMax2 - ScaledEllipseAWidth, AXMax2, AYMin, AYMax, BXMin, BXMax, BYMin, BYMax)
                Overlap2 = LinPredArea
            End If

        Next
        EventA.ScaleA.XMax = LinPredX
        EventA.ScaleA.XMin = LinPredX - ScaledEllipseAWidth
        EventA.ScaleA.YMin = AYMin
        EventA.ScaleA.YMax = AYMax

    End Sub

    Public Sub SetEllipseScaleB()
        'Rescale Ellipse B so that it has the correct size and overlap relative to Ellipse A.

        Dim EllipseAArea As Single = EventAEllipseArea("ScaleB") 'The current Ellipse A area in pixels
        Dim EllipseBArea As Single = EventBEllipseArea("ScaleB") 'The current Ellipse B area in pixels
        Dim EllipseBWidth As Single = EventB.ScaleB.XMax - EventB.ScaleB.XMin  'The current Ellipse B width in pixels
        Dim EllipseBHeight As Single = EventB.ScaleB.YMax - EventB.ScaleB.YMin 'The current Ellipse B height in pixels

        Dim ScaledEllipseBArea As Single = EllipseAArea / ProbA.Value * ProbB.Value                        'The scaled Ellipse B area in pixels
        Dim ScaledEllipseBWidth As Single = Math.Sqrt(ScaledEllipseBArea / EllipseBArea) * EllipseBWidth   'The scaled Ellipse B width in pixels
        Dim ScaledEllipseBHeight As Single = Math.Sqrt(ScaledEllipseBArea / EllipseBArea) * EllipseBHeight 'The scaled Ellipse B height in pixels
        Dim ScaledEllipseOverlap As Single = (EllipseAArea / ProbA.Value) * ProbAandB.Value                  'The scaled Ellipse A and B overlap area in pixels
        Debug.Print("Required ellipse overlap area: " & ScaledEllipseOverlap)

        Dim EllipseAMidY As Single = (EventA.ScaleB.YMin + EventA.ScaleB.YMax) / 2 'The Y mid point of Ellipse A

        Dim BXMin As Single
        Dim BXMax As Single
        Dim BYMin As Single = EllipseAMidY - ScaledEllipseBHeight / 2 'The top of the scaled Ellipse B (with the same Y mid point as Ellipse A)
        Dim BYMax As Single = EllipseAMidY + ScaledEllipseBHeight / 2 'The base of the scaled Ellipse B (with the same Y mid point as Ellipse A)
        Dim AXMin As Single = EventA.ScaleB.XMin
        Dim AXMax As Single = EventA.ScaleB.XMax
        Dim AYMin As Single = EventA.ScaleB.YMin
        Dim AYMax As Single = EventA.ScaleB.YMax
        Dim EllipseAWidth As Single = AXMax - AXMin

        'Search for a value of EventB.ScaleB.XMin that has an overlap area of ScaledEllipseOverlap.

        Dim XTolerance As Single = 0.0001 'The tolerance in determining the XMin position of Ellipse B.
        Dim MaxLoops As Integer = 64 'The maximum number of iterations used in determining the XMin position of Ellipse B.
        Dim I As Integer 'Loop Index

        Dim AreaTolerance = 0.1 '0.1 pixel area tolerance

        Dim BXMin1 As Single = EventA.ScaleB.XMax 'Start EventB.ScaleB.XMin at EventA.ScaleB.XMax, where the overlap area is zero.
        Debug.Print("First guess of BXMin: " & BXMin1)
        Dim Overlap1 As Single = 0 'The overlap area corresponding to BXMin1.
        'Dim AXMax2 As Single = (EventB.ScaleA.XMin + EventB.ScaleA.XMax) / 2 'Try EventA.ScaleA.XMax at the X mid point of Ellipse B

        'NOTE: The following second guess can result in ellipse B entirely within ellipse A. The EllipseOverlapArea method assumes the right adge of ellipse B is to the right of ellipse A.
        'Dim BXMin2 As Single = (EventA.ScaleB.XMin + EventA.ScaleB.XMax) / 2 'Try EventB.ScaleB.XMin at the X mid point of Ellipse A

        'UPDATED SECOND GUESS:
        Dim BXMin2 As Single '= EventA.ScaleB.XMax - (ScaledEllipseBWidth / 2) 'Try EventB.ScaleB.XMin to the left of the Ellipse A edge by half the width of Ellipse B
        If ScaledEllipseBWidth < EllipseAWidth Then
            BXMin2 = EventA.ScaleB.XMax - (ScaledEllipseBWidth / 2) 'Try EventB.ScaleB.XMin to the left of the Ellipse A edge by half the width of Ellipse B
        Else
            BXMin2 = EventA.ScaleB.XMax - (EllipseAWidth / 2) 'Try EventB.ScaleB.XMin to the left of the Ellipse A edge by half the width of Ellipse A. (If ScaledEllipseBWidth is much larger than Ellipse A width, this guess avoids placing BXMin2 to the left of Ellipse A.)
        End If
        Debug.Print("Second guess of BXMin: " & BXMin2)
        BXMax = BXMin2 + ScaledEllipseBWidth
        BXMin = BXMin2
        'Dim Overlap2 As Single = EllipseOverlapArea(BXMin, BXMax, BYMin, BYMax, AXMin, AXMax, AYMin, AYMax)
        Dim Overlap2 As Single = EllipseOverlapArea(AXMin, AXMax, AYMin, AYMax, BXMin, BXMax, BYMin, BYMax)

        Dim DX As Single       'The X axis difference between Ellipse B positions BXMin1 and BXMin2.
        Dim DArea As Single    'The overlap area differences corresponding to Ellipse B positions BXMin1 and BXMin2.
        Dim LinPredX As Single 'The linear prediction of the X value with an overap area of ScaledEllipseOverlap.
        Dim LinPredArea As Single 'The area corresponding to LinPredX

        For I = 0 To MaxLoops
            DX = BXMin2 - BXMin1
            If Math.Abs(DX) < XTolerance Then Exit For 'LinPredX is accurate enough. (If DX becomes too small, the linear prediction calculations become inaccurate.)
            DArea = Overlap2 - Overlap1
            If Math.Abs(DArea) < XTolerance Then Exit For 'LinPredX is accurate enough. (If DArea becomes too small, the linear prediction calculations become inaccurate.)
            'LinPredOverlap = Overlap1 + (LinPredX - BXMin1) * DArea / DX 'The linear formula to predict the Area at LinPredX.
            'LinPredX - BXMin1 = (LinPredOverlap - Overlap1) * DX / DArea
            'LinPredX = BXMin1 + (LinPredOverlap - Overlap1) * DX / DArea
            'LinPredX = BXMin1 + (ScaledEllipseOverlap - Overlap1) * DX / DArea 'The linear prediction formula used to refine Ellipse B XMin.
            LinPredX = BXMin1 + (ScaledEllipseOverlap - Overlap1) * DX / DArea
            'LinPredArea = EllipseOverlapArea(LinPredX, LinPredX + ScaledEllipseBWidth, BYMin, BYMax, AXMin, AXMax, AYMin, AYMax)
            LinPredArea = EllipseOverlapArea(AXMin, AXMax, AYMin, AYMax, LinPredX, LinPredX + ScaledEllipseBWidth, BYMin, BYMax)

            Debug.Print("Itration: " & I & "  Refined BXMin: " & LinPredX & "  Overlap area: " & LinPredArea)

            If LinPredX > (Diagram.Width * 2) Then
                Debug.Print("Unstable iteration - stopping.")
                LinPredX = Diagram.Width / 2
                Exit For
            End If

            If Single.IsNaN(LinPredX) Then
                Debug.Print("Unstable iteration - stopping.")
                LinPredX = Diagram.Width / 2
                Exit For
            End If

            If Math.Abs(ScaledEllipseOverlap - LinPredArea) < AreaTolerance Then
                Exit For
            End If
            If Math.Abs(BXMin1 - LinPredX) <= Math.Abs(BXMin2 - LinPredX) Then
                'Use BxMin1 and LinPredX to estimate the next refinement.
                If Math.Abs(BXMin1 - LinPredX) < XTolerance Then
                    'EventA.ScaleA.XMax = LinPredX
                    'EventA.ScaleA.XMin = LinPredX - ScaledEllipseAWidth
                    'EventA.ScaleA.YMin = AYMin
                    'EventA.ScaleA.YMax = AYMax
                    Exit For
                End If
                BXMin2 = BXMin1
                Overlap2 = Overlap1
                BXMin1 = LinPredX
                'Overlap1 = EllipseOverlapArea(AXMax1 - ScaledEllipseAWidth, AXMax1, AYMin, AYMax, BXMin, BXMax, BYMin, BYMax)
                Overlap1 = LinPredArea
            Else
                'Use AxMax2 and LinPredX to estimate the next refinement.
                If Math.Abs(LinPredX - BXMin2) < XTolerance Then
                    'EventA.ScaleA.XMax = LinPredX
                    'EventA.ScaleA.XMin = LinPredX - ScaledEllipseAWidth
                    'EventA.ScaleA.YMin = AYMin
                    'EventA.ScaleA.YMax = AYMax
                    Exit For
                End If
                BXMin1 = BXMin2
                Overlap1 = Overlap2
                BXMin2 = LinPredX
                'Overlap2 = EllipseOverlapArea(AXMax2 - ScaledEllipseAWidth, AXMax2, AYMin, AYMax, BXMin, BXMax, BYMin, BYMax)
                Overlap2 = LinPredArea
            End If

        Next
        EventB.ScaleB.XMin = LinPredX
        EventB.ScaleB.XMax = LinPredX + ScaledEllipseBWidth
        EventB.ScaleB.YMin = BYMin
        EventB.ScaleB.YMax = BYMax

    End Sub

    Public Sub SetEllipseScaleAB()
        'Rescale Ellipse A Ellipse B so that they are the correct size and overlap relative to Ellipse Athe probability diagram.
        Dim DiagramArea As Single = Diagram.Width * Diagram.Height

        Dim EllipseAArea As Single = EventAEllipseArea("ScaleAB") 'The current Ellipse A area in pixels
        Dim EllipseAWidth As Single = EventA.ScaleAB.XMax - EventA.ScaleAB.XMin  'The current Ellipse B width in pixels
        Dim EllipseAHeight As Single = EventA.ScaleAB.YMax - EventA.ScaleAB.YMin 'The current Ellipse B height in pixels

        Dim EllipseBArea As Single = EventBEllipseArea("ScaleAB") 'The current Ellipse B area in pixels
        Dim EllipseBWidth As Single = EventB.ScaleAB.XMax - EventB.ScaleAB.XMin  'The current Ellipse B width in pixels
        Dim EllipseBHeight As Single = EventB.ScaleAB.YMax - EventB.ScaleAB.YMin 'The current Ellipse B height in pixels

        Dim ScaledEllipseAArea As Single = DiagramArea * ProbA.Value                        'The scaled Ellipse A area in pixels
        Dim ScaledEllipseAWidth As Single = Math.Sqrt(ScaledEllipseAArea / EllipseAArea) * EllipseAWidth   'The scaled Ellipse A width in pixels
        Dim ScaledEllipseAHeight As Single = Math.Sqrt(ScaledEllipseAArea / EllipseAArea) * EllipseAHeight 'The scaled Ellipse A height in pixels

        'Update the Ellipse A boundaries: (Use XMax and YMin as the reference points)
        EventA.ScaleAB.XMin = EventA.ScaleAB.XMax - ScaledEllipseAWidth
        EventA.ScaleAB.YMax = EventA.ScaleAB.YMin + ScaledEllipseAHeight

        Dim ScaledEllipseBArea As Single = DiagramArea * ProbB.Value                        'The scaled Ellipse B area in pixels
        Dim ScaledEllipseBWidth As Single = Math.Sqrt(ScaledEllipseBArea / EllipseBArea) * EllipseBWidth   'The scaled Ellipse B width in pixels
        Dim ScaledEllipseBHeight As Single = Math.Sqrt(ScaledEllipseBArea / EllipseBArea) * EllipseBHeight 'The scaled Ellipse B height in pixels

        'Dim ScaledEllipseOverlap As Single = (EllipseAArea / ProbA.Value) * ProbAandB.Value                  'The scaled Ellipse A and B overlap area in pixels
        Dim ScaledEllipseOverlap As Single = DiagramArea * ProbAandB.Value                  'The scaled Ellipse A and B overlap area in pixels
        Debug.Print("Required ellipse overlap area: " & ScaledEllipseOverlap)

        Dim EllipseAMidY As Single = (EventA.ScaleAB.YMin + EventA.ScaleAB.YMax) / 2 'The Y mid point of Ellipse A

        Dim BXMin As Single
        Dim BXMax As Single
        Dim BYMin As Single = EllipseAMidY - ScaledEllipseBHeight / 2 'The top of the scaled Ellipse B (with the same Y mid point as Ellipse A)
        Dim BYMax As Single = EllipseAMidY + ScaledEllipseBHeight / 2 'The base of the scaled Ellipse B (with the same Y mid point as Ellipse A)
        Dim AXMin As Single = EventA.ScaleAB.XMin
        Dim AXMax As Single = EventA.ScaleAB.XMax
        Dim AYMin As Single = EventA.ScaleAB.YMin
        Dim AYMax As Single = EventA.ScaleAB.YMax

        'Search for a value of EventB.ScaleB.XMin that has an overlap area of ScaledEllipseOverlap.

        Dim XTolerance As Single = 0.0001 'The tolerance in determining the XMin position of Ellipse B.
        Dim MaxLoops As Integer = 64 'The maximum number of iterations used in determining the XMin position of Ellipse B.
        Dim I As Integer 'Loop Index

        Dim AreaTolerance = 0.1 '0.1 pixel area tolerance

        Dim BXMin1 As Single = EventA.ScaleAB.XMax 'Start EventB.ScaleAB.XMin at EventA.ScaleAB.XMax, where the overlap area is zero.
        Debug.Print("First guess of BXMin: " & BXMin1)
        Dim Overlap1 As Single = 0 'The overlap area corresponding to BXMin1.
        'Dim AXMax2 As Single = (EventB.ScaleA.XMin + EventB.ScaleA.XMax) / 2 'Try EventA.ScaleA.XMax at the X mid point of Ellipse B
        Dim BXMin2 As Single = (EventA.ScaleAB.XMin + EventA.ScaleAB.XMax) / 2 'Try EventB.ScaleB.XMin at the X mid point of Ellipse A
        Debug.Print("Second guess of BXMin: " & BXMin2)
        BXMax = BXMin2 + ScaledEllipseBWidth
        BXMin = BXMin2
        'Dim Overlap2 As Single = EllipseOverlapArea(BXMin, BXMax, BYMin, BYMax, AXMin, AXMax, AYMin, AYMax)
        Dim Overlap2 As Single = EllipseOverlapArea(AXMin, AXMax, AYMin, AYMax, BXMin, BXMax, BYMin, BYMax)

        Dim DX As Single       'The X axis difference between Ellipse B positions BXMin1 and BXMin2.
        Dim DArea As Single    'The overlap area differences corresponding to Ellipse B positions BXMin1 and BXMin2.
        Dim LinPredX As Single 'The linear prediction of the X value with an overap area of ScaledEllipseOverlap.
        Dim LinPredArea As Single 'The area corresponding to LinPredX

        For I = 0 To MaxLoops
            DX = BXMin2 - BXMin1
            If Math.Abs(DX) < XTolerance Then Exit For 'LinPredX is accurate enough. (If DX becomes too small, the linear prediction calculations become inaccurate.)
            DArea = Overlap2 - Overlap1
            If Math.Abs(DArea) < XTolerance Then Exit For 'LinPredX is accurate enough. (If DArea becomes too small, the linear prediction calculations become inaccurate.)
            'LinPredOverlap = Overlap1 + (LinPredX - BXMin1) * DArea / DX 'The linear formula to predict the Area at LinPredX.
            'LinPredX - BXMin1 = (LinPredOverlap - Overlap1) * DX / DArea
            'LinPredX = BXMin1 + (LinPredOverlap - Overlap1) * DX / DArea
            'LinPredX = BXMin1 + (ScaledEllipseOverlap - Overlap1) * DX / DArea 'The linear prediction formula used to refine Ellipse B XMin.
            LinPredX = BXMin1 + (ScaledEllipseOverlap - Overlap1) * DX / DArea
            'LinPredArea = EllipseOverlapArea(LinPredX, LinPredX + ScaledEllipseBWidth, BYMin, BYMax, AXMin, AXMax, AYMin, AYMax)
            LinPredArea = EllipseOverlapArea(AXMin, AXMax, AYMin, AYMax, LinPredX, LinPredX + ScaledEllipseBWidth, BYMin, BYMax)

            Debug.Print("Itration: " & I & "  Refined BXMin: " & LinPredX & "  Overlap area: " & LinPredArea)
            If LinPredX > (Diagram.Width * 2) Then
                Debug.Print("Unstable iteration - stopping.")
                LinPredX = Diagram.Width / 2
                Exit For
            End If

            If Single.IsNaN(LinPredX) Then
                Debug.Print("Unstable iteration - stopping.")
                LinPredX = Diagram.Width / 2
                Exit For
            End If

            If Math.Abs(ScaledEllipseOverlap - LinPredArea) < AreaTolerance Then
                Exit For
            End If
            If Math.Abs(BXMin1 - LinPredX) <= Math.Abs(BXMin2 - LinPredX) Then
                'Use BxMin1 and LinPredX to estimate the next refinement.
                If Math.Abs(BXMin1 - LinPredX) < XTolerance Then
                    'EventA.ScaleA.XMax = LinPredX
                    'EventA.ScaleA.XMin = LinPredX - ScaledEllipseAWidth
                    'EventA.ScaleA.YMin = AYMin
                    'EventA.ScaleA.YMax = AYMax
                    Exit For
                End If
                BXMin2 = BXMin1
                Overlap2 = Overlap1
                BXMin1 = LinPredX
                'Overlap1 = EllipseOverlapArea(AXMax1 - ScaledEllipseAWidth, AXMax1, AYMin, AYMax, BXMin, BXMax, BYMin, BYMax)
                Overlap1 = LinPredArea
            Else
                'Use AxMax2 and LinPredX to estimate the next refinement.
                If Math.Abs(LinPredX - BXMin2) < XTolerance Then
                    'EventA.ScaleA.XMax = LinPredX
                    'EventA.ScaleA.XMin = LinPredX - ScaledEllipseAWidth
                    'EventA.ScaleA.YMin = AYMin
                    'EventA.ScaleA.YMax = AYMax
                    Exit For
                End If
                BXMin1 = BXMin2
                Overlap1 = Overlap2
                BXMin2 = LinPredX
                'Overlap2 = EllipseOverlapArea(AXMax2 - ScaledEllipseAWidth, AXMax2, AYMin, AYMax, BXMin, BXMax, BYMin, BYMax)
                Overlap2 = LinPredArea
            End If

        Next
        EventB.ScaleAB.XMin = LinPredX
        EventB.ScaleAB.XMax = LinPredX + ScaledEllipseBWidth
        EventB.ScaleAB.YMin = BYMin
        EventB.ScaleAB.YMax = BYMax

    End Sub

#End Region 'Methods --------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Events - Events raised by this class." '=============================================================================================================================================
    Event ErrorMessage(ByVal Msg As String) 'Send an error message.
    Event Message(ByVal Msg As String) 'Send a normal message.
#End Region 'Events ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

End Class 'clsBayes

'Public Class clsLabel_Old
'    'Label class - stores diagram label information including text, font color and position.

'    'Dim myFontStyleBold As FontStyle = FontStyle.Regular Or FontStyle.Bold

'    Private _text As String = "" 'The label text.
'    Property Text As String
'        Get
'            Return _text
'        End Get
'        Set(value As String)
'            _text = value
'            UpdateLabelPosition() 'Update the X and Y position
'        End Set
'    End Property

'    'Private _font As Font = New Font("Arial", 11, myFontStyleBold) 'The label font
'    'Private _font As Font = New Font("Arial", 11, FontStyle.Regular Or FontStyle.Bold) 'The label font
'    Private _font As Font = New Font("Arial", 11, FontStyle.Bold) 'The label font.
'    Property Font As Font
'        Get
'            Return _font
'        End Get
'        Set(value As Font)
'            _font = value
'            UpdateLabelPosition() 'Update the X and Y position
'        End Set
'    End Property

'    Private _color As Color = Color.Black 'The label color.
'    Property Color As Color
'        Get
'            Return _color
'        End Get
'        Set(value As Color)
'            _color = value
'        End Set
'    End Property

'    Private _xPositionReference As String = "Start" 'The position reference used to specify the label X position. (Start, Mid or End)
'    Property PositionReference As String
'        Get
'            Return _xPositionReference
'        End Get
'        Set(value As String)
'            _xPositionReference = value
'        End Set
'    End Property

'    Private _yPositionReference As String = "Top" 'The position reference used to specify the label Y position. (Top, Mid or Base)
'    Property YPositionReference As String
'        Get
'            Return _yPositionReference
'        End Get
'        Set(value As String)
'            _yPositionReference = value
'        End Set
'    End Property

'    'Private _x As Integer = 10 'The X pixel position of the start of the label text.
'    Public _x As Integer = 10 'The X pixel position of the start of the label text. 'Graphics.DrawString - X, Y is the upper-left corner of the drawn text.
'    Property X As Integer
'        Get
'            Return _x
'        End Get
'        Set(value As Integer)
'            _x = value
'            _xPositionReference = "Start"
'        End Set
'    End Property

'    'Private _y As Integer = 10 'The Y pixel position of the top of the label text.
'    Public _y As Integer = 10 'The Y pixel position of the top of the label text. 'Graphics.DrawString - X, Y is the upper-left corner of the drawn text.
'    Property Y As Integer
'        Get
'            Return _y
'        End Get
'        Set(value As Integer)
'            _y = value
'            _yPositionReference = "Top"
'        End Set
'    End Property

'    'Private _midX As Integer = 10 'The X pixel position of the middle of the label text.
'    Public _midX As Integer = 10 'The X pixel position of the middle of the label text.
'    Property MidX As Integer
'        Get
'            Return _midX
'        End Get
'        Set(value As Integer)
'            _midX = value
'            Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
'            _x = _midX - TextWidth / 2
'            _xPositionReference = "Mid"
'        End Set
'    End Property

'    'Private _midY As Integer = 10 'The Y pixel position of the middle of the label text.
'    Public _midY As Integer = 10 'The Y pixel position of the middle of the label text.
'    Property MidY As Integer
'        Get
'            Return _midY
'        End Get
'        Set(value As Integer)
'            _midY = value
'            Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
'            _y = _midY - TextHeight / 2
'            _yPositionReference = "Mid"
'        End Set
'    End Property

'    'Private _endX As Integer = 10 'The X pixel position of the end of the label text.
'    Public _endX As Integer = 10 'The X pixel position of the end of the label text.
'    Property EndX As Integer
'        Get
'            Return _endX
'        End Get
'        Set(value As Integer)
'            _endX = value
'            Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
'            _x = _endX - TextWidth
'            _xPositionReference = "End"
'        End Set
'    End Property

'    ''Private _endY As Integer = 10 'The Y pixel position of the bottom of the label text.
'    'Public _endY As Integer = 10 'The Y pixel position of the bottom of the label text.
'    'Property EndY As Integer
'    '    Get
'    '        Return _endY
'    '    End Get
'    '    Set(value As Integer)
'    '        _endY = value
'    '        Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
'    '        _y = _endY - TextHeight
'    '        _yPositionReference = "Bottom"
'    '    End Set
'    'End Property

'    Public _baseY As Integer = 10 'The Y pixel position of the base of the label text.
'    Property BaseY As Integer
'        Get
'            Return _baseY
'        End Get
'        Set(value As Integer)
'            _baseY = value
'            Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
'            _y = _baseY - TextHeight
'            _yPositionReference = "Base"
'        End Set
'    End Property

'    Private _show As Boolean = True 'The Show flag. If True, the label is shown.
'    Property Show As Boolean
'        Get
'            Return _show
'        End Get
'        Set(value As Boolean)
'            _show = value
'        End Set
'    End Property

'    Private Sub UpdateLabelPosition()
'        'Update the label position.
'        'This is required if the Label text or Font is changed.
'        If _xPositionReference = "Top" Then
'            'The X position remains unchanged.
'        ElseIf _xPositionReference = "Mid" Then
'            'Update the X position as the string width may have changed.
'            Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
'            _x = _midX - TextWidth / 2
'        ElseIf _xPositionReference = "End" Then
'            'Update the X position as the string width may have changed.
'            Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
'            _x = _endX - TextWidth
'        Else
'            'Unknown _xPositionReference
'        End If
'        If _yPositionReference = "Top" Then
'            'The Y position remains unchanged.

'        ElseIf _yPositionReference = "Mid" Then
'            'Update the Y position as the string height may have changed.
'            Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
'            _y = _midY - TextHeight / 2
'            'ElseIf _yPositionReference = "Bottom" Then
'        ElseIf _yPositionReference = "Base" Then
'            'Update the Y position as the string height may have changed.
'            Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
'            '_y = _endY - TextHeight
'            _y = _baseY - TextHeight
'        Else
'            'Unknown _yPositionReference
'        End If
'    End Sub

'End Class 'clsLabel

'NOTE: The following code has been replace by the Coord class and the Unscaled, ScaleA, ScaleB and ScaleAB Coord object in the Label class.
'Public Class LabelTypes
'    'Label types - stores labels for different display types.
'    Public Unscaled As New clsLabel 'Used for displaying a label on an unscaled Bayes diagram.
'    Public ScaleA As New clsLabel 'Used for displaying a label on a Bayes diagram with the Event A area scaled in relation to the Event B area (where the areas are proportional to the probabilities).
'    Public ScaleB As New clsLabel 'Used for displaying a label on a Bayes diagram with Event B scaled in relation to Event A.
'    Public ScaleAB As New clsLabel 'Used for displaying a label on a bayes diagram with Events A and B scaled in relation to all probabilites.
'End Class 'clsLabelTypes

'Public Class clsLabel
'Public Class Label

Public Class clsLabel
    'Label class - stores diagram label information including text, font color and position.

    'Dim myFontStyleBold As FontStyle = FontStyle.Regular Or FontStyle.Bold

    'Public Bayes As Object 'This provides a reference to the parent clsBayes class. This reference is used to access Bayes.ProbabilityMeasure, Bayes.DecimalFormat and Bayes.PercentFormat.
    Public Settings As clsSettings 'This will point to clsBayes.Settings

    Private _text As String = "" 'The label text.
    Property Text As String
        Get
            Return _text
        End Get
        Set(value As String)
            _text = value
            'UpdateLabelPosition() 'Update the X and Y position
            'Select Case Scaling
            Select Case Settings.Scaling
                Case "Unscaled"
                    Unscaled.UpdateLabelPosition()
                Case "ScaleA"
                    ScaleA.UpdateLabelPosition()
                Case "ScaleB"
                    ScaleB.UpdateLabelPosition()
                Case "ScaleAB"
                    ScaleAB.UpdateLabelPosition()
                Case Else
                    RaiseEvent ErrorMessage("Label.Text: Unknown Scaling: " & Settings.Scaling & vbCrLf)
            End Select
        End Set
    End Property

    'Private _font As Font = New Font("Arial", 11, myFontStyleBold) 'The label font
    'Private _font As Font = New Font("Arial", 11, FontStyle.Regular Or FontStyle.Bold) 'The label font
    Private _font As Font = New Font("Arial", 11, FontStyle.Bold) 'The label font.
    Property Font As Font
        Get
            Return _font
        End Get
        Set(value As Font)
            _font = value
            'UpdateLabelPosition() 'Update the X and Y position
            Select Case Settings.Scaling
                Case "Unscaled"
                    Unscaled.UpdateLabelPosition()
                Case "ScaleA"
                    ScaleA.UpdateLabelPosition()
                Case "ScaleB"
                    ScaleB.UpdateLabelPosition()
                Case "ScaleAB"
                    ScaleAB.UpdateLabelPosition()
                Case Else
                    RaiseEvent ErrorMessage("Label.Text: Unknown Scaling: " & Settings.Scaling & vbCrLf)
            End Select
        End Set
    End Property

    Private _color As Color = Color.Black 'The label color.
    Property Color As Color
        Get
            Return _color
        End Get
        Set(value As Color)
            _color = value
        End Set
    End Property


    'Coordinates - stores label coordinates for different display scales.
    Public Unscaled As New Coord 'Used for displaying a label on an unscaled Bayes diagram.
    Public ScaleA As New Coord 'Used for displaying a label on a Bayes diagram with the Event A area scaled in relation to the Event B area (where the areas are proportional to the probabilities).
    Public ScaleB As New Coord 'Used for displaying a label on a Bayes diagram with Event B scaled in relation to Event A.
    Public ScaleAB As New Coord 'Used for displaying a label on a bayes diagram with Events A and B scaled in relation to all probabilites.

    'NOTE: The following code is used to set the X and Y coordinate position of all versions of the text (Unscaled, ScaleA, ScaleB, ScaleAB)
    'Setting these label coordinates updates the Unscaled, ScaleA, ScaleB and ScaleAB versions.
    'Private _xPositionReference As String = "Start" 'The position reference used to specify the label X position. (Start, Mid or End)
    'Property XPositionReference As String
    ReadOnly Property XPositionReference As String
        Get
            'Return _xPositionReference
            Select Case Settings.Scaling
                Case "Unscaled"
                    Return Unscaled.XPositionReference
                Case "ScaleA"
                    Return ScaleA.XPositionReference
                Case "ScaleB"
                    Return ScaleB.XPositionReference
                Case "ScaleAB"
                    Return ScaleAB.XPositionReference
                Case Else
                    RaiseEvent ErrorMessage("Get Label.XPositionReference: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Return Unscaled.XPositionReference
            End Select
        End Get
        'Set(value As String)
        '    _xPositionReference = value
        '    'Unscaled.XPositionReference = value
        '    'ScaleA.XPositionReference = value
        '    'ScaleB.XPositionReference = value
        '    'ScaleAB.XPositionReference = value
        'End Set
    End Property

    'Private _yPositionReference As String = "Top" 'The position reference used to specify the label Y position. (Top, Mid or Base)
    'Property YPositionReference As String
    ReadOnly Property YPositionReference As String
        Get
            'Return _yPositionReference
            Select Case Settings.Scaling
                Case "Unscaled"
                    Return Unscaled.YPositionReference
                Case "ScaleA"
                    Return ScaleA.YPositionReference
                Case "ScaleB"
                    Return ScaleB.YPositionReference
                Case "ScaleAB"
                    Return ScaleAB.YPositionReference
                Case Else
                    RaiseEvent ErrorMessage("Get Label.YPositionReference: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Return Unscaled.YPositionReference
            End Select
        End Get
        'Set(value As String)
        '    _yPositionReference = value
        '    'Unscaled.YPositionReference = value
        '    'ScaleA.YPositionReference = value
        '    'ScaleB.YPositionReference = value
        '    'ScaleAB.YPositionReference = value
        'End Set
    End Property

    'Private _x As Integer = 10 'The X pixel position of the start of the label text.
    'Public _x As Integer = 10 'The X pixel position of the start of the label text. 'Graphics.DrawString - X, Y is the upper-left corner of the drawn text.
    Property X As Integer
        Get
            'Return _x
            Select Case Settings.Scaling
                Case "Unscaled"
                    Return Unscaled.X
                Case "ScaleA"
                    Return ScaleA.X
                Case "ScaleB"
                    Return ScaleB.X
                Case "ScaleAB"
                    Return ScaleAB.X
                Case Else
                    RaiseEvent ErrorMessage("Get Label.X: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Return Unscaled.X
            End Select
        End Get
        Set(value As Integer)
            '_x = value
            '_xPositionReference = "Start"
            'Unscaled.X = value
            'ScaleA.X = value
            'ScaleB.X = value
            'ScaleAB.X = value
            Select Case Settings.Scaling
                Case "Unscaled"
                    Unscaled.X = value
                Case "ScaleA"
                    ScaleA.X = value
                Case "ScaleB"
                    ScaleB.X = value
                Case "ScaleAB"
                    ScaleAB.X = value
                Case Else
                    RaiseEvent ErrorMessage("Set Label.X: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Unscaled.X = value
            End Select
        End Set
    End Property

    'Private _y As Integer = 10 'The Y pixel position of the top of the label text.
    'Public _y As Integer = 10 'The Y pixel position of the top of the label text. 'Graphics.DrawString - X, Y is the upper-left corner of the drawn text.
    Property Y As Integer
        Get
            'Return _y
            Select Case Settings.Scaling
                Case "Unscaled"
                    Return Unscaled.Y
                Case "ScaleA"
                    Return ScaleA.Y
                Case "ScaleB"
                    Return ScaleB.Y
                Case "ScaleAB"
                    Return ScaleAB.Y
                Case Else
                    RaiseEvent ErrorMessage("Get Label.Y: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Return Unscaled.Y
            End Select
        End Get
        Set(value As Integer)
            '_y = value
            '_yPositionReference = "Top"
            'Unscaled.Y = value
            'ScaleA.Y = value
            'ScaleB.Y = value
            'ScaleAB.Y = value
            Select Case Settings.Scaling
                Case "Unscaled"
                    Unscaled.Y = value
                Case "ScaleA"
                    ScaleA.Y = value
                Case "ScaleB"
                    ScaleB.Y = value
                Case "ScaleAB"
                    ScaleAB.Y = value
                Case Else
                    RaiseEvent ErrorMessage("Set Label.Y: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Unscaled.Y = value
            End Select
        End Set
    End Property

    'Private _midX As Integer = 10 'The X pixel position of the middle of the label text.
    'Public _midX As Integer = 10 'The X pixel position of the middle of the label text.
    Property MidX As Integer
        Get
            'Return _midX
            Select Case Settings.Scaling
                Case "Unscaled"
                    Return Unscaled.MidX
                Case "ScaleA"
                    Return ScaleA.MidX
                Case "ScaleB"
                    Return ScaleB.MidX
                Case "ScaleAB"
                    Return ScaleAB.MidX
                Case Else
                    RaiseEvent ErrorMessage("Get Label.MidX: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Return Unscaled.MidX
            End Select
        End Get
        Set(value As Integer)
            '_midX = value
            'Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
            '_x = _midX - TextWidth / 2
            '_xPositionReference = "Mid"

            'Unscaled.MidX = value
            'ScaleA.MidX = value
            'ScaleB.MidX = value
            'ScaleAB.MidX = value
            Select Case Settings.Scaling
                Case "Unscaled"
                    Unscaled.MidX = value
                Case "ScaleA"
                    ScaleA.MidX = value
                Case "ScaleB"
                    ScaleB.MidX = value
                Case "ScaleAB"
                    ScaleAB.MidX = value
                Case Else
                    RaiseEvent ErrorMessage("Set Label.MidX: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Unscaled.MidX = value
            End Select
        End Set
    End Property

    'Private _midY As Integer = 10 'The Y pixel position of the middle of the label text.
    'Public _midY As Integer = 10 'The Y pixel position of the middle of the label text.
    Property MidY As Integer
        Get
            'Return _midY
            Select Case Settings.Scaling
                Case "Unscaled"
                    Return Unscaled.MidY
                Case "ScaleA"
                    Return ScaleA.MidY
                Case "ScaleB"
                    Return ScaleB.MidY
                Case "ScaleAB"
                    Return ScaleAB.MidY
                Case Else
                    RaiseEvent ErrorMessage("Get Label.MidY: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Return Unscaled.MidY
            End Select
        End Get
        Set(value As Integer)
            '_midY = value
            'Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
            '_y = _midY - TextHeight / 2
            '_yPositionReference = "Mid"

            'Unscaled.MidY = value
            'ScaleA.MidY = value
            'ScaleB.MidY = value
            'ScaleAB.MidY = value
            Select Case Settings.Scaling
                Case "Unscaled"
                    Unscaled.MidY = value
                Case "ScaleA"
                    ScaleA.MidY = value
                Case "ScaleB"
                    ScaleB.MidY = value
                Case "ScaleAB"
                    ScaleAB.MidY = value
                Case Else
                    RaiseEvent ErrorMessage("Set Label.MidY: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Unscaled.MidY = value
            End Select
        End Set
    End Property

    'Private _endX As Integer = 10 'The X pixel position of the end of the label text.
    'Public _endX As Integer = 10 'The X pixel position of the end of the label text.
    Property EndX As Integer
        Get
            'Return _endX
            Select Case Settings.Scaling
                Case "Unscaled"
                    Return Unscaled.EndX
                Case "ScaleA"
                    Return ScaleA.EndX
                Case "ScaleB"
                    Return ScaleB.EndX
                Case "ScaleAB"
                    Return ScaleAB.EndX
                Case Else
                    RaiseEvent ErrorMessage("Get Label.EndX: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Return Unscaled.EndX
            End Select
        End Get
        Set(value As Integer)
            '_endX = value
            'Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
            '_x = _endX - TextWidth
            '_xPositionReference = "End"

            'Unscaled.EndX = value
            'ScaleA.EndX = value
            'ScaleB.EndX = value
            'ScaleAB.EndX = value
            Select Case Settings.Scaling
                Case "Unscaled"
                    Unscaled.EndX = value
                Case "ScaleA"
                    ScaleA.EndX = value
                Case "ScaleB"
                    ScaleB.EndX = value
                Case "ScaleAB"
                    ScaleAB.EndX = value
                Case Else
                    RaiseEvent ErrorMessage("Set Label.EndX: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Unscaled.EndX = value
            End Select
        End Set
    End Property

    ''Private _endY As Integer = 10 'The Y pixel position of the bottom of the label text.
    'Public _endY As Integer = 10 'The Y pixel position of the bottom of the label text.
    'Property EndY As Integer
    '    Get
    '        Return _endY
    '    End Get
    '    Set(value As Integer)
    '        _endY = value
    '        Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
    '        _y = _endY - TextHeight
    '        _yPositionReference = "Bottom"
    '    End Set
    'End Property

    'Public _baseY As Integer = 10 'The Y pixel position of the base of the label text.
    Property BaseY As Integer
        Get
            'Return _baseY
            Select Case Settings.Scaling
                Case "Unscaled"
                    Return Unscaled.BaseY
                Case "ScaleA"
                    Return ScaleA.BaseY
                Case "ScaleB"
                    Return ScaleB.BaseY
                Case "ScaleAB"
                    Return ScaleAB.BaseY
                Case Else
                    RaiseEvent ErrorMessage("Get Label.BaseY: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Return Unscaled.BaseY
            End Select
        End Get
        Set(value As Integer)
            '_baseY = value
            'Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
            '_y = _baseY - TextHeight
            '_yPositionReference = "Base"

            'Unscaled.BaseY = value
            'ScaleA.BaseY = value
            'ScaleB.BaseY = value
            'ScaleAB.BaseY = value
            Select Case Settings.Scaling
                Case "Unscaled"
                    Unscaled.BaseY = value
                Case "ScaleA"
                    ScaleA.BaseY = value
                Case "ScaleB"
                    ScaleB.BaseY = value
                Case "ScaleAB"
                    ScaleAB.BaseY = value
                Case Else
                    RaiseEvent ErrorMessage("Set Label.BaseY: Unknown scaling: " & Settings.Scaling & vbCrLf)
                    Unscaled.BaseY = value
            End Select
        End Set
    End Property



    Public Sub New()
        'These Coord objects need to access parent properties:
        'The following code passes a reference to the parent class:
        Unscaled.parent = Me
        ScaleA.parent = Me
        ScaleB.parent = Me
        ScaleAB.parent = Me
    End Sub

    Private _show As Boolean = True 'The Show flag. If True, the label is shown.
    Property Show As Boolean
        Get
            Return _show
        End Get
        Set(value As Boolean)
            _show = value
        End Set
    End Property

    'Private _scaling As String = "Unscaled" 'The scaling used to display the Bayes model (Unscaled, ScaleA, ScaleB, ScaleAB)
    ''Unscaled: Diagrammatic figure - not to scale.
    ''ScaleA: The Event A shape area is scaled relative to the Event B shape area.
    ''ScaleB: The Event B shape is scaled relative to the Event A shape area.
    ''ScaleAB: The Event A and Event B shape areas are scaled relative the their probabilities, where the total area of the diagram represents the probability of 1.
    'Property Scaling As String
    '    Get
    '        Return _scaling
    '    End Get
    '    Set(value As String)
    '        _scaling = value
    '    End Set
    'End Property

    'NOTE: The Label Location properties now update the appropriate Unscaled, ScaleA, ScaleB and ScaleAB versions so the following code is not used.
    'Private Sub UpdateLabelPosition()
    '    'Update the label position.
    '    'This is required if the Label text or Font is changed.
    '    If _xPositionReference = "Top" Then
    '        'The X position remains unchanged.
    '    ElseIf _xPositionReference = "Mid" Then
    '        'Update the X position as the string width may have changed.
    '        Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
    '        _x = _midX - TextWidth / 2
    '    ElseIf _xPositionReference = "End" Then
    '        'Update the X position as the string width may have changed.
    '        Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
    '        _x = _endX - TextWidth
    '    Else
    '        'Unknown _xPositionReference
    '    End If
    '    If _yPositionReference = "Top" Then
    '        'The Y position remains unchanged.
    '    ElseIf _yPositionReference = "Mid" Then
    '        'Update the Y position as the string height may have changed.
    '        Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
    '        _y = _midY - TextHeight / 2
    '    ElseIf _yPositionReference = "Base" Then
    '        'Update the Y position as the string height may have changed.
    '        Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
    '        _y = _baseY - TextHeight
    '    Else
    '        'Unknown _yPositionReference
    '    End If
    'End Sub


#Region " Events - Events raised by this class." '=============================================================================================================================================
    Event ErrorMessage(ByVal Msg As String) 'Send an error message.
    Event Message(ByVal Msg As String) 'Send a normal message.
#End Region 'Events ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

End Class 'clsLabel

Public Class Coord
    'Stores the coordinate of a label.

    Public parent As clsLabel

    Private _xPositionReference As String = "Start" 'The position reference used to specify the label X position. (Start, Mid or End)
    Property XPositionReference As String
        Get
            Return _xPositionReference
        End Get
        Set(value As String)
            _xPositionReference = value
        End Set
    End Property

    Private _yPositionReference As String = "Top" 'The position reference used to specify the label Y position. (Top, Mid or Base)
    Property YPositionReference As String
        Get
            Return _yPositionReference
        End Get
        Set(value As String)
            _yPositionReference = value
        End Set
    End Property

    'Private _x As Integer = 10 'The X pixel position of the start of the label text.
    Public _x As Integer = 10 'The X pixel position of the start of the label text. 'Graphics.DrawString - X, Y is the upper-left corner of the drawn text.
    Property X As Integer
        Get
            Return _x
        End Get
        Set(value As Integer)
            _x = value
            _xPositionReference = "Start"
        End Set
    End Property

    'Private _y As Integer = 10 'The Y pixel position of the top of the label text.
    Public _y As Integer = 10 'The Y pixel position of the top of the label text. 'Graphics.DrawString - X, Y is the upper-left corner of the drawn text.
    Property Y As Integer
        Get
            Return _y
        End Get
        Set(value As Integer)
            _y = value
            _yPositionReference = "Top"
        End Set
    End Property

    'Private _midX As Integer = 10 'The X pixel position of the middle of the label text.
    Public _midX As Integer = 10 'The X pixel position of the middle of the label text.
    Property MidX As Integer
        Get
            Return _midX
        End Get
        Set(value As Integer)
            _midX = value
            'Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
            Dim TextWidth As Integer = TextRenderer.MeasureText(parent.Text, parent.Font).Width
            _x = _midX - TextWidth / 2
            _xPositionReference = "Mid"
        End Set
    End Property

    'Private _midY As Integer = 10 'The Y pixel position of the middle of the label text.
    Public _midY As Integer = 10 'The Y pixel position of the middle of the label text.
    Property MidY As Integer
        Get
            Return _midY
        End Get
        Set(value As Integer)
            _midY = value
            'Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
            Dim TextHeight As Integer = TextRenderer.MeasureText(parent.Text, parent.Font).Height
            _y = _midY - TextHeight / 2
            _yPositionReference = "Mid"
        End Set
    End Property

    'Private _endX As Integer = 10 'The X pixel position of the end of the label text.
    Public _endX As Integer = 10 'The X pixel position of the end of the label text.
    Property EndX As Integer
        Get
            Return _endX
        End Get
        Set(value As Integer)
            _endX = value
            Dim TextWidth As Integer = TextRenderer.MeasureText(parent.Text, parent.Font).Width
            _x = _endX - TextWidth
            _xPositionReference = "End"
        End Set
    End Property


    Public _baseY As Integer = 10 'The Y pixel position of the base of the label text.
    Property BaseY As Integer
        Get
            Return _baseY
        End Get
        Set(value As Integer)
            _baseY = value
            'Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
            Dim TextHeight As Integer = TextRenderer.MeasureText(parent.Text, parent.Font).Height
            _y = _baseY - TextHeight
            _yPositionReference = "Base"
        End Set
    End Property

    'Private Sub UpdateLabelPosition()
    Public Sub UpdateLabelPosition()
        'Update the label position.
        'This is required if the Label text or Font is changed.
        If _xPositionReference = "Top" Then
            'The X position remains unchanged.
        ElseIf _xPositionReference = "Mid" Then
            'Update the X position as the string width may have changed.
            Dim TextWidth As Integer = TextRenderer.MeasureText(parent.Text, parent.Font).Width
            _x = _midX - TextWidth / 2
        ElseIf _xPositionReference = "End" Then
            'Update the X position as the string width may have changed.
            Dim TextWidth As Integer = TextRenderer.MeasureText(parent.Text, parent.Font).Width
            _x = _endX - TextWidth
        Else
            'Unknown _xPositionReference
        End If
        If _yPositionReference = "Top" Then
            'The Y position remains unchanged.
        ElseIf _yPositionReference = "Mid" Then
            'Update the Y position as the string height may have changed.
            Dim TextHeight As Integer = TextRenderer.MeasureText(parent.Text, parent.Font).Height
            _y = _midY - TextHeight / 2
        ElseIf _yPositionReference = "Base" Then
            'Update the Y position as the string height may have changed.
            Dim TextHeight As Integer = TextRenderer.MeasureText(parent.Text, parent.Font).Height
            _y = _baseY - TextHeight
        Else
            'Unknown _yPositionReference
        End If
    End Sub

End Class 'Coord


Public Class clsProbability
    'Private Class clsProbability
    'Probability class - stores information about the probability of an event.

    'Public Bayes As Object 'This provides a reference to the parent clsBayes class. This reference is used to access Bayes.ProbabilityMeasure, Bayes.DecimalFormat and Bayes.PercentFormat.
    Public Settings As clsSettings 'This will point to Bayes.Settings

    'Public parent As clsLabel
    'Public Label As New clsLabel 'The probability label
    'Public Label As New LabelTypes 'The probability label
    Public Label As New clsLabel 'The probability label

    Private _definedValue As Double = 0.1 'The defined probability value. 
    Property DefinedValue As Double
        Get
            Return _definedValue
        End Get
        Set(value As Double)
            _definedValue = value
            'value = value
            Me.Value = value
            RaiseEvent DefinedValueChanged(_value)
        End Set
    End Property

    'Private _value As Double = 0.1 'The probability value - a decimal number between 0 and 1. (ProbA._value NOT visible from clsBayes.vb or Main.vb)
    'Public _value As Double = 0.1 'The probability value - a decimal number between 0 and 1. (ProbA._value visible from clsBayes.vb and Main.vb)
    'NOTE: _value is now private. Setting the Value property now only executes UpdateLabelText and not the ValueChanged event. DefinedValue is set to manually change the value.
    Private _value As Double = 0.1 'The probability value - a decimal number between 0 and 1. 
    'Friend _value As Double = 0.1 'The probability value - a decimal number between 0 and 1. (ProbA._value visible from clsBayes.vb and Main.vb)
    'Private Protected _value As Double = 0.1 'The probability value - a decimal number between 0 and 1. (ProbA._value visible from clsBayes.vb and Main.vb)
    Property Value As Double
        Get
            Return _value
        End Get
        Set(value As Double)
            _value = value
            UpdateLabelText() 'Update the Label text
            'RaiseEvent ValueChanged(_value)
        End Set
    End Property

    'Overridable ReadOnly Property FormattedValue As String 'The formatted probability value. 'NOTE: An Overridable version is required because Measure, DecimalFormat and PercentFormat ar not updated when their Overrided versions are used.
    ReadOnly Property FormattedValue As String 'The formatted probability value. 
        Get
            'If _measure = "Decimal" Then
            'If Bayes.Measure = "Decimal" Then
            If IsNothing(Settings) Then
                'Debug.WriteLine("clsProbability.FormattedValue: Settings is Nothing.")
            Else
                If Settings.ProbabilityMeasure = "Decimal" Then
                    'Return Format(Value, DecimalFormat)
                    'Return Format(Value, Bayes.DecimalFormat)
                    Return Format(Value, Settings.DecimalFormat)
                    'ElseIf _measure = "Percent" Then
                    'ElseIf Bayes.Measure = "Percent" Then
                ElseIf Settings.ProbabilityMeasure = "Percent" Then
                    'Return Format(Value * 100, PercentFormat) & "%"
                    'Return Format(Value * 100, Bayes.PercentFormat) & "%"
                    Return Format(Value * 100, Settings.PercentFormat) & "%"
                Else
                    'Unknown probability measure.
                    'Return Format(Value, DecimalFormat)
                    'Return Format(Value, Bayes.DecimalFormat)
                    Return Format(Value, Settings.DecimalFormat)
                End If
            End If
        End Get
    End Property


    Private _rank As Integer = 40 'The data value entry rank. 
    'The lowest ranked values are adjusted to maintain data consistency.
    'When a data value is entered manually it is assigned a rank of 1. The ranks of the other data variables are adjusted lower.
    'There are 8 unconditional entries: ProbA, ProbNotA, ProbB, ProbNotB, ProbAandB, ProbAandNotB, ProbNotAandB, ProbNotAandNotB
    'There are 8 Given A entries: ProbA|A = 1, ProbNotA|A = 0, ProbB|A, ProbNotB|A, ProbAandB|A, ProbAandNotB|A, ProbNotAandB|A = 0, ProbNotAandNotB|A = 0
    'There are 8 Given NotA entries: ProbA|NotA = 0, ProbNotA|NotA = 1, ProbB|NotA, ProbNotB|NotA, ProbAandB|NotA = 0, ProbAandNotB|NotA = 0, ProbNotAandB|NotA, ProbNotAandNotB|NotA
    'There are 8 Given B entries: ProbA|B, ProbNotA|B, ProbB|B = 1, ProbNotB|B = 0, ProbAandB|B, ProbAandNotB|B = 0, ProbNotAandB|B, ProbNotAandNotB|B = 0
    'There are 8 Given Not B entries: ProbA|NotB, ProbNotA|NotB, ProbB|NotB = 0, ProbNotB|NotB = 1, ProbAandB|NotB = 0, ProbAandNotB|NotB, ProbNotAandB|NotB = 0, ProbNotAandNotB|NotB
    '40 is the lowest rank. 

    Property Rank As Integer
        Get
            Return _rank
        End Get
        Set(value As Integer)
            _rank = value
        End Set
    End Property

    Private _status As String = "Undefined" 'The status of the probability value (Defined, Calculated or Undefined).
    Property Status As String
        Get
            Return _status
        End Get
        Set(value As String)
            _status = value
        End Set
    End Property

    Private _description As String = "" 'A description of the probability.
        Property Description As String
            Get
                Return _description
            End Get
            Set(value As String)
                _description = value
            End Set
        End Property

    'NOTE: This property is now asscessed using Bayes.Measure
    'Private _measure As String = "Decimal" 'The probability measure - either Decimal or Percent
    'Overridable Property Measure As String
    '    Get
    '        Return _measure
    '    End Get
    '    Set(value As String)
    '        _measure = value
    '        'Add code to update the Label.Text when Measure is changed:
    '        UpdateLabelText()
    '        'The following code was not used as it did not reduce the amount of coding and added complexity.
    '        'RaiseEvent MeasureChanged(_measure) 'When the inherited clsProbability class in the Probability class raises this event, the measure is copied to the .GivenA, .GivenNotA, .GivenB and .GivenNotB versions.
    '    End Set
    'End Property


    'NOTE: This property is now asscessed using Bayes.DecimalFormat
    'Private _decimalFormat As String = "" 'A number format string used to display the probability value as a decimal.
    'Overridable Property DecimalFormat As String
    '    Get
    '        Return _decimalFormat
    '    End Get
    '    Set(value As String)
    '        _decimalFormat = value
    '        If _measure = "Decimal" Then UpdateLabelText() 'Update Label.Text
    '    End Set
    'End Property

    'NOTE: This property is now asscessed using Bayes.PercentFormat
    'Private _percentFormat As String = "" 'A number format string used to display the probability value as a percent.
    'Overridable Property PercentFormat As String
    '    Get
    '        Return _percentFormat
    '    End Get
    '    Set(value As String)
    '        _percentFormat = value
    '        If _measure = "Percent" Then UpdateLabelText() 'Update Label.Text
    '    End Set
    'End Property

    Private _prefix As String = "" 'The prefix used to display a probability value
        Property Prefix As String
            Get
                Return _prefix
            End Get
            Set(value As String)
            _prefix = value
            UpdateLabelText() 'Update Label.Text
        End Set
        End Property

        Private _show As Boolean = True 'If True, the probability label is shown.
    Property Show As Boolean
        Get
            Return _show
        End Get
        Set(value As Boolean)
            _show = value
        End Set
    End Property

    'Private _scaling As String = "Unscaled" 'The scaling used to display the Bayes model (Unscaled, ScaleA, ScaleB, ScaleAB)

    Public Sub New()
        'Pass the Bayes reference to the Label class:
        'Label.Bayes = Bayes
        'Pass the Settings reference to the Label class:
        Label.Settings = Settings
    End Sub

    'NOTE: THe scaling property is now accessed from Settings.Scaling
    'Unscaled: Diagrammatic figure - not to scale.
    'ScaleA: The Event A shape area is scaled relative to the Event B shape area.
    'ScaleB: The Event B shape is scaled relative to the Event A shape area.
    'ScaleAB: The Event A and Event B shape areas are scaled relative the their probabilities, where the total area of the diagram represents the probability of 1.
    'Overridable Property Scaling As String 'A separate version of Scaling will be used in the Probability class. This version will update the .GivenA, .GivenNotA, .GivenB and .GivenNotB copies of the Scaling property. 
    '    Get
    '        Return _scaling
    '    End Get
    '    Set(value As String)
    '        _scaling = value
    '        Label.Scaling = _scaling 'Propagate the updated scaling property to the Label.
    '        'The following code was not used as it did not reduce the amount of coding and added complexity.
    '        'RaiseEvent ScalingChanged(_scaling) 'When the inherited clsProbability class in the Probability class raises this event, the scaling is copied to the .GivenA, .GivenNotA, .GivenB and .GivenNotB versions.
    '    End Set
    'End Property



#Region " Methods - Methods used in this class." '=============================================================================================================================================

    Public Sub UpdateLabelText()
        'Update the label text.

        If IsNothing(Settings) Then
            'Debug.WriteLine("clsProbability.UpdateLabelText: Settings is Nothing.")
            Exit Sub
        End If

        'This is required when the Prefix, Value, Measure or Format is changed.
        'If _measure = "Decimal" Then
        'If Bayes.Measure = "Decimal" Then
        If Settings.ProbabilityMeasure = "Decimal" Then
            'Label.Unscaled.Text = Prefix & Format(Value, DecimalFormat)
            'Label.ScaleA.Text = Label.Unscaled.Text
            'Label.ScaleB.Text = Label.Unscaled.Text
            'Label.ScaleAB.Text = Label.Unscaled.Text
            'Label.Text = Prefix & Format(Value, DecimalFormat)
            'Label.Text = Prefix & Format(Value, Bayes.DecimalFormat)
            Label.Text = Prefix & Format(Value, Settings.DecimalFormat)
            'ElseIf _measure = "Percent" Then
            'ElseIf Bayes.Measure = "Percent" Then
        ElseIf Settings.ProbabilityMeasure = "Percent" Then
            'Label.Unscaled.Text = Prefix & Format(Value, PercentFormat) & "%"
            'Label.ScaleA.Text = Label.Unscaled.Text
            'Label.ScaleB.Text = Label.Unscaled.Text
            'Label.ScaleAB.Text = Label.Unscaled.Text
            'Label.Text = Prefix & Format(Value, PercentFormat) & "%"
            'Label.Text = Prefix & Format(Value * 100, PercentFormat) & "%"
            'Label.Text = Prefix & Format(Value * 100, Bayes.PercentFormat) & "%"
            Label.Text = Prefix & Format(Value * 100, Settings.PercentFormat) & "%"
        Else
            'Unknown probability measure.
        End If
    End Sub

#End Region 'Methods --------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Region " Events - Events raised by this class." '=============================================================================================================================================
    'Event ValueChanged(ByVal Value As Double) 'Send the changed probability value in the ValueChanged event.
    Event DefinedValueChanged(ByVal Value As Double) 'Send the changed probability value in the DefinedValueChanged event.
    'Event ScalingChanged(ByVal Scaling As String) 'Send the new Scaling string in the ScalingChanged event.
    'Event MeasureChanged(ByVal Measure As String) 'Send the new ProbabilityMeasure in the MeasureChanged event.
#End Region 'Events ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

End Class 'clsProbability

    Public Class clsSampleCount
    'Sample Count class - stores information about the sample count of an event.

    'Public Bayes As Object 'This provides a reference to the parent clsBayes class. This reference is used to access Bayes.ProbabilityMeasure, Bayes.DecimalFormat and Bayes.PercentFormat.
    Public Settings As clsSettings 'This will point to clsBayes.Settings

    'Public Label As New clsLabel 'The probability label
    'Public Label As New LabelTypes 'The probability label
    Public Label As New clsLabel 'The probability label

    Private _definedValue As Double = 0.1 'The defined sample count value. 
    Property DefinedValue As Double
        Get
            Return _definedValue
        End Get
        Set(value As Double)
            _definedValue = value
            'value = value
            Me.Value = value
            RaiseEvent DefinedValueChanged(_value)
        End Set
    End Property


    'Private _value As Double = 0.1 'The sample count value 
    'Public _value As Double = 0.1 'The sample count value
    Private _value As Double = 0.1 'The sample count value 
    Property Value As Double
        Get
            Return _value
        End Get
        Set(value As Double)
            _value = value
            UpdateLabelText() 'Update the Label text
            'RaiseEvent ValueChanged(_value)
        End Set
    End Property

    ReadOnly Property FormattedValue As String 'The formatted sample count value.
        Get
            'Return Format(Value, CountFormat)
            Return Format(Value, Settings.SamplesFormat)
        End Get
    End Property


    Private _rank As Integer = 40 'The data value entry rank. 
    'The lowest ranked values are adjusted to maintain data consistency.
    'When a data value is entered manually it is assigned a rank of 1. The ranks of the other data variables are adjusted lower.
    'There are 8 unconditional entries: ProbA, ProbNotA, ProbB, ProbNotB, ProbAandB, ProbAandNotB, ProbNotAandB, ProbNotAandNotB
    'There are 8 Given A entries: ProbA|A = 1, ProbNotA|A = 0, ProbB|A, ProbNotB|A, ProbAandB|A, ProbAandNotB|A, ProbNotAandB|A = 0, ProbNotAandNotB|A = 0
    'There are 8 Given NotA entries: ProbA|NotA = 0, ProbNotA|NotA = 1, ProbB|NotA, ProbNotB|NotA, ProbAandB|NotA = 0, ProbAandNotB|NotA = 0, ProbNotAandB|NotA, ProbNotAandNotB|NotA
    'There are 8 Given B entries: ProbA|B, ProbNotA|B, ProbB|B = 1, ProbNotB|B = 0, ProbAandB|B, ProbAandNotB|B = 0, ProbNotAandB|B, ProbNotAandNotB|B = 0
    'There are 8 Given Not B entries: ProbA|NotB, ProbNotA|NotB, ProbB|NotB = 0, ProbNotB|NotB = 1, ProbAandB|NotB = 0, ProbAandNotB|NotB, ProbNotAandB|NotB = 0, ProbNotAandNotB|NotB
    '40 is the lowest rank. 

    Property Rank As Integer
        Get
            Return _rank
        End Get
        Set(value As Integer)
            _rank = value
        End Set
    End Property

    Private _status As String = "Undefined" 'The status of the Sample Count value (Defined, Calculated or Undefined).
    Property Status As String
        Get
            Return _status
        End Get
        Set(value As String)
            _status = value
        End Set
    End Property

    Private _description As String = "" 'A description of the probability.
        Property Description As String
            Get
                Return _description
            End Get
            Set(value As String)
                _description = value
            End Set
        End Property

    'This property is now accessed from Settings.CountFormat
    'Private _countFormat As String = "" 'A number format string used to display the Sample Count.
    'Overridable Property CountFormat As String
    '    Get
    '        Return _countFormat
    '    End Get
    '    Set(value As String)
    '        _countFormat = value
    '        'Add code to update the Label.Text when Measure is changed.
    '        UpdateLabelText() 'Update Label.Text
    '    End Set
    'End Property

    Private _prefix As String = "" 'The prefix used to display a probability value
        Property Prefix As String
            Get
                Return _prefix
            End Get
            Set(value As String)
                _prefix = value
            'Add code to update the Label.Text when Prefix is changed.
            UpdateLabelText() 'Update Label.Text
        End Set
        End Property

        Private _show As Boolean = True 'If True, the probability label is shown.

    Public Sub New()
        Label.Settings = Settings
    End Sub

    Property Show As Boolean
        Get
            Return _show
        End Get
        Set(value As Boolean)
            _show = value
        End Set
    End Property

    'This property is now accessed from Settings.Scaling
    'Private _scaling As String = "Unscaled" 'The scaling used to display the Bayes model (Unscaled, ScaleA, ScaleB, ScaleAB)
    ''Unscaled: Diagrammatic figure - not to scale.
    ''ScaleA: The Event A shape area is scaled relative to the Event B shape area.
    ''ScaleB: The Event B shape is scaled relative to the Event A shape area.
    ''ScaleAB: The Event A and Event B shape areas are scaled relative the their probabilities, where the total area of the diagram represents the probability of 1.
    'Overridable Property Scaling As String 'A separate version of Scaling will be used in the SampleCount class. This version will update the .GivenA, .GivenNotA, .GivenB and .GivenNotB copies of the Scaling property. 
    '    Get
    '        Return _scaling
    '    End Get
    '    Set(value As String)
    '        _scaling = value
    '        Label.Scaling = _scaling 'Propagate the updated scaling property to the Label.
    '    End Set
    'End Property

#Region " Methods - Methods used in this class." '=============================================================================================================================================

    Public Sub UpdateLabelText()
        'Update the label text.
        'This is required when the Prefix, Value, Measure or Format is changed.
        'Label.Unscaled.Text = Prefix & Format(Value, CountFormat)
        'Label.ScaleA.Text = Label.Unscaled.Text
        'Label.ScaleB.Text = Label.Unscaled.Text
        'Label.ScaleAB.Text = Label.Unscaled.Text
        'Label.Text = Prefix & Format(Value, CountFormat)
        Label.Text = Prefix & Format(Value, Settings.SamplesFormat)
    End Sub

#End Region 'Methods --------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#Region " Events - Events raised by this class." '=============================================================================================================================================
    'Event ValueChanged(ByVal Value As Double) 'Send the changed Sample Count in the ValueChanged event.
    Event DefinedValueChanged(ByVal Value As Double) 'Send the changed Sample Count in the DefinedValueChanged event.
#End Region 'Events ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

End Class 'clsSampleCount

Public Class Probability
    'Probability - stores information about the unconditional and conditional probabilities.

    Inherits clsProbability 'Probability without conditions.

    Public WithEvents GivenA As New clsProbability    'Conditional probability: Event A is True.
    Public WithEvents GivenNotA As New clsProbability 'Conditional probability: Event A is False.
    Public WithEvents GivenB As New clsProbability    'Conditional probability: Event B is True.
    Public WithEvents GivenNotB As New clsProbability 'Conditional probability: Event B is False.

    ReadOnly Property ConditionalText As String 'The Text label that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        'Property ConditionalText As String 'The Text label that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse) NOTE: Only the ConditionalPrefix can be written as well as read!!!
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    Return Label.Text
                Case "EventATrue"
                    Return GivenA.Label.Text
                Case "EventAFalse"
                    Return GivenNotA.Label.Text
                Case "EventBTrue"
                    Return GivenB.Label.Text
                Case "EventBFalse"
                    Return GivenNotB.Label.Text
                Case Else
                    'UNKNOWN CONDITION!
                    Return Label.Text
            End Select
        End Get
        'Set(value As String)
        '    Select Case Settings.Condition
        '        Case "None"
        '            Label.Text = value
        '        Case "EventATrue"
        '            GivenA.Label.Text = value
        '        Case "EventAFalse"
        '            GivenNotA.Label.Text = value
        '        Case "EventBTrue"
        '            GivenB.Label.Text = value
        '        Case "EventBFalse"
        '            GivenNotB.Label.Text = value
        '        Case Else
        '            'UNKNOWN CONDITION!
        '            Label.Text = value
        '    End Select
        'End Set
    End Property

    'ReadOnly Property ConditionalPrefix As String 'The Text label that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalPrefix As String 'The Text label that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    Return Prefix
                Case "EventATrue"
                    Return GivenA.Prefix
                Case "EventAFalse"
                    Return GivenNotA.Prefix
                Case "EventBTrue"
                    Return GivenB.Prefix
                Case "EventBFalse"
                    Return GivenNotB.Prefix
                Case Else
                    'UNKNOWN CONDITION!
                    Return Prefix
            End Select
        End Get
        Set(value As String)
            Select Case Settings.Condition
                Case "None"
                    Prefix = value
                Case "EventATrue"
                    GivenA.Prefix = value
                Case "EventAFalse"
                    GivenNotA.Prefix = value
                Case "EventBTrue"
                    GivenB.Prefix = value
                Case "EventBFalse"
                    GivenNotB.Prefix = value
                Case Else
                    'UNKNOWN CONDITION!
                    Prefix = value
            End Select
        End Set
    End Property

    ReadOnly Property ConditionalFormattedValue As String 'The Formatted Value that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    Return FormattedValue
                Case "EventATrue"
                    Return GivenA.FormattedValue
                Case "EventAFalse"
                    Return GivenNotA.FormattedValue
                Case "EventBTrue"
                    Return GivenB.FormattedValue
                Case "EventBFalse"
                    Return GivenNotB.FormattedValue
                Case Else
                    'UNKNOWN CONDITION!
                    Return FormattedValue
            End Select
        End Get
    End Property

    'ReadOnly Property ConditionalX As Integer 'The Text label X position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalX As Integer 'The Text label X position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            Select Case Settings.Condition
                Case "None"
                    Return Label.X
                Case "EventATrue"
                    Return GivenA.Label.X
                Case "EventAFalse"
                    Return GivenNotA.Label.X
                Case "EventBTrue"
                    Return GivenB.Label.X
                Case "EventBFalse"
                    Return GivenNotB.Label.X
                Case Else
                    'UNKNOWN CONDITION!
                    Return Label.X
            End Select
        End Get
        Set(value As Integer)
            Select Case Settings.Condition
                Case "None"
                    Label.X = value
                Case "EventATrue"
                    GivenA.Label.X = value
                Case "EventAFalse"
                    GivenNotA.Label.X = value
                Case "EventBTrue"
                    GivenB.Label.X = value
                Case "EventBFalse"
                    GivenNotB.Label.X = value
                Case Else
                    'UNKNOWN CONDITION!
                    Label.X = value
            End Select
        End Set
    End Property

    'ReadOnly Property ConditionalMidX As Integer 'The Text label MidX position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalMidX As Integer 'The Text label MidX position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            Select Case Settings.Condition
                Case "None"
                    Return Label.MidX
                Case "EventATrue"
                    Return GivenA.Label.MidX
                Case "EventAFalse"
                    Return GivenNotA.Label.MidX
                Case "EventBTrue"
                    Return GivenB.Label.MidX
                Case "EventBFalse"
                    Return GivenNotB.Label.MidX
                Case Else
                    'UNKNOWN CONDITION!
                    Return Label.MidX
            End Select
        End Get
        Set(value As Integer)
            Select Case Settings.Condition
                Case "None"
                    Label.MidX = value
                Case "EventATrue"
                    GivenA.Label.MidX = value
                Case "EventAFalse"
                    GivenNotA.Label.MidX = value
                Case "EventBTrue"
                    GivenB.Label.MidX = value
                Case "EventBFalse"
                    GivenNotB.Label.MidX = value
                Case Else
                    'UNKNOWN CONDITION!
                    Label.MidX = value
            End Select
        End Set
    End Property

    'ReadOnly Property ConditionalEndX As Integer 'The Text label EndX position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalEndX As Integer 'The Text label EndX position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            Select Case Settings.Condition
                Case "None"
                    Return Label.EndX
                Case "EventATrue"
                    Return GivenA.Label.EndX
                Case "EventAFalse"
                    Return GivenNotA.Label.EndX
                Case "EventBTrue"
                    Return GivenB.Label.EndX
                Case "EventBFalse"
                    Return GivenNotB.Label.EndX
                Case Else
                    'UNKNOWN CONDITION!
                    Return Label.EndX
            End Select
        End Get
        Set(value As Integer)
            Select Case Settings.Condition
                Case "None"
                    Label.EndX = value
                Case "EventATrue"
                    GivenA.Label.EndX = value
                Case "EventAFalse"
                    GivenNotA.Label.EndX = value
                Case "EventBTrue"
                    GivenB.Label.EndX = value
                Case "EventBFalse"
                    GivenNotB.Label.EndX = value
                Case Else
                    'UNKNOWN CONDITION!
                    Label.EndX = value
            End Select
        End Set
    End Property

    'ReadOnly Property ConditionalY As Integer 'The Text label Y position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalY As Integer 'The Text label Y position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    Return Label.Y
                Case "EventATrue"
                    Return GivenA.Label.Y
                Case "EventAFalse"
                    Return GivenNotA.Label.Y
                Case "EventBTrue"
                    Return GivenB.Label.Y
                Case "EventBFalse"
                    Return GivenNotB.Label.Y
                Case Else
                    'UNKNOWN CONDITION!
                    Return Label.Y
            End Select
        End Get
        Set(value As Integer)
            Select Case Settings.Condition
                Case "None"
                    Label.Y = value
                Case "EventATrue"
                    GivenA.Label.Y = value
                Case "EventAFalse"
                    GivenNotA.Label.Y = value
                Case "EventBTrue"
                    GivenB.Label.Y = value
                Case "EventBFalse"
                    GivenNotB.Label.Y = value
                Case Else
                    'UNKNOWN CONDITION!
                    Label.Y = value
            End Select
        End Set
    End Property

    'ReadOnly Property ConditionalMidY As Integer 'The Text label MidY position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalMidY As Integer 'The Text label MidY position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    Return Label.MidY
                Case "EventATrue"
                    Return GivenA.Label.MidY
                Case "EventAFalse"
                    Return GivenNotA.Label.MidY
                Case "EventBTrue"
                    Return GivenB.Label.MidY
                Case "EventBFalse"
                    Return GivenNotB.Label.MidY
                Case Else
                    'UNKNOWN CONDITION!
                    Return Label.MidY
            End Select
        End Get
        Set(value As Integer)
            Select Case Settings.Condition
                Case "None"
                    Label.MidY = value
                Case "EventATrue"
                    GivenA.Label.MidY = value
                Case "EventAFalse"
                    GivenNotA.Label.MidY = value
                Case "EventBTrue"
                    GivenB.Label.MidY = value
                Case "EventBFalse"
                    GivenNotB.Label.MidY = value
                Case Else
                    'UNKNOWN CONDITION!
                    Label.MidY = value
            End Select
        End Set
    End Property

    'ReadOnly Property ConditionalBaseY As Integer 'The Text label BaseY position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalBaseY As Integer 'The Text label BaseY position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    Return Label.BaseY
                Case "EventATrue"
                    Return GivenA.Label.BaseY
                Case "EventAFalse"
                    Return GivenNotA.Label.BaseY
                Case "EventBTrue"
                    Return GivenB.Label.BaseY
                Case "EventBFalse"
                    Return GivenNotB.Label.BaseY
                Case Else
                    'UNKNOWN CONDITION!
                    Return Label.BaseY
            End Select
        End Get
        Set(value As Integer)
            Select Case Settings.Condition
                Case "None"
                    Label.BaseY = value
                Case "EventATrue"
                    GivenA.Label.BaseY = value
                Case "EventAFalse"
                    GivenNotA.Label.BaseY = value
                Case "EventBTrue"
                    GivenB.Label.BaseY = value
                Case "EventBFalse"
                    GivenNotB.Label.BaseY = value
                Case Else
                    'UNKNOWN CONDITION!
                    Label.BaseY = value
            End Select
        End Set
    End Property

    Public Sub ShowAll()
        'Set the Slow flag to True for all Probabilities
        Show = True
        GivenA.Show = True
        GivenNotA.Show = True
        GivenB.Show = True
        GivenNotB.Show = True
    End Sub

    Private Sub GivenA_DefinedValueChanged(Value As Double) Handles GivenA.DefinedValueChanged
        RaiseEvent GivenADefinedValueChanged(Value)
    End Sub

    Private Sub GivenNotA_DefinedValueChanged(Value As Double) Handles GivenNotA.DefinedValueChanged
        RaiseEvent GivenNotADefinedValueChanged(Value)
    End Sub

    Private Sub GivenB_DefinedValueChanged(Value As Double) Handles GivenB.DefinedValueChanged
        RaiseEvent GivenBDefinedValueChanged(Value)
    End Sub

    Private Sub GivenNotB_DefinedValueChanged(Value As Double) Handles GivenNotB.DefinedValueChanged
        RaiseEvent GivenNotBDefinedValueChanged(Value)
    End Sub

    Public Sub UpdateLabels()
        'Update the label text for the different version of the value: unconditional, GivenA, GivenNotA, GivenB and GivenNotB.
        UpdateLabelText()
        GivenA.UpdateLabelText()
        GivenNotA.UpdateLabelText()
        GivenB.UpdateLabelText()
        GivenNotB.UpdateLabelText()
    End Sub

    Public Sub ApplySettings()
        GivenA.Settings = Settings
        GivenNotA.Settings = Settings
        GivenB.Settings = Settings
        GivenNotB.Settings = Settings

        Label.Settings = Settings
        GivenA.Label.Settings = Settings
        GivenNotA.Label.Settings = Settings
        GivenB.Label.Settings = Settings
        GivenNotB.Label.Settings = Settings
    End Sub

#Region " Events - Events raised by this class." '=============================================================================================================================================

    Event GivenADefinedValueChanged(ByVal Value As Double) 'Send the changed Given A probability value.
    Event GivenNotADefinedValueChanged(ByVal Value As Double) 'Send the changed Given NotA probability value.
    Event GivenBDefinedValueChanged(ByVal Value As Double) 'Send the changed Given B probability value.
    Event GivenNotBDefinedValueChanged(ByVal Value As Double) 'Send the changed Given Not B probability value.

#End Region 'Events ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

End Class 'Probability

'Public Class ConditionalSampleCount
Public Class SampleCount
    'Conditional Sample Count - stores information about sample counts with different conditions.
    Inherits clsSampleCount                'Sample Count without conditions.

    'Public Bayes As Object 'This provides a reference to the parent clsBayes class. This reference is used to access Bayes.ProbabilityMeasure, Bayes.DecimalFormat and Bayes.PercentFormat.
    'Public Settings As clsSettings 'This will point to clsBayes.Settings 'NOTE: This is inherited from clsSampleCount

    'NOTE: This property is now accessed using Settings.Scaling
    'Private _scaling As String = "Unscaled" 'The scaling used to display the Bayes model (Unscaled, ScaleA, ScaleB, ScaleAB)
    ''Unscaled: Diagrammatic figure - not to scale.
    ''ScaleA: The Event A shape area is scaled relative to the Event B shape area.
    ''ScaleB: The Event B shape is scaled relative to the Event A shape area.
    ''ScaleAB: The Event A and Event B shape areas are scaled relative the their probabilities, where the total area of the diagram represents the probability of 1.
    'Overrides Property Scaling As String 'This version of the Scaling property updates the .GivenA, .GivenNotA, .GivenB and .GivenNotB copies of the Scaling property. 
    '    Get
    '        Return _scaling
    '    End Get
    '    Set(value As String)
    '        _scaling = value
    '        Label.Scaling = _scaling 'Propagate the updated scaling property to the Label.
    '        'Update the conditional SampleCount versions:
    '        GivenA.Scaling = _scaling
    '        GivenNotA.Scaling = _scaling
    '        GivenB.Scaling = _scaling
    '        GivenNotB.Scaling = _scaling
    '    End Set
    'End Property

    'NOTE: This property is now accessed using Settings.CountFormat
    'Private _countFormat As String = "" 'A number format string used to display the Sample Count.
    'Overrides Property CountFormat As String
    '    Get
    '        Return _countFormat
    '    End Get
    '    Set(value As String)
    '        _countFormat = value
    '        'Add code to update the Label.Text when Measure is changed.
    '        UpdateLabelText() 'Update Label.Text
    '        'Update the conditional SampleCount versions:
    '        GivenA.CountFormat = _countFormat
    '        GivenNotA.CountFormat = _countFormat
    '        GivenB.CountFormat = _countFormat
    '        GivenNotB.CountFormat = _countFormat
    '    End Set
    'End Property

    'NOTE: This property is now accessed using Settings.Condition
    'Private _condition As String = "None" 'Condition used to display Probability Diagram catagories. (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    'Property Condition As String
    '    Get
    '        Return _condition
    '    End Get
    '    Set(value As String)
    '        _condition = value
    '    End Set
    'End Property

    Public WithEvents GivenA As New clsSampleCount    'Conditional Sample Count: Event A is True.
    Public WithEvents GivenNotA As New clsSampleCount 'Conditional Sample Count: Event A is False.
    Public WithEvents GivenB As New clsSampleCount    'Conditional Sample Count: Event B is True.
    Public WithEvents GivenNotB As New clsSampleCount 'Conditional Sample Count: Event B is False.

    Public Sub New()

        'Me.Settings = Settings

        'GivenA.Settings = Me.Settings
        'GivenNotA.Settings = Me.Settings
        'GivenB.Settings = Me.Settings
        'GivenNotB.Settings = Me.Settings

    End Sub



    'ReadOnly Property ConditionalText As String 'The Text label that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalText As String 'The Text label that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    'Debug.Print("SampleCount: ReadOnly Property ConditionalText - Case None")
                    'Debug.Print("Condition = " & Settings.Condition)
                    'Debug.Print("Label.Text = " & Label.Text)
                    'Debug.Print("GivenA.Label.Text = " & GivenA.Label.Text)
                    'Debug.Print("GivenNotA.Label.Text = " & GivenNotA.Label.Text)
                    'Debug.Print("GivenB.Label.Text = " & GivenB.Label.Text)
                    'Debug.Print("GivenNotB.Label.Text = " & GivenNotB.Label.Text)

                    Return Label.Text
                Case "EventATrue"
                    Return GivenA.Label.Text
                Case "EventAFalse"
                    Return GivenNotA.Label.Text
                Case "EventBTrue"
                    Return GivenB.Label.Text
                Case "EventBFalse"
                    Return GivenNotB.Label.Text
                Case Else

            End Select
        End Get
        Set(value As String)
            Select Case Settings.Condition
                Case "None"
                    Label.Text = value
                Case "EventATrue"
                    GivenA.Label.Text = value
                Case "EventAFalse"
                    GivenNotA.Label.Text = value
                Case "EventBTrue"
                    GivenB.Label.Text = value
                Case "EventBFalse"
                    GivenNotB.Label.Text = value
                Case Else

            End Select
        End Set
    End Property

    'ReadOnly Property ConditionalPrefix As String 'The label Prefix that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalPrefix As String 'The label Prefix that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    'Debug.Print("SampleCount: ReadOnly Property ConditionalText - Case None")
                    'Debug.Print("Condition = " & Settings.Condition)
                    'Debug.Print("Label.Text = " & Label.Text)
                    'Debug.Print("GivenA.Label.Text = " & GivenA.Label.Text)
                    'Debug.Print("GivenNotA.Label.Text = " & GivenNotA.Label.Text)
                    'Debug.Print("GivenB.Label.Text = " & GivenB.Label.Text)
                    'Debug.Print("GivenNotB.Label.Text = " & GivenNotB.Label.Text)

                    Return Prefix
                Case "EventATrue"
                    Return GivenA.Prefix
                Case "EventAFalse"
                    Return GivenNotA.Prefix
                Case "EventBTrue"
                    Return GivenB.Prefix
                Case "EventBFalse"
                    Return GivenNotB.Prefix
                Case Else

            End Select
        End Get
        Set(value As String)
            Select Case Settings.Condition
                Case "None"
                    Prefix = value
                Case "EventATrue"
                    GivenA.Prefix = value
                Case "EventAFalse"
                    GivenNotA.Prefix = value
                Case "EventBTrue"
                    GivenB.Prefix = value
                Case "EventBFalse"
                    GivenNotB.Prefix = value
                Case Else

            End Select
        End Set
    End Property

    ReadOnly Property ConditionalFormattedValue As String 'The Formatted Value that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    'Debug.Print("SampleCount: ReadOnly Property ConditionalText - Case None")
                    'Debug.Print("Condition = " & Settings.Condition)
                    'Debug.Print("Label.Text = " & Label.Text)
                    'Debug.Print("GivenA.Label.Text = " & GivenA.Label.Text)
                    'Debug.Print("GivenNotA.Label.Text = " & GivenNotA.Label.Text)
                    'Debug.Print("GivenB.Label.Text = " & GivenB.Label.Text)
                    'Debug.Print("GivenNotB.Label.Text = " & GivenNotB.Label.Text)

                    Return FormattedValue
                Case "EventATrue"
                    Return GivenA.FormattedValue
                Case "EventAFalse"
                    Return GivenNotA.FormattedValue
                Case "EventBTrue"
                    Return GivenB.FormattedValue
                Case "EventBFalse"
                    Return GivenNotB.FormattedValue
                Case Else

            End Select
        End Get
    End Property

    'ReadOnly Property ConditionalX As Integer 'The Text label X position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalX As Integer 'The Text label X position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    Return Label.X
                Case "EventATrue"
                    Return GivenA.Label.X
                Case "EventAFalse"
                    Return GivenNotA.Label.X
                Case "EventBTrue"
                    Return GivenB.Label.X
                Case "EventBFalse"
                    Return GivenNotB.Label.X
                Case Else

            End Select
        End Get
        Set(value As Integer)
            Select Case Settings.Condition
                Case "None"
                    Label.X = value
                Case "EventATrue"
                    GivenA.Label.X = value
                Case "EventAFalse"
                    GivenNotA.Label.X = value
                Case "EventBTrue"
                    GivenB.Label.X = value
                Case "EventBFalse"
                    GivenNotB.Label.X = value
                Case Else

            End Select
        End Set
    End Property

    'ReadOnly Property ConditionalMidX As Integer 'The Text label MidX position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalMidX As Integer 'The Text label MidX position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    Return Label.MidX
                Case "EventATrue"
                    Return GivenA.Label.MidX
                Case "EventAFalse"
                    Return GivenNotA.Label.MidX
                Case "EventBTrue"
                    Return GivenB.Label.MidX
                Case "EventBFalse"
                    Return GivenNotB.Label.MidX
                Case Else

            End Select
        End Get
        Set(value As Integer)
            Select Case Settings.Condition
                Case "None"
                    Label.MidX = value
                Case "EventATrue"
                    GivenA.Label.MidX = value
                Case "EventAFalse"
                    GivenNotA.Label.MidX = value
                Case "EventBTrue"
                    GivenB.Label.MidX = value
                Case "EventBFalse"
                    GivenNotB.Label.MidX = value
                Case Else

            End Select
        End Set
    End Property

    'ReadOnly Property ConditionalEndX As Integer 'The Text label EndX position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalEndX As Integer 'The Text label EndX position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    Return Label.EndX
                Case "EventATrue"
                    Return GivenA.Label.EndX
                Case "EventAFalse"
                    Return GivenNotA.Label.EndX
                Case "EventBTrue"
                    Return GivenB.Label.EndX
                Case "EventBFalse"
                    Return GivenNotB.Label.EndX
                Case Else

            End Select
        End Get
        Set(value As Integer)
            Select Case Settings.Condition
                Case "None"
                    Label.EndX = value
                Case "EventATrue"
                    GivenA.Label.EndX = value
                Case "EventAFalse"
                    GivenNotA.Label.EndX = value
                Case "EventBTrue"
                    GivenB.Label.EndX = value
                Case "EventBFalse"
                    GivenNotB.Label.EndX = value
                Case Else

            End Select
        End Set
    End Property

    'ReadOnly Property ConditionalY As Integer 'The Text label Y position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalY As Integer 'The Text label Y position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    Return Label.Y
                Case "EventATrue"
                    Return GivenA.Label.Y
                Case "EventAFalse"
                    Return GivenNotA.Label.Y
                Case "EventBTrue"
                    Return GivenB.Label.Y
                Case "EventBFalse"
                    Return GivenNotB.Label.Y
                Case Else

            End Select
        End Get
        Set(value As Integer)
            Select Case Settings.Condition
                Case "None"
                    Label.Y = value
                Case "EventATrue"
                    GivenA.Label.Y = value
                Case "EventAFalse"
                    GivenNotA.Label.Y = value
                Case "EventBTrue"
                    GivenB.Label.Y = value
                Case "EventBFalse"
                    GivenNotB.Label.Y = value
                Case Else

            End Select
        End Set
    End Property

    'ReadOnly Property ConditionalMidY As Integer 'The Text label MidY position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalMidY As Integer 'The Text label MidY position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    Return Label.MidY
                Case "EventATrue"
                    Return GivenA.Label.MidY
                Case "EventAFalse"
                    Return GivenNotA.Label.MidY
                Case "EventBTrue"
                    Return GivenB.Label.MidY
                Case "EventBFalse"
                    Return GivenNotB.Label.MidY
                Case Else

            End Select
        End Get
        Set(value As Integer)
            Select Case Settings.Condition
                Case "None"
                    Label.MidY = value
                Case "EventATrue"
                    GivenA.Label.MidY = value
                Case "EventAFalse"
                    GivenNotA.Label.MidY = value
                Case "EventBTrue"
                    GivenB.Label.MidY = value
                Case "EventBFalse"
                    GivenNotB.Label.MidY = value
                Case Else

            End Select
        End Set
    End Property

    'ReadOnly Property ConditionalBaseY As Integer 'The Text label BaseY position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property ConditionalBaseY As Integer 'The Text label BaseY position that matches the probability condition (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
        Get
            'Select Case Condition
            Select Case Settings.Condition
                Case "None"
                    Return Label.BaseY
                Case "EventATrue"
                    Return GivenA.Label.BaseY
                Case "EventAFalse"
                    Return GivenNotA.Label.BaseY
                Case "EventBTrue"
                    Return GivenB.Label.BaseY
                Case "EventBFalse"
                    Return GivenNotB.Label.BaseY
                Case Else

            End Select
        End Get
        Set(value As Integer)
            Select Case Settings.Condition
                Case "None"
                    Label.BaseY = value
                Case "EventATrue"
                    GivenA.Label.BaseY = value
                Case "EventAFalse"
                    GivenNotA.Label.BaseY = value
                Case "EventBTrue"
                    GivenB.Label.BaseY = value
                Case "EventBFalse"
                    GivenNotB.Label.BaseY = value
                Case Else

            End Select
        End Set
    End Property

    Public Sub ShowAll()
        'Set the Slow flag to True for all Sample Counts
        Show = True
        GivenA.Show = True
        GivenNotA.Show = True
        GivenB.Show = True
        GivenNotB.Show = True
    End Sub

    'Private Sub GivenA_ValueChanged(Value As Double) Handles GivenA.ValueChanged
    Private Sub GivenA_DefinedValueChanged(Value As Double) Handles GivenA.DefinedValueChanged
        'RaiseEvent GivenAValueChanged(Value)
        RaiseEvent GivenADefinedValueChanged(Value)
    End Sub

    Private Sub GivenNotA_DefinedValueChanged(Value As Double) Handles GivenNotA.DefinedValueChanged
        RaiseEvent GivenNotADefinedValueChanged(Value)
    End Sub

    Private Sub GivenB_DefinedValueChanged(Value As Double) Handles GivenB.DefinedValueChanged
        RaiseEvent GivenBDefinedValueChanged(Value)
    End Sub

    Private Sub GivenNotB_DefinedValueChanged(Value As Double) Handles GivenNotB.DefinedValueChanged
        RaiseEvent GivenNotBDefinedValueChanged(Value)
    End Sub

    Public Sub UpdateLabels()
        'Update the label text for the different version of the value: unconditional, GivenA, GivenNotA, GivenB and GivenNotB.
        'Me.UpdateLabelText()
        UpdateLabelText()
        GivenA.UpdateLabelText()
        GivenNotA.UpdateLabelText()
        GivenB.UpdateLabelText()
        GivenNotB.UpdateLabelText()
    End Sub

    Public Sub ApplySettings()
        GivenA.Settings = Settings
        GivenNotA.Settings = Settings
        GivenB.Settings = Settings
        GivenNotB.Settings = Settings

        Label.Settings = Settings
        GivenA.Label.Settings = Settings
        GivenNotA.Label.Settings = Settings
        GivenB.Label.Settings = Settings
        GivenNotB.Label.Settings = Settings
    End Sub


#Region " Events - Events raised by this class." '=============================================================================================================================================
    'Event UnconditionalValueChanged(ByVal Value As Double) 'Send the changed sample count value.

    'Event GivenAValueChanged(ByVal Value As Double) 'Send the changed Given A sample count value.
    'Event GivenNotAValueChanged(ByVal Value As Double) 'Send the changed Given NotA sample count value.
    'Event GivenBValueChanged(ByVal Value As Double) 'Send the changed Given B sample count value.
    'Event GivenNotBValueChanged(ByVal Value As Double) 'Send the changed Given Not B sample count value.

    Event GivenADefinedValueChanged(ByVal Value As Double) 'Send the changed Given A sample count value.
    Event GivenNotADefinedValueChanged(ByVal Value As Double) 'Send the changed Given NotA sample count value.
    Event GivenBDefinedValueChanged(ByVal Value As Double) 'Send the changed Given B sample count value.
    Event GivenNotBDefinedValueChanged(ByVal Value As Double) 'Send the changed Given Not B sample count value.
#End Region 'Events ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

End Class 'SampleCount

Public Class ConditionLabel
    'Condition Label class - stores the condition label settings.

    Private _text As String = "" 'The condition label text.
    Property Text As String
        Get
            Return _text
        End Get
        Set(value As String)
            _text = value
            UpdateLabelPosition()
        End Set
    End Property

    Private _prefix As String = "Condition: " 'The condition label prefix.
    Property Prefix As String
        Get
            Return _prefix
        End Get
        Set(value As String)
            _prefix = value
        End Set
    End Property

    Private _font As Font = New Font("Arial", 11, FontStyle.Bold) 'The condition label font.
    Property Font As Font
        Get
            Return _font
        End Get
        Set(value As Font)
            _font = value
            UpdateLabelPosition()
        End Set
    End Property

    'Private _color As Color = Color.Black 'The condition label color.
    'Property Color As Color
    '    Get
    '        Return _color
    '    End Get
    '    Set(value As Color)
    '        _color = value
    '    End Set
    'End Property

    Private _xPositionReference As String = "Start" 'The position reference used to specify the label X position. (Start, Mid or End)
    Property XPositionReference As String
        Get
            Return _xPositionReference
        End Get
        Set(value As String)
            _xPositionReference = value
        End Set
    End Property

    Private _yPositionReference As String = "Top" 'The position reference used to specify the label Y position. (Top, Mid or Base)
    Property YPositionReference As String
        Get
            Return _yPositionReference
        End Get
        Set(value As String)
            _yPositionReference = value
        End Set
    End Property

    Private _x As Integer = 10 'The X pixel position of the start of the label text. 'Graphics.DrawString - X, Y is the upper-left corner of the drawn text.
    Property X As Integer
        Get
            Return _x
        End Get
        Set(value As Integer)
            _x = value
            _xPositionReference = "Start"
        End Set
    End Property

    Private _y As Integer = 10 'The Y pixel position of the top of the label text. 'Graphics.DrawString - X, Y is the upper-left corner of the drawn text.
    Property Y As Integer
        Get
            Return _y
        End Get
        Set(value As Integer)
            _y = value
            _yPositionReference = "Top"
        End Set
    End Property

    Private _midX As Integer = 10 'The X pixel position of the middle of the label text.
    Property MidX As Integer
        Get
            Return _midX
        End Get
        Set(value As Integer)
            _midX = value
            'Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
            Dim TextWidth As Integer = TextRenderer.MeasureText(Prefix & Text, Font).Width
            _x = _midX - TextWidth / 2
            _xPositionReference = "Mid"
        End Set
    End Property

    Private _midY As Integer = 10 'The Y pixel position of the middle of the label text.
    Property MidY As Integer
        Get
            Return _midY
        End Get
        Set(value As Integer)
            _midY = value
            'Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
            Dim TextHeight As Integer = TextRenderer.MeasureText(Prefix & Text, Font).Height
            _y = _midY - TextHeight / 2
            _yPositionReference = "Mid"
        End Set
    End Property

    Private _endX As Integer = 10 'The X pixel position of the end of the label text.
    Property EndX As Integer
        Get
            Return _endX
        End Get
        Set(value As Integer)
            _endX = value
            'Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
            Dim TextWidth As Integer = TextRenderer.MeasureText(Prefix & Text, Font).Width
            _x = _endX - TextWidth
            _xPositionReference = "End"
        End Set
    End Property

    Private _baseY As Integer = 10 'The Y pixel position of the base of the label text.
    Property BaseY As Integer
        Get
            Return _baseY
        End Get
        Set(value As Integer)
            _baseY = value
            'Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
            Dim TextHeight As Integer = TextRenderer.MeasureText(Prefix & Text, Font).Height
            _y = _baseY - TextHeight
            _yPositionReference = "Base"
        End Set
    End Property

    Private Sub UpdateLabelPosition()
        'Update the label position.
        'This is required if the Label text or Font is changed.
        If _xPositionReference = "Top" Then
            'The X position remains unchanged.
        ElseIf _xPositionReference = "Mid" Then
            'Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
            Dim TextWidth As Integer = TextRenderer.MeasureText(Prefix & Text, Font).Width
            _x = _midX - TextWidth / 2  'Update the X position as the string width may have changed.
        ElseIf _xPositionReference = "End" Then
            'Dim TextWidth As Integer = TextRenderer.MeasureText(Text, Font).Width
            Dim TextWidth As Integer = TextRenderer.MeasureText(Prefix & Text, Font).Width
            _x = _endX - TextWidth 'Update the X position as the string width may have changed.
        Else
            'Unknown _xPositionReference
            RaiseEvent ErrorMessage("Label.UpdateLabelPosition: Unknown XPositionReference: " & _xPositionReference & vbCrLf)
        End If

        If _yPositionReference = "Top" Then
            'The Y position remains unchanged.
        ElseIf _yPositionReference = "Mid" Then
            'Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
            Dim TextHeight As Integer = TextRenderer.MeasureText(Prefix & Text, Font).Height
            _y = _midY - TextHeight / 2 'Update the Y position as the string height may have changed.
        ElseIf _yPositionReference = "Base" Then
            'Dim TextHeight As Integer = TextRenderer.MeasureText(Text, Font).Height
            Dim TextHeight As Integer = TextRenderer.MeasureText(Prefix & Text, Font).Height
            _y = _baseY - TextHeight 'Update the Y position as the string height may have changed.
        Else
            'Unknown _yPositionReference
            RaiseEvent ErrorMessage("Label.UpdateLabelPosition: Unknown YPositionReference: " & _yPositionReference & vbCrLf)
        End If
    End Sub

#Region " Events - Events raised by this class." '=============================================================================================================================================
    Event ErrorMessage(ByVal Msg As String) 'Send an error message.
#End Region 'Events ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

End Class 'ConditionLabel

Public Class clsAnnotCondition
    'Class used to store the different types of probability Condition label.

    'Inherits clsLabel 'No condition label
    'Public GivenA As New clsLabel    'Condition label: Event A is True.
    'Public GivenNotA As New clsLabel 'Condition label: Event A is False.
    'Public GivenB As New clsLabel    'Condition label: Event B is True.
    'Public GivenNotB As New clsLabel 'Condition label: Event B is False.

    Public WithEvents None As New ConditionLabel
    Public WithEvents EventATrue As New ConditionLabel
    Public WithEvents EventAFalse As New ConditionLabel
    Public WithEvents EventBTrue As New ConditionLabel
    Public WithEvents EventBFalse As New ConditionLabel

    Private _condition As String = "None" 'Condition used to display Probability Diagram catagories. (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property Condition As String
        Get
            Return _condition
        End Get
        Set(value As String)
            _condition = value
        End Set
    End Property

    Private _show As Boolean = True 'The Show flag. If True, the label is shown.
    Property Show As Boolean
        Get
            Return _show
        End Get
        Set(value As Boolean)
            _show = value
        End Set
    End Property

    Private _prefix As String = "Condition: " 'The condition label prefix.
    Property Prefix As String
        Get
            Return _prefix
        End Get
        Set(value As String)
            _prefix = value
            None.Prefix = _prefix
            EventATrue.Prefix = _prefix
            EventAFalse.Prefix = _prefix
            EventBTrue.Prefix = _prefix
            EventBFalse.Prefix = _prefix
        End Set
    End Property

    'Private _text As String = "" 'The condition label text.
    Property Text As String
        Get
            'Return _text
            Select Case Condition
                Case "None"
                    'Return None.Text
                    Return Prefix & None.Text
                Case "EventATrue"
                    'Return EventATrue.Text
                    Return Prefix & EventATrue.Text
                Case "EventAFalse"
                    'Return EventAFalse.Text
                    Return Prefix & EventAFalse.Text
                Case "EventBTrue"
                    'Return EventBTrue.Text
                    Return Prefix & EventBTrue.Text
                Case "EventBFalse"
                    'Return EventBFalse.Text
                    Return Prefix & EventBFalse.Text
                Case Else
                    'Return None.Text
                    Return Prefix & None.Text
                    RaiseEvent ErrorMessage("Get AnnotCondition.Text: Unknown condition: " & Condition & vbCrLf)
                    'Unknown Condition.
            End Select
        End Get
        Set(value As String)
            '_text = value
            Select Case Condition
                Case "None"
                    None.Text = value
                Case "EventATrue"
                    EventATrue.Text = value
                Case "EventAFalse"
                    EventAFalse.Text = value
                Case "EventBTrue"
                    EventBTrue.Text = value
                Case "EventBFalse"
                    EventBFalse.Text = value
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Set AnnotCondition.Text: Unknown condition: " & Condition & vbCrLf)
            End Select
        End Set
    End Property

    Private _font As Font = New Font("Arial", 11, FontStyle.Bold) 'The condition label font.
    Property Font As Font
        Get
            Return _font
        End Get
        Set(value As Font)
            _font = value
            'Update the font for all the Condition labels:
            None.Font = Font
            EventATrue.Font = Font
            EventAFalse.Font = Font
            EventBTrue.Font = Font
            EventBFalse.Font = Font
        End Set
    End Property

    Private _color As Color = Color.Black 'The condition label color.

    Property Color As Color
        Get
            Return _color
        End Get
        Set(value As Color)
            _color = value
        End Set
    End Property

    'Private _x As Integer = 10 'The X pixel position of the start of the label text. 'Graphics.DrawString - X, Y is the upper-left corner of the drawn text.
    Property X As Integer
        Get
            'Return _x
            Select Case Condition
                Case "None"
                    Return None.X
                Case "EventATrue"
                    Return EventATrue.X
                Case "EventAFalse"
                    Return EventAFalse.X
                Case "EventBTrue"
                    Return EventBTrue.X
                Case "EventBFalse"
                    Return EventBFalse.X
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Get AnnotCondition.Y: Unknown condition: " & Condition & vbCrLf)
                    Return None.X
            End Select
        End Get
        Set(value As Integer)
            '_x = value
            Select Case Condition
                Case "None"
                    None.X = value
                Case "EventATrue"
                    EventATrue.X = value
                Case "EventAFalse"
                    EventAFalse.X = value
                Case "EventBTrue"
                    EventBTrue.X = value
                Case "EventBFalse"
                    EventBFalse.X = value
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Set AnnotCondition.Y: Unknown condition: " & Condition & vbCrLf)
            End Select
        End Set
    End Property

    'Private _y As Integer = 10 'The Y pixel position of the top of the label text. 'Graphics.DrawString - X, Y is the upper-left corner of the drawn text.
    Property Y As Integer
        Get
            'Return _y
            Select Case Condition
                Case "None"
                    Return None.Y
                Case "EventATrue"
                    Return EventATrue.Y
                Case "EventAFalse"
                    Return EventAFalse.Y
                Case "EventBTrue"
                    Return EventBTrue.Y
                Case "EventBFalse"
                    Return EventBFalse.Y
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Get AnnotCondition.Y: Unknown condition: " & Condition & vbCrLf)
                    Return None.Y
            End Select
        End Get
        Set(value As Integer)
            '_y = value
            Select Case Condition
                Case "None"
                    None.Y = value
                Case "EventATrue"
                    EventATrue.Y = value
                Case "EventAFalse"
                    EventAFalse.Y = value
                Case "EventBTrue"
                    EventBTrue.Y = value
                Case "EventBFalse"
                    EventBFalse.Y = value
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Set AnnotCondition.Y: Unknown condition: " & Condition & vbCrLf)
            End Select
        End Set
    End Property

    'Private _midX As Integer = 10 'The X pixel position of the middle of the label text.
    Property MidX As Integer
        Get
            'Return _midX
            Select Case Condition
                Case "None"
                    Return None.MidX
                Case "EventATrue"
                    Return EventATrue.MidX
                Case "EventAFalse"
                    Return EventAFalse.MidX
                Case "EventBTrue"
                    Return EventBTrue.MidX
                Case "EventBFalse"
                    Return EventBFalse.MidX
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Get AnnotCondition.MidX: Unknown condition: " & Condition & vbCrLf)
                    Return None.MidX
            End Select
        End Get
        Set(value As Integer)
            '_midX = value
            Select Case Condition
                Case "None"
                    None.MidX = value
                Case "EventATrue"
                    EventATrue.MidX = value
                Case "EventAFalse"
                    EventAFalse.MidX = value
                Case "EventBTrue"
                    EventBTrue.MidX = value
                Case "EventBFalse"
                    EventBFalse.MidX = value
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Set AnnotCondition.MidX: Unknown condition: " & Condition & vbCrLf)
            End Select
        End Set
    End Property

    'Private _midY As Integer = 10 'The Y pixel position of the middle of the label text.
    Property MidY As Integer
        Get
            'Return _midY
            Select Case Condition
                Case "None"
                    Return None.MidY
                Case "EventATrue"
                    Return EventATrue.MidY
                Case "EventAFalse"
                    Return EventAFalse.MidY
                Case "EventBTrue"
                    Return EventBTrue.MidY
                Case "EventBFalse"
                    Return EventBFalse.MidY
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Get AnnotCondition.MidY: Unknown condition: " & Condition & vbCrLf)
                    Return None.MidY
            End Select
        End Get
        Set(value As Integer)
            '_midY = value
            Select Case Condition
                Case "None"
                    None.MidY = value
                Case "EventATrue"
                    EventATrue.MidY = value
                Case "EventAFalse"
                    EventAFalse.MidY = value
                Case "EventBTrue"
                    EventBTrue.MidY = value
                Case "EventBFalse"
                    EventBFalse.MidY = value
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Set AnnotCondition.MidY: Unknown condition: " & Condition & vbCrLf)
            End Select
        End Set
    End Property

    'Private _endX As Integer = 10 'The X pixel position of the end of the label text.
    Property EndX As Integer
        Get
            'Return _endX
            Select Case Condition
                Case "None"
                    Return None.EndX
                Case "EventATrue"
                    Return EventATrue.EndX
                Case "EventAFalse"
                    Return EventAFalse.EndX
                Case "EventBTrue"
                    Return EventBTrue.EndX
                Case "EventBFalse"
                    Return EventBFalse.EndX
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Get AnnotCondition.EndX: Unknown condition: " & Condition & vbCrLf)
                    Return None.EndX
            End Select
        End Get
        Set(value As Integer)
            '_endX = value
            Select Case Condition
                Case "None"
                    None.EndX = value
                Case "EventATrue"
                    EventATrue.EndX = value
                Case "EventAFalse"
                    EventAFalse.EndX = value
                Case "EventBTrue"
                    EventBTrue.EndX = value
                Case "EventBFalse"
                    EventBFalse.EndX = value
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Set AnnotCondition.EndX: Unknown condition: " & Condition & vbCrLf)
            End Select
        End Set
    End Property

    'Private _baseY As Integer = 10 'The Y pixel position of the base of the label text.
    Property BaseY As Integer
        Get
            'Return _baseY
            Select Case Condition
                Case "None"
                    Return None.BaseY
                Case "EventATrue"
                    Return EventATrue.BaseY
                Case "EventAFalse"
                    Return EventAFalse.BaseY
                Case "EventBTrue"
                    Return EventBTrue.BaseY
                Case "EventBFalse"
                    Return EventBFalse.BaseY
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Get AnnotCondition.BaseY: Unknown condition: " & Condition & vbCrLf)
                    Return None.BaseY
            End Select
        End Get
        Set(value As Integer)
            '_baseY = value
            Select Case Condition
                Case "None"
                    None.BaseY = value
                Case "EventATrue"
                    EventATrue.BaseY = value
                Case "EventAFalse"
                    EventAFalse.BaseY = value
                Case "EventBTrue"
                    EventBTrue.BaseY = value
                Case "EventBFalse"
                    EventBFalse.BaseY = value
                Case Else
                    'Unknown Condition.
                    RaiseEvent ErrorMessage("Set AnnotCondition.BaseY: Unknown condition: " & Condition & vbCrLf)
            End Select
        End Set
    End Property

    Private Sub None_ErrorMessage(Msg As String) Handles None.ErrorMessage
        RaiseEvent ErrorMessage(Msg)
    End Sub

    Private Sub EventATrue_ErrorMessage(Msg As String) Handles EventATrue.ErrorMessage
        RaiseEvent ErrorMessage(Msg)
    End Sub

    Private Sub EventAFalse_ErrorMessage(Msg As String) Handles EventAFalse.ErrorMessage
        RaiseEvent ErrorMessage(Msg)
    End Sub

    Private Sub EventBTrue_ErrorMessage(Msg As String) Handles EventBTrue.ErrorMessage
        RaiseEvent ErrorMessage(Msg)
    End Sub

    Private Sub EventBFalse_ErrorMessage(Msg As String) Handles EventBFalse.ErrorMessage
        RaiseEvent ErrorMessage(Msg)
    End Sub

#Region " Events - Events raised by this class." '=============================================================================================================================================
    Event ErrorMessage(ByVal Msg As String) 'Send an error message.
#End Region 'Events ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

End Class 'clsAnnotCondition

Public Class EventInfo
    'Information about an Event

    Public Settings As clsSettings 'This will point to Bayes.Settings

    Private _name As String = "Event" 'The name of the Event.
    Property Name As String
        Get
            Return _name
        End Get
        Set(value As String)
            _name = value
            RaiseEvent NameChanged(_name)
            'If AnnotEventA.Text = "" Then AnnotEventA.Text = _eventAName 'If the Annotation Event A Text is blank, use the Event A Name.
        End Set
    End Property

    Private _description As String = "" 'A description of the Event.
    Property Description As String
        Get
            Return _description
        End Get
        Set(value As String)
            _description = value
        End Set
    End Property

    Private _notName As String = "" 'The name assigned to the Not Event. (This is used to label the case where the Event is false.)
    Property NotName As String
        Get
            Return _notName
        End Get
        Set(value As String)
            _notName = value
        End Set
    End Property

    Private _lineColor As Color = Color.Red 'The line color of the Venn diagram shape representing the Event.
    Property LineColor As Color
        Get
            Return _lineColor
        End Get
        Set(value As Color)
            _lineColor = value
        End Set
    End Property


    Private _fillColor As Color = Color.MistyRose 'The fill color of the Venn diagram shape representing Event A.
    Property FillColor As Color
        Get
            Return _fillColor
        End Get
        Set(value As Color)
            _fillColor = value
        End Set
    End Property

    Private _shape As String = "Ellipse" 'The shape of the Venn diagram shape representing the Event. (Ellipse or Rectangle.)
    Property Shape
        Get
            Return _shape
        End Get
        Set(value)
            _shape = value
        End Set
    End Property

    Private _lineThickness As Integer = 4 'The line thickness of the Event shape in pixels.
    Property LineThickness As Integer
        Get
            Return _lineThickness
        End Get
        Set(value As Integer)
            _lineThickness = value
        End Set
    End Property

    Private _boldLineThickness As Integer = 6 'The bold line thickness of the Event shape in pixels.
    Property BoldLineThickness As Integer
        Get
            Return _boldLineThickness
        End Get
        Set(value As Integer)
            _boldLineThickness = value
        End Set
    End Property

    Private _boldLine As Boolean = False 'If True, the Event is drawn with a bold outline.
    Property BoldLine As Boolean
        Get
            Return _boldLine
        End Get
        Set(value As Boolean)
            _boldLine = value
        End Set
    End Property

    'Shape Bounds - stores the shape boundaries for different display scales.
    Public Unscaled As New ShapeBounds 'Used for displaying a shape on an unscaled Bayes diagram.
    Public ScaleA As New ShapeBounds 'Used for displaying a shape on a Bayes diagram with the Event A area scaled in relation to the Event B area (where the areas are proportional to the probabilities).
    Public ScaleB As New ShapeBounds 'Used for displaying a shape on a Bayes diagram with Event B scaled in relation to Event A.
    Public ScaleAB As New ShapeBounds 'Used for displaying a shape on a bayes diagram with Events A and B scaled in relation to all probabilites.

    'NOTE: Scaling is now accessed from Settings
    'Private _scaling As String = "Unscaled" 'The scaling used to display the Bayes model (Unscaled, ScaleA, ScaleB, ScaleAB)
    ''Unscaled: Diagrammatic figure - not to scale.
    ''ScaleA: The Event A shape area is scaled relative to the Event B shape area.
    ''ScaleB: The Event B shape is scaled relative to the Event A shape area.
    ''ScaleAB: The Event A and Event B shape areas are scaled relative the their probabilities, where the total area of the diagram represents the probability of 1.
    'Property Scaling As String
    '    Get
    '        Return _scaling
    '    End Get
    '    Set(value As String)
    '        _scaling = value
    '    End Set
    'End Property


    'This version of the Shape Bounds sets and gets the appropriate bounds for the selected scale. Scaling: Unscaled, ScaleA, ScaleB or ScaleAB
    'Private _xMin As Integer = 100 'The minimum X position of the Event shape in pixels.
    Property XMin As Integer
        Get
            'Return _xMin
            Select Case Settings.Scaling
                Case "Unscaled"
                    Return Unscaled.XMin
                Case "ScaleA"
                    Return ScaleA.XMin
                Case "ScaleB"
                    Return ScaleB.XMin
                Case "ScaleAB"
                    Return ScaleAB.XMin
                Case Else
                    RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                    Return Unscaled.XMin
            End Select
        End Get
        Set(value As Integer)
            '_xMin = value
            Select Case Settings.Scaling
                Case "Unscaled"
                    Unscaled.XMin = value
                Case "ScaleA"
                    ScaleA.XMin = value
                Case "ScaleB"
                    ScaleB.XMin = value
                Case "ScaleAB"
                    ScaleAB.XMin = value
                Case Else
                    RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                    'Unscaled.YMin = value
            End Select
        End Set
    End Property

    'Private _xMax As Integer = 500 'The maximum X position of the Event shape in pixels.
    Property XMax As Integer
        Get
            'Return _xMax
            Select Case Settings.Scaling
                Case "Unscaled"
                    Return Unscaled.XMax
                Case "ScaleA"
                    Return ScaleA.XMax
                Case "ScaleB"
                    Return ScaleB.XMax
                Case "ScaleAB"
                    Return ScaleAB.XMax
                Case Else
                    RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                    Return Unscaled.XMax
            End Select
        End Get
        Set(value As Integer)
            '_xMax = value
            Select Case Settings.Scaling
                Case "Unscaled"
                    Unscaled.XMax = value
                Case "ScaleA"
                    ScaleA.XMax = value
                Case "ScaleB"
                    ScaleB.XMax = value
                Case "ScaleAB"
                    ScaleAB.XMax = value
                Case Else
                    RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                    'Unscaled.YMin = value
            End Select
        End Set
    End Property

    'Private _yMin As Integer = 120 'The minimum Y position of the Event shape in pixels.
    Property YMin As Integer
        Get
            'Return _yMin
            Select Case Settings.Scaling
                Case "Unscaled"
                    Return Unscaled.YMin
                Case "ScaleA"
                    Return ScaleA.YMin
                Case "ScaleB"
                    Return ScaleB.YMin
                Case "ScaleAB"
                    Return ScaleAB.YMin
                Case Else
                    RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                    Return Unscaled.YMin
            End Select
        End Get
        Set(value As Integer)
            '_yMin = value
            Select Case Settings.Scaling
                Case "Unscaled"
                    Unscaled.YMin = value
                Case "ScaleA"
                    ScaleA.YMin = value
                Case "ScaleB"
                    ScaleB.YMin = value
                Case "ScaleAB"
                    ScaleAB.YMin = value
                Case Else
                    RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                    'Unscaled.YMin = value
            End Select
        End Set
    End Property

    'Private _yMax As Integer = 520 'The maximum Y position of the Event shape in pixels.
    Property YMax As Integer
        Get
            'Return _yMax
            Select Case Settings.Scaling
                Case "Unscaled"
                    Return Unscaled.YMax
                Case "ScaleA"
                    Return ScaleA.YMax
                Case "ScaleB"
                    Return ScaleB.YMax
                Case "ScaleAB"
                    Return ScaleAB.YMax
                Case Else
                    RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                    Return Unscaled.YMax
            End Select
        End Get
        Set(value As Integer)
            '_yMax = value
            Select Case Settings.Scaling
                Case "Unscaled"
                    Unscaled.YMax = value
                Case "ScaleA"
                    ScaleA.YMax = value
                Case "ScaleB"
                    ScaleB.YMax = value
                Case "ScaleAB"
                    ScaleAB.YMax = value
                Case Else
                    RaiseEvent ErrorMessage("Unknown Scaling: " & Settings.Scaling & vbCrLf)
                    'Unscaled.YMax = value
            End Select
        End Set
    End Property

    Event NameChanged(ByVal NewName As String) 'Send the changed Event Name.
    Event ErrorMessage(ByVal Msg As String) 'Send an error message

End Class 'EventInfo

Public Class ShapeBounds
    'Stores the bounds of an Event shape.

    Private _xMin As Integer = 100 'The minimum X position of the Event shape in pixels.
    Property XMin As Integer
        Get
            Return _xMin
        End Get
        Set(value As Integer)
            _xMin = value
        End Set
    End Property

    Private _xMax As Integer = 500 'The maximum X position of the Event shape in pixels.
    Property XMax As Integer
        Get
            Return _xMax
        End Get
        Set(value As Integer)
            _xMax = value
        End Set
    End Property

    Private _yMin As Integer = 120 'The minimum Y position of the Event shape in pixels.
    Property YMin As Integer
        Get
            Return _yMin
        End Get
        Set(value As Integer)
            _yMin = value
        End Set
    End Property

    Private _yMax As Integer = 520 'The maximum Y position of the Event shape in pixels.
    Property YMax As Integer
        Get
            Return _yMax
        End Get
        Set(value As Integer)
            _yMax = value
        End Set
    End Property
End Class 'ShapeBounds

Public Class clsRegion
    'Stores Region information for highlighting.

    Private _color As Color = Color.White 'The color used to indicate a region
    Property Color As Color
        Get
            Return _color
        End Get
        Set(value As Color)
            _color = value
        End Set
    End Property

    Private _A As Boolean = False 'If True, indicate region A
    Property A As Boolean
        Get
            Return _A
        End Get
        Set(value As Boolean)
            _A = value
        End Set
    End Property

    Private _notA As Boolean = False 'If True, indicate Not A
    Property NotA As Boolean
        Get
            Return _notA
        End Get
        Set(value As Boolean)
            _notA = value
        End Set
    End Property

    Private _B As Boolean = False 'If True, indicate region B
    Property B As Boolean
        Get
            Return _B
        End Get
        Set(value As Boolean)
            _B = value
        End Set
    End Property

    Private _notB As Boolean = False 'If True, indicate region Not B
    Property NotB As Boolean
        Get
            Return _notB
        End Get
        Set(value As Boolean)
            _notB = value
        End Set
    End Property

    Private _AandB As Boolean = False 'If True, indicate region A and B
    Property AandB As Boolean
        Get
            Return _AandB
        End Get
        Set(value As Boolean)
            _AandB = value
        End Set
    End Property

    Private _AandNotB As Boolean = False 'If True, indicate region A and Not B 
    Property AandNotB As Boolean
        Get
            Return _AandNotB
        End Get
        Set(value As Boolean)
            _AandNotB = value
        End Set
    End Property

    Private _notAandB As Boolean = False 'If True, indicate region Not A and B
    Property NotAandB As Boolean
        Get
            Return _notAandB
        End Get
        Set(value As Boolean)
            _notAandB = value
        End Set
    End Property

    Private _notAandNotB As Boolean = False 'If True, indicate region Not A and Not B
    Property NotAandNotB As Boolean
        Get
            Return _notAandNotB
        End Get
        Set(value As Boolean)
            _notAandNotB = value
        End Set
    End Property

End Class 'clsRegion

Public Class clsDiagram
    'Stores settings for the Bayes diagram

    Private _lineColor As Color = Color.Black 'The Color of the Venn diagram outline.
    Property LineColor As Color
        Get
            Return _lineColor
        End Get
        Set(value As Color)
            _lineColor = value
        End Set
    End Property


    Private _lineThickness As Integer = 4 'The thickness of the Venn diagram outline in pixels.
    Property LineThickness As Integer
        Get
            Return _lineThickness
        End Get
        Set(value As Integer)
            _lineThickness = value
        End Set
    End Property

    Private _boldLineThickness As Integer = 6 'The bold thickness of the Venn diagram outline in pixels.
    Property BoldLineThickness As Integer
        Get
            Return _boldLineThickness
        End Get
        Set(value As Integer)
            _boldLineThickness = value
        End Set
    End Property

    Private _boldLine As Boolean = False 'If True, the line is bold.
    Property BoldLine As Boolean
        Get
            Return _boldLine
        End Get
        Set(value As Boolean)
            _boldLine = value
        End Set
    End Property


    'Private _fillColor As Color = Color.LightYellow 'The Color of the Venn diagram background.
    Private _fillColor As Color = Color.LightGoldenrodYellow 'The Color of the Venn diagram background.
    Property FillColor As Color
        Get
            Return _fillColor
        End Get
        Set(value As Color)
            _fillColor = value
        End Set
    End Property

    Private _height As Integer = 600 'The height of the Venn diagram in pixels.
    Property Height As Integer
        Get
            Return _height
        End Get
        Set(value As Integer)
            _height = value
        End Set
    End Property

    Private _width As Integer = 800 'The width of the Venn diagram in pixels.
    Property Width As Integer
        Get
            Return _width
        End Get
        Set(value As Integer)
            _width = value
        End Set
    End Property

End Class 'clsDiagram

Public Class clsSettings
    'Display settings.

    Private _probabilityMeasure As String = "Decimal" 'The probability measure used to display probability values. (Decimal or Percent.)
    Property ProbabilityMeasure As String
        Get
            Return _probabilityMeasure
        End Get
        Set(value As String)
            _probabilityMeasure = value
            RaiseEvent ProbabilityMeasureChanged(_probabilityMeasure)
            'ProbA.UpdateLabels()
            'ProbNotA.UpdateLabels()
            'ProbB.UpdateLabels()
            'ProbNotB.UpdateLabels()
            'ProbAandB.UpdateLabels()
            'ProbAandNotB.UpdateLabels()
            'ProbNotAandB.UpdateLabels()
            'ProbNotAandNotB.UpdateLabels()
        End Set
    End Property

    Private _decimalFormat As String = "" 'The format code used to display decimal probabilities. (N4 - Number displayed with thousands separator and 4 decimal places, F4 - Number displayed with 4 decimal places.)
    Property DecimalFormat As String
        Get
            Return _decimalFormat
        End Get
        Set(value As String)
            _decimalFormat = value
            RaiseEvent DecimalFormatChanged(_decimalFormat)
            'ProbA.UpdateLabels()
            'ProbNotA.UpdateLabels()
            'ProbB.UpdateLabels()
            'ProbNotB.UpdateLabels()
            'ProbAandB.UpdateLabels()
            'ProbAandNotB.UpdateLabels()
            'ProbNotAandB.UpdateLabels()
            'ProbNotAandNotB.UpdateLabels()
        End Set
    End Property

    Private _percentFormat As String = "" 'The format code used to display percent probabilities.
    Property PercentFormat As String
        Get
            Return _percentFormat
        End Get
        Set(value As String)
            _percentFormat = value
            RaiseEvent PercentFormatChanged(_percentFormat)
            'ProbA.UpdateLabels()
            'ProbNotA.UpdateLabels()
            'ProbB.UpdateLabels()
            'ProbNotB.UpdateLabels()
            'ProbAandB.UpdateLabels()
            'ProbAandNotB.UpdateLabels()
            'ProbNotAandB.UpdateLabels()
            'ProbNotAandNotB.UpdateLabels()
        End Set
    End Property

    Private _samplesFormat As String = "" 'The format code used to display the number of samples.
    Property SamplesFormat As String
        Get
            Return _samplesFormat
        End Get
        Set(value As String)
            _samplesFormat = value
            RaiseEvent SamplesFormatChanged(_samplesFormat)
            'SampsA.CountFormat = _samplesFormat
            'SampsNotA.CountFormat = _samplesFormat
            'SampsB.CountFormat = _samplesFormat
            'SampsNotB.CountFormat = _samplesFormat
            'SampsAandB.CountFormat = _samplesFormat
            'SampsAandNotB.CountFormat = _samplesFormat
            'SampsNotAandB.CountFormat = _samplesFormat
            'SampsNotAandNotB.CountFormat = _samplesFormat
        End Set
    End Property

    Private _condition As String = "None" 'Condition used to display Probability Diagram catagories. (None, EventATrue, EventAFalse, EventBTrue, EventBFalse)
    Property Condition As String
        Get
            Return _condition
        End Get
        Set(value As String)
            _condition = value
            RaiseEvent ConditionChanged(_condition)
            'AnnotCondition.Condition = _condition 'AnnotCondition needs the Condition value to determine which version of the text and coordinates to return.
            'CalcConditionalSampleSize() 'Recalculate the conditional sample size.

            ''Thye Probabilites need the Condition value to determine which version of the text and coordinates to return.
            'ProbA.Condition = _condition
            'ProbNotA.Condition = _condition
            'ProbB.Condition = _condition
            'ProbNotB.Condition = _condition
            'ProbAandB.Condition = _condition
            'ProbAandNotB.Condition = _condition
            'ProbNotAandB.Condition = _condition
            'ProbNotAandNotB.Condition = _condition

            ''The SampleCounts need the Condition value to determine which version of the text and coordinates to return.
            'SampsA.Condition = _condition
            'SampsNotA.Condition = _condition
            'SampsB.Condition = _condition
            'SampsNotB.Condition = _condition
            'SampsAandB.Condition = _condition
            'SampsAandNotB.Condition = _condition
            'SampsNotAandB.Condition = _condition
            'SampsNotAandNotB.Condition = _condition
        End Set
    End Property

    Private _scaling As String = "Unscaled" 'The scaling used to display the Bayes model (Unscaled, ScaleA, ScaleB, ScaleAB)
    'Unscaled: Diagrammatic figure - not to scale.
    'ScaleA: The Event A shape area is scaled relative to the Event B shape area.
    'ScaleB: The Event B shape is scaled relative to the Event A shape area.
    'ScaleAB: The Event A and Event B shape areas are scaled relative the their probabilities, where the total area of the diagram represents the probability of 1.
    Property Scaling As String
        Get
            Return _scaling
        End Get
        Set(value As String)
            _scaling = value
            RaiseEvent ScalingChanged(_scaling)

            'ProbA.Scaling = _scaling
            'ProbB.Scaling = _scaling
            'ProbNotA.Scaling = _scaling
            'ProbNotB.Scaling = _scaling
            'ProbAandB.Scaling = _scaling
            'ProbAandNotB.Scaling = _scaling
            'ProbNotAandB.Scaling = _scaling
            'ProbNotAandNotB.Scaling = _scaling

            'SampsA.Scaling = _scaling
            'SampsB.Scaling = _scaling
            'SampsNotA.Scaling = _scaling
            'SampsNotB.Scaling = _scaling
            'SampsAandB.Scaling = _scaling
            'SampsAandNotB.Scaling = _scaling
            'SampsNotAandB.Scaling = _scaling
            'SampsNotAandNotB.Scaling = _scaling
        End Set
    End Property

    Event ProbabilityMeasureChanged(ByVal Measure As String) 'Send the changed Probability Measure
    Event DecimalFormatChanged(ByVal Format As String) 'Send the changed Decimal Format
    Event PercentFormatChanged(ByVal Format As String) 'Send the changed Percent Format
    Event SamplesFormatChanged(ByVal Format As String) 'Send the changed Samples Format
    Event ConditionChanged(ByVal Condition As String) 'Send the changed condition.
    Event ScalingChanged(ByVal Scaling As String) 'Send the changed scaling.

End Class 'clsSettings

Public Class YIntersect
    'Stores the Y axis intersection coordinates.

    Private _upper As Single = Single.NaN 'The Upper Y axis intersection coordinate
    Property Upper As Single
        Get
            Return _upper
        End Get
        Set(value As Single)
            _upper = value
        End Set
    End Property

    Private _lower As Single = Single.NaN 'The Lower Y axis intersection coordinate
    Property Lower As Single
        Get
            Return _lower
        End Get
        Set(value As Single)
            _lower = value
        End Set
    End Property
End Class

Public Class clsPerformance
    'Stores Test Performance measures.
    'The values are calcuculated using methods within the Bayes class - UpdateAccuracy(), UpdatedPrecision() UpdateSensitivity() etc.

    'TP is the number of True Positives in a survey.
    'TN is the number of True Negatives in a survey.
    'FP is the number of False Positives in a survey.
    'FN is the number of False Negatives in a survey.

    Public Settings As clsSettings 'This will point to Bayes.Settings

    'NOTE: The format specified in the Settings is now used instead of DisplayFormat.
    'Private _displayFormat As String = "N3" 'The format code used to display the performance measures.
    'Property DisplayFormat As String
    '    Get
    '        Return _displayFormat
    '    End Get
    '    Set(value As String)
    '        _displayFormat = value
    '    End Set
    'End Property

    Private _accuracy As Double = 0 'The accuracy of a Test. How many of those tested were correctly identified as positive or negative.
    'Accuracy = (TP + TN) / (TP + FP + FN + TN)
    Property Accuracy As Double
        Get
            Return _accuracy
        End Get
        Set(value As Double)
            _accuracy = value
        End Set
    End Property

    ReadOnly Property FormattedAccuracy As String
        Get
            'Return Format(_accuracy, DisplayFormat)

            If IsNothing(Settings) Then
            Else
                If Settings.ProbabilityMeasure = "Decimal" Then
                    Return Format(_accuracy, Settings.DecimalFormat)
                ElseIf Settings.ProbabilityMeasure = "Percent" Then
                    Return Format(_accuracy * 100, Settings.PercentFormat) & "%"
                Else
                    'Unknown probability measure.
                    Return Format(_accuracy, Settings.DecimalFormat)
                End If
            End If
        End Get
    End Property

    Private _precision As Double = 0 'The precision of a test. How many of those testing positive are truly positive.
    'Precision = TP / (TP + FP)
    Property Precision As Double
        Get
            Return _precision
        End Get
        Set(value As Double)
            _precision = value
            F1_Score = 2 * Sensitivity * Precision / (Sensitivity + Precision)
        End Set
    End Property

    ReadOnly Property FormattedPrecision As String
        Get
            'Return Format(_precision, DisplayFormat)

            If IsNothing(Settings) Then
            Else
                If Settings.ProbabilityMeasure = "Decimal" Then
                    Return Format(_precision, Settings.DecimalFormat)
                ElseIf Settings.ProbabilityMeasure = "Percent" Then
                    Return Format(_precision * 100, Settings.PercentFormat) & "%"
                Else
                    'Unknown probability measure.
                    Return Format(_precision, Settings.DecimalFormat)
                End If
            End If
        End Get
    End Property

    Private _sensitivity As Double = 0 '(aka Recall, True positive rate, TPR) The sensitivity of a test. How many of those that are positive tested positive.
    'Sensitivity = TP / (TP + FN)
    Property Sensitivity As Double
        Get
            Return _sensitivity
        End Get
        Set(value As Double)
            _sensitivity = value
            F1_Score = 2 * Sensitivity * Precision / (Sensitivity + Precision)
            PositiveLikelihoodRatio = Sensitivity / FalsePositiveRate
        End Set
    End Property

    ReadOnly Property FormattedSensitivity As String
        Get
            'Return Format(_sensitivity, DisplayFormat)

            If IsNothing(Settings) Then
            Else
                If Settings.ProbabilityMeasure = "Decimal" Then
                    Return Format(_sensitivity, Settings.DecimalFormat)
                ElseIf Settings.ProbabilityMeasure = "Percent" Then
                    Return Format(_sensitivity * 100, Settings.PercentFormat) & "%"
                Else
                    'Unknown probability measure.
                    Return Format(_sensitivity, Settings.DecimalFormat)
                End If
            End If
        End Get
    End Property

    Private _specificity As Double = 0 '(aka Selectivity, True negative rate, TNR) The Specificity of a test. How many of those that are negative tested negative.
    'Specificity = TN / (TN + FP)
    Property Specificity As Double
        Get
            Return _specificity
        End Get
        Set(value As Double)
            _specificity = value
            NegativeLikelihoodRatio = FalseNegativeRate / Specificity
        End Set
    End Property

    ReadOnly Property FormattedSpecificity As String
        Get
            'Return Format(_specificity, DisplayFormat)

            If IsNothing(Settings) Then
            Else
                If Settings.ProbabilityMeasure = "Decimal" Then
                    Return Format(_specificity, Settings.DecimalFormat)
                ElseIf Settings.ProbabilityMeasure = "Percent" Then
                    Return Format(_specificity * 100, Settings.PercentFormat) & "%"
                Else
                    'Unknown probability measure.
                    Return Format(_specificity, Settings.DecimalFormat)
                End If
            End If
        End Get
    End Property

    Private _prevalence As Double = 0 'The Prevalence of a specified condition. The propertion of the population with the specified condition
    'Specificity = TN / (TN + FP)
    Property Prevalence As Double
        Get
            Return _prevalence
        End Get
        Set(value As Double)
            _prevalence = value
        End Set
    End Property

    ReadOnly Property FormattedPrevalence As String
        Get
            'Return Format(_prevalence, DisplayFormat)

            If IsNothing(Settings) Then
            Else
                If Settings.ProbabilityMeasure = "Decimal" Then
                    Return Format(_prevalence, Settings.DecimalFormat)
                ElseIf Settings.ProbabilityMeasure = "Percent" Then
                    Return Format(_prevalence * 100, Settings.PercentFormat) & "%"
                Else
                    'Unknown probability measure.
                    Return Format(_prevalence, Settings.DecimalFormat)
                End If
            End If
        End Get
    End Property

    Private _f1_Score As Double = 0 'The F1 Score of a test. The harmonic mean of the Precision and Sensitivity. A measure of the test accurcy that consideres the Precision and Sensitivity.
    'F1Score = 2 * Sensitivity * Precision / (Sensitivity + Precision)
    'This value is updated automatically whenever Sensitivity or Precision is changed.
    Property F1_Score As Double
        Get
            Return _f1_Score
        End Get
        Set(value As Double)
            _f1_Score = value
        End Set
    End Property

    ReadOnly Property FormattedF1_Score As String
        Get
            'Return Format(_f1_Score, DisplayFormat)

            If IsNothing(Settings) Then
            Else
                'If Settings.ProbabilityMeasure = "Decimal" Then
                '    Return Format(_f1_Score, Settings.DecimalFormat)
                'ElseIf Settings.ProbabilityMeasure = "Percent" Then
                '    Return Format(_f1_Score * 100, Settings.PercentFormat) & "%"
                'Else
                '    'Unknown probability measure.
                '    Return Format(_f1_Score, Settings.DecimalFormat)
                'End If
                Return Format(_f1_Score, Settings.DecimalFormat) 'Display using Decimal format only.
            End If
        End Get
    End Property

    Private _negativePredictiveValue As Double = 0 'The proportion of those that tested negative that are truly negative.
    'NegativePredictiveValue = TN / (FN + TN)
    Property NegativePredictiveValue As Double
        Get
            Return _negativePredictiveValue
        End Get
        Set(value As Double)
            _negativePredictiveValue = value
        End Set
    End Property

    ReadOnly Property FormattedNegativePredictiveValue As String
        Get
            If IsNothing(Settings) Then
            Else
                If Settings.ProbabilityMeasure = "Decimal" Then
                    Return Format(_negativePredictiveValue, Settings.DecimalFormat)
                ElseIf Settings.ProbabilityMeasure = "Percent" Then
                    Return Format(_negativePredictiveValue * 100, Settings.PercentFormat) & "%"
                Else
                    'Unknown probability measure.
                    Return Format(_negativePredictiveValue, Settings.DecimalFormat)
                End If
            End If
        End Get
    End Property

    Private _falsePositiveRate As Double = 0 '(aka FPR, Fall-out) The probability of false alarm. Proportion of those that are truly negative that tested positive.
    'FalsePositiveRate = FP / (FP + TN)
    Property FalsePositiveRate As Double
        Get
            Return _falsePositiveRate
        End Get
        Set(value As Double)
            _falsePositiveRate = value
            PositiveLikelihoodRatio = Sensitivity / FalsePositiveRate
        End Set
    End Property

    ReadOnly Property FormattedFalsePositiveRate As String
        Get
            If IsNothing(Settings) Then
            Else
                If Settings.ProbabilityMeasure = "Decimal" Then
                    Return Format(_falsePositiveRate, Settings.DecimalFormat)
                ElseIf Settings.ProbabilityMeasure = "Percent" Then
                    Return Format(_falsePositiveRate * 100, Settings.PercentFormat) & "%"
                Else
                    'Unknown probability measure.
                    Return Format(_falsePositiveRate, Settings.DecimalFormat)
                End If
            End If
        End Get
    End Property

    Private _falseNegativeRate As Double = 0 '(aka FNR, Miss rate) Proportion of those that are truly positive that tested negative.
    'FalseNegativeRate = FN / (TP + FN)
    Property FalseNegativeRate As Double
        Get
            Return _falseNegativeRate
        End Get
        Set(value As Double)
            _falseNegativeRate = value
            NegativeLikelihoodRatio = FalseNegativeRate / Specificity
        End Set
    End Property

    ReadOnly Property FormattedFalseNegativeRate As String
        Get
            If IsNothing(Settings) Then
            Else
                If Settings.ProbabilityMeasure = "Decimal" Then
                    Return Format(_falseNegativeRate, Settings.DecimalFormat)
                ElseIf Settings.ProbabilityMeasure = "Percent" Then
                    Return Format(_falseNegativeRate * 100, Settings.PercentFormat) & "%"
                Else
                    'Unknown probability measure.
                    Return Format(_falseNegativeRate, Settings.DecimalFormat)
                End If
            End If
        End Get
    End Property

    Private _falseOmissionRate As Double = 0 'Proportion of those that tested positive that are truly positive.
    'FalseOmissionRate = FN / (FN + TN)
    Property FalseOmissionRate As Double
        Get
            Return _falseOmissionRate
        End Get
        Set(value As Double)
            _falseOmissionRate = value
        End Set
    End Property

    ReadOnly Property FormattedFalseOmissionRate As String
        Get
            If IsNothing(Settings) Then
            Else
                If Settings.ProbabilityMeasure = "Decimal" Then
                    Return Format(_falseOmissionRate, Settings.DecimalFormat)
                ElseIf Settings.ProbabilityMeasure = "Percent" Then
                    Return Format(_falseOmissionRate * 100, Settings.PercentFormat) & "%"
                Else
                    'Unknown probability measure.
                    Return Format(_falseOmissionRate, Settings.DecimalFormat)
                End If
            End If
        End Get
    End Property

    Private _falseDiscoveryRate As Double = 0 'Proportion of those that tested positive that are truly negative.
    'FalseDiscoveryRate = FP / (TP + FP)
    Property FalseDiscoveryRate As Double
        Get
            Return _falseDiscoveryRate
        End Get
        Set(value As Double)
            _falseDiscoveryRate = value
        End Set
    End Property

    ReadOnly Property FormattedFalseDiscoveryRate As String
        Get
            If IsNothing(Settings) Then
            Else
                If Settings.ProbabilityMeasure = "Decimal" Then
                    Return Format(_falseDiscoveryRate, Settings.DecimalFormat)
                ElseIf Settings.ProbabilityMeasure = "Percent" Then
                    Return Format(_falseDiscoveryRate * 100, Settings.PercentFormat) & "%"
                Else
                    'Unknown probability measure.
                    Return Format(_falseDiscoveryRate, Settings.DecimalFormat)
                End If
            End If
        End Get
    End Property

    Private _positiveLikelihoodRatio As Double = 0 '(aka PLR, LR+)
    'PositiveLikelihoodRatio = TPR / FPR (= Sensitivity / False Positive Rate)
    Property PositiveLikelihoodRatio As Double
        Get
            Return _positiveLikelihoodRatio
        End Get
        Set(value As Double)
            _positiveLikelihoodRatio = value
            DiagnosticOddsRatio = PositiveLikelihoodRatio / NegativeLikelihoodRatio
        End Set
    End Property

    ReadOnly Property FormattedPositiveLikelihoodRatio As String
        Get
            If IsNothing(Settings) Then
            Else
                'If Settings.ProbabilityMeasure = "Decimal" Then
                '    Return Format(_positiveLikelihoodRatio, Settings.DecimalFormat)
                'ElseIf Settings.ProbabilityMeasure = "Percent" Then
                '    Return Format(_positiveLikelihoodRatio * 100, Settings.PercentFormat) & "%"
                'Else
                '    'Unknown probability measure.
                '    Return Format(_positiveLikelihoodRatio, Settings.DecimalFormat)
                'End If
                Return Format(_positiveLikelihoodRatio, Settings.DecimalFormat) 'Display using Decimal format only.
            End If
        End Get
    End Property

    Private _negativeLikelihoodRatio As Double = 0 '(aka NLR, LR-)
    'NegativeLikelihoodRatio = FNR / TNR (= False Negative Rate / Specificity)
    Property NegativeLikelihoodRatio As Double
        Get
            Return _negativeLikelihoodRatio
        End Get
        Set(value As Double)
            _negativeLikelihoodRatio = value
            DiagnosticOddsRatio = PositiveLikelihoodRatio / NegativeLikelihoodRatio
        End Set
    End Property

    ReadOnly Property FormattedNegativeLikelihoodRatio As String
        Get
            If IsNothing(Settings) Then
            Else
                'If Settings.ProbabilityMeasure = "Decimal" Then
                '    Return Format(_negativeLikelihoodRatio, Settings.DecimalFormat)
                'ElseIf Settings.ProbabilityMeasure = "Percent" Then
                '    Return Format(_negativeLikelihoodRatio * 100, Settings.PercentFormat) & "%"
                'Else
                '    'Unknown probability measure.
                '    Return Format(_negativeLikelihoodRatio, Settings.DecimalFormat)
                'End If
                Return Format(_negativeLikelihoodRatio, Settings.DecimalFormat) 'Display using Decimal format only.
            End If
        End Get
    End Property

    Private _diagnosticOddsRatio As Double = 0 '(aka DOR)
    'DiagnosticOddsRatio = LR+ / LR- (= Positive Likelihood Ratio / Negative Likelihood Ratio)
    Property DiagnosticOddsRatio As Double
        Get
            Return _diagnosticOddsRatio
        End Get
        Set(value As Double)
            _diagnosticOddsRatio = value
        End Set
    End Property

    ReadOnly Property FormattedDiagnosticOddsRatio As String
        Get
            If IsNothing(Settings) Then
            Else
                'If Settings.ProbabilityMeasure = "Decimal" Then
                '    Return Format(_diagnosticOddsRatio, Settings.DecimalFormat)
                'ElseIf Settings.ProbabilityMeasure = "Percent" Then
                '    Return Format(_diagnosticOddsRatio * 100, Settings.PercentFormat) & "%"
                'Else
                '    'Unknown probability measure.
                '    Return Format(_diagnosticOddsRatio, Settings.DecimalFormat)
                'End If
                Return Format(_diagnosticOddsRatio, Settings.DecimalFormat) 'Display using Decimal format only.
            End If
        End Get
    End Property

End Class
